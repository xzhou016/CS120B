
xzhou016_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  000014a8  0000153c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  0080015e  0080015e  0000159a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000159a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000015cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000160c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a0e  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001ca  00000000  00000000  00002122  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d22  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00003010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ab  00000000  00000000  00003434  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e3  00000000  00000000  000039df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000042c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 ea       	ldi	r30, 0xA8	; 168
      a0:	f4 e1       	ldi	r31, 0x14	; 20
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 35       	cpi	r26, 0x5E	; 94
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	ae e5       	ldi	r26, 0x5E	; 94
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ae 3a       	cpi	r26, 0xAE	; 174
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	03 d6       	rcall	.+3078   	; 0xcca <main>
      c4:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <LCD_ClearScreen>:
		Q->front %= Q->capacity;		// Modulate according to queue capacity
		Q->num_objects--;				// Decrement number of objects
		return tmp;						// Return data
	}
	return '\0';						// Else return null to indicate empty
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	18 d0       	rcall	.+48     	; 0x106 <LCD_WriteCommand>
      d6:	df 91       	pop	r29
      d8:	cf 91       	pop	r28
      da:	08 95       	ret

000000dc <LCD_init>:
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
      e4:	84 e6       	ldi	r24, 0x64	; 100
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	a6 d0       	rcall	.+332    	; 0x236 <delay_ms>
      ea:	88 e3       	ldi	r24, 0x38	; 56
      ec:	0c d0       	rcall	.+24     	; 0x106 <LCD_WriteCommand>
      ee:	86 e0       	ldi	r24, 0x06	; 6
      f0:	0a d0       	rcall	.+20     	; 0x106 <LCD_WriteCommand>
      f2:	8f e0       	ldi	r24, 0x0F	; 15
      f4:	08 d0       	rcall	.+16     	; 0x106 <LCD_WriteCommand>
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	06 d0       	rcall	.+12     	; 0x106 <LCD_WriteCommand>
      fa:	8a e0       	ldi	r24, 0x0A	; 10
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	9b d0       	rcall	.+310    	; 0x236 <delay_ms>
     100:	df 91       	pop	r29
     102:	cf 91       	pop	r28
     104:	08 95       	ret

00000106 <LCD_WriteCommand>:
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	1f 92       	push	r1
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	89 83       	std	Y+1, r24	; 0x01
     112:	8b e2       	ldi	r24, 0x2B	; 43
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	2b e2       	ldi	r18, 0x2B	; 43
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	f9 01       	movw	r30, r18
     11c:	20 81       	ld	r18, Z
     11e:	2f 7b       	andi	r18, 0xBF	; 191
     120:	fc 01       	movw	r30, r24
     122:	20 83       	st	Z, r18
     124:	85 e2       	ldi	r24, 0x25	; 37
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	29 81       	ldd	r18, Y+1	; 0x01
     12a:	fc 01       	movw	r30, r24
     12c:	20 83       	st	Z, r18
     12e:	8b e2       	ldi	r24, 0x2B	; 43
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	2b e2       	ldi	r18, 0x2B	; 43
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	f9 01       	movw	r30, r18
     138:	20 81       	ld	r18, Z
     13a:	20 68       	ori	r18, 0x80	; 128
     13c:	fc 01       	movw	r30, r24
     13e:	20 83       	st	Z, r18
     140:	00 00       	nop
     142:	8b e2       	ldi	r24, 0x2B	; 43
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	2b e2       	ldi	r18, 0x2B	; 43
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	f9 01       	movw	r30, r18
     14c:	20 81       	ld	r18, Z
     14e:	2f 77       	andi	r18, 0x7F	; 127
     150:	fc 01       	movw	r30, r24
     152:	20 83       	st	Z, r18
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	6e d0       	rcall	.+220    	; 0x236 <delay_ms>
     15a:	0f 90       	pop	r0
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	08 95       	ret

00000162 <LCD_WriteData>:
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	1f 92       	push	r1
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	89 83       	std	Y+1, r24	; 0x01
     16e:	8b e2       	ldi	r24, 0x2B	; 43
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	2b e2       	ldi	r18, 0x2B	; 43
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	f9 01       	movw	r30, r18
     178:	20 81       	ld	r18, Z
     17a:	20 64       	ori	r18, 0x40	; 64
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18
     180:	85 e2       	ldi	r24, 0x25	; 37
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	29 81       	ldd	r18, Y+1	; 0x01
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
     18a:	8b e2       	ldi	r24, 0x2B	; 43
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	2b e2       	ldi	r18, 0x2B	; 43
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	f9 01       	movw	r30, r18
     194:	20 81       	ld	r18, Z
     196:	20 68       	ori	r18, 0x80	; 128
     198:	fc 01       	movw	r30, r24
     19a:	20 83       	st	Z, r18
     19c:	00 00       	nop
     19e:	8b e2       	ldi	r24, 0x2B	; 43
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	2b e2       	ldi	r18, 0x2B	; 43
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	f9 01       	movw	r30, r18
     1a8:	20 81       	ld	r18, Z
     1aa:	2f 77       	andi	r18, 0x7F	; 127
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	40 d0       	rcall	.+128    	; 0x236 <delay_ms>
     1b6:	0f 90       	pop	r0
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	08 95       	ret

000001be <LCD_DisplayString>:
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <LCD_DisplayString+0x6>
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <LCD_DisplayString+0x8>
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	8a 83       	std	Y+2, r24	; 0x02
     1cc:	7c 83       	std	Y+4, r23	; 0x04
     1ce:	6b 83       	std	Y+3, r22	; 0x03
     1d0:	8a 81       	ldd	r24, Y+2	; 0x02
     1d2:	89 83       	std	Y+1, r24	; 0x01
     1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <LCD_DisplayString+0x36>
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	98 0f       	add	r25, r24
     1dc:	99 83       	std	Y+1, r25	; 0x01
     1de:	17 d0       	rcall	.+46     	; 0x20e <LCD_Cursor>
     1e0:	8b 81       	ldd	r24, Y+3	; 0x03
     1e2:	9c 81       	ldd	r25, Y+4	; 0x04
     1e4:	9c 01       	movw	r18, r24
     1e6:	2f 5f       	subi	r18, 0xFF	; 255
     1e8:	3f 4f       	sbci	r19, 0xFF	; 255
     1ea:	3c 83       	std	Y+4, r19	; 0x04
     1ec:	2b 83       	std	Y+3, r18	; 0x03
     1ee:	fc 01       	movw	r30, r24
     1f0:	80 81       	ld	r24, Z
     1f2:	b7 df       	rcall	.-146    	; 0x162 <LCD_WriteData>
     1f4:	8b 81       	ldd	r24, Y+3	; 0x03
     1f6:	9c 81       	ldd	r25, Y+4	; 0x04
     1f8:	fc 01       	movw	r30, r24
     1fa:	80 81       	ld	r24, Z
     1fc:	88 23       	and	r24, r24
     1fe:	59 f7       	brne	.-42     	; 0x1d6 <LCD_DisplayString+0x18>
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	0f 90       	pop	r0
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <LCD_Cursor>:
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	1f 92       	push	r1
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	89 83       	std	Y+1, r24	; 0x01
     21a:	89 81       	ldd	r24, Y+1	; 0x01
     21c:	81 31       	cpi	r24, 0x11	; 17
     21e:	20 f4       	brcc	.+8      	; 0x228 <LCD_Cursor+0x1a>
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	81 58       	subi	r24, 0x81	; 129
     224:	70 df       	rcall	.-288    	; 0x106 <LCD_WriteCommand>
     226:	03 c0       	rjmp	.+6      	; 0x22e <LCD_Cursor+0x20>
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	81 55       	subi	r24, 0x51	; 81
     22c:	6c df       	rcall	.-296    	; 0x106 <LCD_WriteCommand>
     22e:	0f 90       	pop	r0
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <delay_ms>:
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	00 d0       	rcall	.+0      	; 0x23c <delay_ms+0x6>
     23c:	00 d0       	rcall	.+0      	; 0x23e <delay_ms+0x8>
     23e:	00 d0       	rcall	.+0      	; 0x240 <delay_ms+0xa>
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	9e 83       	std	Y+6, r25	; 0x06
     246:	8d 83       	std	Y+5, r24	; 0x05
     248:	1a 82       	std	Y+2, r1	; 0x02
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	13 c0       	rjmp	.+38     	; 0x274 <delay_ms+0x3e>
     24e:	1c 82       	std	Y+4, r1	; 0x04
     250:	1b 82       	std	Y+3, r1	; 0x03
     252:	06 c0       	rjmp	.+12     	; 0x260 <delay_ms+0x2a>
     254:	00 00       	nop
     256:	8b 81       	ldd	r24, Y+3	; 0x03
     258:	9c 81       	ldd	r25, Y+4	; 0x04
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	9c 83       	std	Y+4, r25	; 0x04
     25e:	8b 83       	std	Y+3, r24	; 0x03
     260:	8b 81       	ldd	r24, Y+3	; 0x03
     262:	9c 81       	ldd	r25, Y+4	; 0x04
     264:	87 30       	cpi	r24, 0x07	; 7
     266:	93 40       	sbci	r25, 0x03	; 3
     268:	ac f3       	brlt	.-22     	; 0x254 <delay_ms+0x1e>
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	9a 81       	ldd	r25, Y+2	; 0x02
     26e:	01 96       	adiw	r24, 0x01	; 1
     270:	9a 83       	std	Y+2, r25	; 0x02
     272:	89 83       	std	Y+1, r24	; 0x01
     274:	29 81       	ldd	r18, Y+1	; 0x01
     276:	3a 81       	ldd	r19, Y+2	; 0x02
     278:	8d 81       	ldd	r24, Y+5	; 0x05
     27a:	9e 81       	ldd	r25, Y+6	; 0x06
     27c:	28 17       	cp	r18, r24
     27e:	39 07       	cpc	r19, r25
     280:	34 f3       	brlt	.-52     	; 0x24e <delay_ms+0x18>
     282:	26 96       	adiw	r28, 0x06	; 6
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	de bf       	out	0x3e, r29	; 62
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <GetBit>:
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	00 d0       	rcall	.+0      	; 0x29a <GetBit+0x6>
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	89 83       	std	Y+1, r24	; 0x01
     2a0:	6a 83       	std	Y+2, r22	; 0x02
     2a2:	8a 81       	ldd	r24, Y+2	; 0x02
     2a4:	28 2f       	mov	r18, r24
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <GetBit+0x1e>
     2ae:	88 0f       	add	r24, r24
     2b0:	99 1f       	adc	r25, r25
     2b2:	2a 95       	dec	r18
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <GetBit+0x1a>
     2b6:	98 2f       	mov	r25, r24
     2b8:	89 81       	ldd	r24, Y+1	; 0x01
     2ba:	89 23       	and	r24, r25
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <TimerSet>:
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <TimerSet+0x6>
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <TimerSet+0x8>
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	69 83       	std	Y+1, r22	; 0x01
     2d4:	7a 83       	std	Y+2, r23	; 0x02
     2d6:	8b 83       	std	Y+3, r24	; 0x03
     2d8:	9c 83       	std	Y+4, r25	; 0x04
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	9a 81       	ldd	r25, Y+2	; 0x02
     2de:	ab 81       	ldd	r26, Y+3	; 0x03
     2e0:	bc 81       	ldd	r27, Y+4	; 0x04
     2e2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_avr_timer_M>
     2e6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <_avr_timer_M+0x1>
     2ea:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <_avr_timer_M+0x2>
     2ee:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <_avr_timer_M+0x3>
     2f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_M>
     2f6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_M+0x1>
     2fa:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_M+0x2>
     2fe:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_M+0x3>
     302:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <_avr_timer_cntcurr>
     306:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <_avr_timer_cntcurr+0x1>
     30a:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <_avr_timer_cntcurr+0x2>
     30e:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <_avr_timer_cntcurr+0x3>
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <TimerOn>:
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	81 e8       	ldi	r24, 0x81	; 129
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	2b e0       	ldi	r18, 0x0B	; 11
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
     332:	88 e8       	ldi	r24, 0x88	; 136
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	2d e7       	ldi	r18, 0x7D	; 125
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	fc 01       	movw	r30, r24
     33c:	31 83       	std	Z+1, r19	; 0x01
     33e:	20 83       	st	Z, r18
     340:	8f e6       	ldi	r24, 0x6F	; 111
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	22 e0       	ldi	r18, 0x02	; 2
     346:	fc 01       	movw	r30, r24
     348:	20 83       	st	Z, r18
     34a:	84 e8       	ldi	r24, 0x84	; 132
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	fc 01       	movw	r30, r24
     350:	11 82       	std	Z+1, r1	; 0x01
     352:	10 82       	st	Z, r1
     354:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_M>
     358:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_M+0x1>
     35c:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_M+0x2>
     360:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_M+0x3>
     364:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <_avr_timer_cntcurr>
     368:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <_avr_timer_cntcurr+0x1>
     36c:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <_avr_timer_cntcurr+0x2>
     370:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <_avr_timer_cntcurr+0x3>
     374:	8f e5       	ldi	r24, 0x5F	; 95
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	2f e5       	ldi	r18, 0x5F	; 95
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	f9 01       	movw	r30, r18
     37e:	20 81       	ld	r18, Z
     380:	20 68       	ori	r18, 0x80	; 128
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <TimerISR>:
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <__vector_13>:
     3a0:	1f 92       	push	r1
     3a2:	0f 92       	push	r0
     3a4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     3b0:	0f 92       	push	r0
     3b2:	2f 93       	push	r18
     3b4:	3f 93       	push	r19
     3b6:	4f 93       	push	r20
     3b8:	5f 93       	push	r21
     3ba:	6f 93       	push	r22
     3bc:	7f 93       	push	r23
     3be:	8f 93       	push	r24
     3c0:	9f 93       	push	r25
     3c2:	af 93       	push	r26
     3c4:	bf 93       	push	r27
     3c6:	ef 93       	push	r30
     3c8:	ff 93       	push	r31
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
     3d2:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <_avr_timer_cntcurr>
     3d6:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <_avr_timer_cntcurr+0x1>
     3da:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <_avr_timer_cntcurr+0x2>
     3de:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <_avr_timer_cntcurr+0x3>
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	a1 09       	sbc	r26, r1
     3e6:	b1 09       	sbc	r27, r1
     3e8:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <_avr_timer_cntcurr>
     3ec:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <_avr_timer_cntcurr+0x1>
     3f0:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <_avr_timer_cntcurr+0x2>
     3f4:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <_avr_timer_cntcurr+0x3>
     3f8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <_avr_timer_cntcurr>
     3fc:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <_avr_timer_cntcurr+0x1>
     400:	a0 91 61 01 	lds	r26, 0x0161	; 0x800161 <_avr_timer_cntcurr+0x2>
     404:	b0 91 62 01 	lds	r27, 0x0162	; 0x800162 <_avr_timer_cntcurr+0x3>
     408:	89 2b       	or	r24, r25
     40a:	8a 2b       	or	r24, r26
     40c:	8b 2b       	or	r24, r27
     40e:	89 f4       	brne	.+34     	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
     410:	bd df       	rcall	.-134    	; 0x38c <TimerISR>
     412:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_avr_timer_M>
     416:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <_avr_timer_M+0x1>
     41a:	a0 91 0c 01 	lds	r26, 0x010C	; 0x80010c <_avr_timer_M+0x2>
     41e:	b0 91 0d 01 	lds	r27, 0x010D	; 0x80010d <_avr_timer_M+0x3>
     422:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <_avr_timer_cntcurr>
     426:	90 93 60 01 	sts	0x0160, r25	; 0x800160 <_avr_timer_cntcurr+0x1>
     42a:	a0 93 61 01 	sts	0x0161, r26	; 0x800161 <_avr_timer_cntcurr+0x2>
     42e:	b0 93 62 01 	sts	0x0162, r27	; 0x800162 <_avr_timer_cntcurr+0x3>
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	bf 91       	pop	r27
     43c:	af 91       	pop	r26
     43e:	9f 91       	pop	r25
     440:	8f 91       	pop	r24
     442:	7f 91       	pop	r23
     444:	6f 91       	pop	r22
     446:	5f 91       	pop	r21
     448:	4f 91       	pop	r20
     44a:	3f 91       	pop	r19
     44c:	2f 91       	pop	r18
     44e:	0f 90       	pop	r0
     450:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     454:	0f 90       	pop	r0
     456:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     45a:	0f 90       	pop	r0
     45c:	1f 90       	pop	r1
     45e:	18 95       	reti

00000460 <findGCD>:
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	60 97       	sbiw	r28, 0x10	; 16
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	6d 83       	std	Y+5, r22	; 0x05
     476:	7e 83       	std	Y+6, r23	; 0x06
     478:	8f 83       	std	Y+7, r24	; 0x07
     47a:	98 87       	std	Y+8, r25	; 0x08
     47c:	29 87       	std	Y+9, r18	; 0x09
     47e:	3a 87       	std	Y+10, r19	; 0x0a
     480:	4b 87       	std	Y+11, r20	; 0x0b
     482:	5c 87       	std	Y+12, r21	; 0x0c
     484:	8d 81       	ldd	r24, Y+5	; 0x05
     486:	9e 81       	ldd	r25, Y+6	; 0x06
     488:	af 81       	ldd	r26, Y+7	; 0x07
     48a:	b8 85       	ldd	r27, Y+8	; 0x08
     48c:	29 85       	ldd	r18, Y+9	; 0x09
     48e:	3a 85       	ldd	r19, Y+10	; 0x0a
     490:	4b 85       	ldd	r20, Y+11	; 0x0b
     492:	5c 85       	ldd	r21, Y+12	; 0x0c
     494:	bc 01       	movw	r22, r24
     496:	cd 01       	movw	r24, r26
     498:	12 d6       	rcall	.+3108   	; 0x10be <__udivmodsi4>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	89 83       	std	Y+1, r24	; 0x01
     4a0:	9a 83       	std	Y+2, r25	; 0x02
     4a2:	ab 83       	std	Y+3, r26	; 0x03
     4a4:	bc 83       	std	Y+4, r27	; 0x04
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	ab 81       	ldd	r26, Y+3	; 0x03
     4ac:	bc 81       	ldd	r27, Y+4	; 0x04
     4ae:	89 2b       	or	r24, r25
     4b0:	8a 2b       	or	r24, r26
     4b2:	8b 2b       	or	r24, r27
     4b4:	29 f4       	brne	.+10     	; 0x4c0 <findGCD+0x60>
     4b6:	89 85       	ldd	r24, Y+9	; 0x09
     4b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ba:	ab 85       	ldd	r26, Y+11	; 0x0b
     4bc:	bc 85       	ldd	r27, Y+12	; 0x0c
     4be:	11 c0       	rjmp	.+34     	; 0x4e2 <findGCD+0x82>
     4c0:	89 85       	ldd	r24, Y+9	; 0x09
     4c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c4:	ab 85       	ldd	r26, Y+11	; 0x0b
     4c6:	bc 85       	ldd	r27, Y+12	; 0x0c
     4c8:	8d 83       	std	Y+5, r24	; 0x05
     4ca:	9e 83       	std	Y+6, r25	; 0x06
     4cc:	af 83       	std	Y+7, r26	; 0x07
     4ce:	b8 87       	std	Y+8, r27	; 0x08
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	9a 81       	ldd	r25, Y+2	; 0x02
     4d4:	ab 81       	ldd	r26, Y+3	; 0x03
     4d6:	bc 81       	ldd	r27, Y+4	; 0x04
     4d8:	89 87       	std	Y+9, r24	; 0x09
     4da:	9a 87       	std	Y+10, r25	; 0x0a
     4dc:	ab 87       	std	Y+11, r26	; 0x0b
     4de:	bc 87       	std	Y+12, r27	; 0x0c
     4e0:	d1 cf       	rjmp	.-94     	; 0x484 <findGCD+0x24>
     4e2:	bc 01       	movw	r22, r24
     4e4:	cd 01       	movw	r24, r26
     4e6:	60 96       	adiw	r28, 0x10	; 16
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <GetKeypadKey>:
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	88 e2       	ldi	r24, 0x28	; 40
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	2f ee       	ldi	r18, 0xEF	; 239
     506:	fc 01       	movw	r30, r24
     508:	20 83       	st	Z, r18
     50a:	00 00       	nop
     50c:	86 e2       	ldi	r24, 0x26	; 38
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	fc 01       	movw	r30, r24
     512:	80 81       	ld	r24, Z
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	be de       	rcall	.-644    	; 0x294 <GetBit>
     518:	88 23       	and	r24, r24
     51a:	11 f4       	brne	.+4      	; 0x520 <GetKeypadKey+0x28>
     51c:	81 e3       	ldi	r24, 0x31	; 49
     51e:	a9 c0       	rjmp	.+338    	; 0x672 <GetKeypadKey+0x17a>
     520:	86 e2       	ldi	r24, 0x26	; 38
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	fc 01       	movw	r30, r24
     526:	80 81       	ld	r24, Z
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	b4 de       	rcall	.-664    	; 0x294 <GetBit>
     52c:	88 23       	and	r24, r24
     52e:	11 f4       	brne	.+4      	; 0x534 <GetKeypadKey+0x3c>
     530:	82 e3       	ldi	r24, 0x32	; 50
     532:	9f c0       	rjmp	.+318    	; 0x672 <GetKeypadKey+0x17a>
     534:	86 e2       	ldi	r24, 0x26	; 38
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	fc 01       	movw	r30, r24
     53a:	80 81       	ld	r24, Z
     53c:	62 e0       	ldi	r22, 0x02	; 2
     53e:	aa de       	rcall	.-684    	; 0x294 <GetBit>
     540:	88 23       	and	r24, r24
     542:	11 f4       	brne	.+4      	; 0x548 <GetKeypadKey+0x50>
     544:	83 e3       	ldi	r24, 0x33	; 51
     546:	95 c0       	rjmp	.+298    	; 0x672 <GetKeypadKey+0x17a>
     548:	86 e2       	ldi	r24, 0x26	; 38
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	fc 01       	movw	r30, r24
     54e:	80 81       	ld	r24, Z
     550:	63 e0       	ldi	r22, 0x03	; 3
     552:	a0 de       	rcall	.-704    	; 0x294 <GetBit>
     554:	88 23       	and	r24, r24
     556:	11 f4       	brne	.+4      	; 0x55c <GetKeypadKey+0x64>
     558:	81 e4       	ldi	r24, 0x41	; 65
     55a:	8b c0       	rjmp	.+278    	; 0x672 <GetKeypadKey+0x17a>
     55c:	88 e2       	ldi	r24, 0x28	; 40
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	2f ed       	ldi	r18, 0xDF	; 223
     562:	fc 01       	movw	r30, r24
     564:	20 83       	st	Z, r18
     566:	00 00       	nop
     568:	86 e2       	ldi	r24, 0x26	; 38
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	fc 01       	movw	r30, r24
     56e:	80 81       	ld	r24, Z
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	90 de       	rcall	.-736    	; 0x294 <GetBit>
     574:	88 23       	and	r24, r24
     576:	11 f4       	brne	.+4      	; 0x57c <GetKeypadKey+0x84>
     578:	84 e3       	ldi	r24, 0x34	; 52
     57a:	7b c0       	rjmp	.+246    	; 0x672 <GetKeypadKey+0x17a>
     57c:	86 e2       	ldi	r24, 0x26	; 38
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	fc 01       	movw	r30, r24
     582:	80 81       	ld	r24, Z
     584:	61 e0       	ldi	r22, 0x01	; 1
     586:	86 de       	rcall	.-756    	; 0x294 <GetBit>
     588:	88 23       	and	r24, r24
     58a:	11 f4       	brne	.+4      	; 0x590 <GetKeypadKey+0x98>
     58c:	85 e3       	ldi	r24, 0x35	; 53
     58e:	71 c0       	rjmp	.+226    	; 0x672 <GetKeypadKey+0x17a>
     590:	86 e2       	ldi	r24, 0x26	; 38
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fc 01       	movw	r30, r24
     596:	80 81       	ld	r24, Z
     598:	62 e0       	ldi	r22, 0x02	; 2
     59a:	7c de       	rcall	.-776    	; 0x294 <GetBit>
     59c:	88 23       	and	r24, r24
     59e:	11 f4       	brne	.+4      	; 0x5a4 <GetKeypadKey+0xac>
     5a0:	86 e3       	ldi	r24, 0x36	; 54
     5a2:	67 c0       	rjmp	.+206    	; 0x672 <GetKeypadKey+0x17a>
     5a4:	86 e2       	ldi	r24, 0x26	; 38
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	fc 01       	movw	r30, r24
     5aa:	80 81       	ld	r24, Z
     5ac:	63 e0       	ldi	r22, 0x03	; 3
     5ae:	72 de       	rcall	.-796    	; 0x294 <GetBit>
     5b0:	88 23       	and	r24, r24
     5b2:	11 f4       	brne	.+4      	; 0x5b8 <GetKeypadKey+0xc0>
     5b4:	82 e4       	ldi	r24, 0x42	; 66
     5b6:	5d c0       	rjmp	.+186    	; 0x672 <GetKeypadKey+0x17a>
     5b8:	88 e2       	ldi	r24, 0x28	; 40
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	2f eb       	ldi	r18, 0xBF	; 191
     5be:	fc 01       	movw	r30, r24
     5c0:	20 83       	st	Z, r18
     5c2:	00 00       	nop
     5c4:	86 e2       	ldi	r24, 0x26	; 38
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	fc 01       	movw	r30, r24
     5ca:	80 81       	ld	r24, Z
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	62 de       	rcall	.-828    	; 0x294 <GetBit>
     5d0:	88 23       	and	r24, r24
     5d2:	11 f4       	brne	.+4      	; 0x5d8 <GetKeypadKey+0xe0>
     5d4:	87 e3       	ldi	r24, 0x37	; 55
     5d6:	4d c0       	rjmp	.+154    	; 0x672 <GetKeypadKey+0x17a>
     5d8:	86 e2       	ldi	r24, 0x26	; 38
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	fc 01       	movw	r30, r24
     5de:	80 81       	ld	r24, Z
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	58 de       	rcall	.-848    	; 0x294 <GetBit>
     5e4:	88 23       	and	r24, r24
     5e6:	11 f4       	brne	.+4      	; 0x5ec <GetKeypadKey+0xf4>
     5e8:	88 e3       	ldi	r24, 0x38	; 56
     5ea:	43 c0       	rjmp	.+134    	; 0x672 <GetKeypadKey+0x17a>
     5ec:	86 e2       	ldi	r24, 0x26	; 38
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	fc 01       	movw	r30, r24
     5f2:	80 81       	ld	r24, Z
     5f4:	62 e0       	ldi	r22, 0x02	; 2
     5f6:	4e de       	rcall	.-868    	; 0x294 <GetBit>
     5f8:	88 23       	and	r24, r24
     5fa:	11 f4       	brne	.+4      	; 0x600 <GetKeypadKey+0x108>
     5fc:	89 e3       	ldi	r24, 0x39	; 57
     5fe:	39 c0       	rjmp	.+114    	; 0x672 <GetKeypadKey+0x17a>
     600:	86 e2       	ldi	r24, 0x26	; 38
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	fc 01       	movw	r30, r24
     606:	80 81       	ld	r24, Z
     608:	63 e0       	ldi	r22, 0x03	; 3
     60a:	44 de       	rcall	.-888    	; 0x294 <GetBit>
     60c:	88 23       	and	r24, r24
     60e:	11 f4       	brne	.+4      	; 0x614 <GetKeypadKey+0x11c>
     610:	83 e4       	ldi	r24, 0x43	; 67
     612:	2f c0       	rjmp	.+94     	; 0x672 <GetKeypadKey+0x17a>
     614:	88 e2       	ldi	r24, 0x28	; 40
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	2f e7       	ldi	r18, 0x7F	; 127
     61a:	fc 01       	movw	r30, r24
     61c:	20 83       	st	Z, r18
     61e:	00 00       	nop
     620:	86 e2       	ldi	r24, 0x26	; 38
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	fc 01       	movw	r30, r24
     626:	80 81       	ld	r24, Z
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	34 de       	rcall	.-920    	; 0x294 <GetBit>
     62c:	88 23       	and	r24, r24
     62e:	11 f4       	brne	.+4      	; 0x634 <GetKeypadKey+0x13c>
     630:	8a e2       	ldi	r24, 0x2A	; 42
     632:	1f c0       	rjmp	.+62     	; 0x672 <GetKeypadKey+0x17a>
     634:	86 e2       	ldi	r24, 0x26	; 38
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	fc 01       	movw	r30, r24
     63a:	80 81       	ld	r24, Z
     63c:	61 e0       	ldi	r22, 0x01	; 1
     63e:	2a de       	rcall	.-940    	; 0x294 <GetBit>
     640:	88 23       	and	r24, r24
     642:	11 f4       	brne	.+4      	; 0x648 <GetKeypadKey+0x150>
     644:	80 e3       	ldi	r24, 0x30	; 48
     646:	15 c0       	rjmp	.+42     	; 0x672 <GetKeypadKey+0x17a>
     648:	86 e2       	ldi	r24, 0x26	; 38
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	fc 01       	movw	r30, r24
     64e:	80 81       	ld	r24, Z
     650:	62 e0       	ldi	r22, 0x02	; 2
     652:	20 de       	rcall	.-960    	; 0x294 <GetBit>
     654:	88 23       	and	r24, r24
     656:	11 f4       	brne	.+4      	; 0x65c <GetKeypadKey+0x164>
     658:	83 e2       	ldi	r24, 0x23	; 35
     65a:	0b c0       	rjmp	.+22     	; 0x672 <GetKeypadKey+0x17a>
     65c:	86 e2       	ldi	r24, 0x26	; 38
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	fc 01       	movw	r30, r24
     662:	80 81       	ld	r24, Z
     664:	63 e0       	ldi	r22, 0x03	; 3
     666:	16 de       	rcall	.-980    	; 0x294 <GetBit>
     668:	88 23       	and	r24, r24
     66a:	11 f4       	brne	.+4      	; 0x670 <GetKeypadKey+0x178>
     66c:	84 e4       	ldi	r24, 0x44	; 68
     66e:	01 c0       	rjmp	.+2      	; 0x672 <GetKeypadKey+0x17a>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <QueueInit>:
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	00 d0       	rcall	.+0      	; 0x67e <QueueInit+0x6>
     67e:	1f 92       	push	r1
     680:	cd b7       	in	r28, 0x3d	; 61
     682:	de b7       	in	r29, 0x3e	; 62
     684:	8b 83       	std	Y+3, r24	; 0x03
     686:	86 e0       	ldi	r24, 0x06	; 6
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	4f d5       	rcall	.+2718   	; 0x112a <malloc>
     68c:	9a 83       	std	Y+2, r25	; 0x02
     68e:	89 83       	std	Y+1, r24	; 0x01
     690:	8b 81       	ldd	r24, Y+3	; 0x03
     692:	88 2f       	mov	r24, r24
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	49 d5       	rcall	.+2706   	; 0x112a <malloc>
     698:	9c 01       	movw	r18, r24
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	9a 81       	ldd	r25, Y+2	; 0x02
     69e:	fc 01       	movw	r30, r24
     6a0:	31 83       	std	Z+1, r19	; 0x01
     6a2:	20 83       	st	Z, r18
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	9a 81       	ldd	r25, Y+2	; 0x02
     6a8:	fc 01       	movw	r30, r24
     6aa:	12 82       	std	Z+2, r1	; 0x02
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	9a 81       	ldd	r25, Y+2	; 0x02
     6b0:	fc 01       	movw	r30, r24
     6b2:	13 82       	std	Z+3, r1	; 0x03
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	9a 81       	ldd	r25, Y+2	; 0x02
     6b8:	fc 01       	movw	r30, r24
     6ba:	14 82       	std	Z+4, r1	; 0x04
     6bc:	89 81       	ldd	r24, Y+1	; 0x01
     6be:	9a 81       	ldd	r25, Y+2	; 0x02
     6c0:	2b 81       	ldd	r18, Y+3	; 0x03
     6c2:	fc 01       	movw	r30, r24
     6c4:	25 83       	std	Z+5, r18	; 0x05
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <arrayShift>:

#ifndef OBSTACLEGENERATOR_H_
#define OBSTACLEGENERATOR_H_

void arrayShift(unsigned char shift)
{
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	00 d0       	rcall	.+0      	; 0x6dc <arrayShift+0x6>
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	8a 83       	std	Y+2, r24	; 0x02
	for (unsigned char i = shift ; i > 0; i--)
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	89 83       	std	Y+1, r24	; 0x01
     6e6:	23 c0       	rjmp	.+70     	; 0x72e <arrayShift+0x58>
	{
		row1[i] = row1[i - 1];
     6e8:	89 81       	ldd	r24, Y+1	; 0x01
     6ea:	88 2f       	mov	r24, r24
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	29 81       	ldd	r18, Y+1	; 0x01
     6f0:	22 2f       	mov	r18, r18
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	21 50       	subi	r18, 0x01	; 1
     6f6:	31 09       	sbc	r19, r1
     6f8:	22 5f       	subi	r18, 0xF2	; 242
     6fa:	3e 4f       	sbci	r19, 0xFE	; 254
     6fc:	f9 01       	movw	r30, r18
     6fe:	20 81       	ld	r18, Z
     700:	82 5f       	subi	r24, 0xF2	; 242
     702:	9e 4f       	sbci	r25, 0xFE	; 254
     704:	fc 01       	movw	r30, r24
     706:	20 83       	st	Z, r18
		row2[i] = row2[i - 1 ];
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	88 2f       	mov	r24, r24
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	29 81       	ldd	r18, Y+1	; 0x01
     710:	22 2f       	mov	r18, r18
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	21 50       	subi	r18, 0x01	; 1
     716:	31 09       	sbc	r19, r1
     718:	21 5e       	subi	r18, 0xE1	; 225
     71a:	3e 4f       	sbci	r19, 0xFE	; 254
     71c:	f9 01       	movw	r30, r18
     71e:	20 81       	ld	r18, Z
     720:	81 5e       	subi	r24, 0xE1	; 225
     722:	9e 4f       	sbci	r25, 0xFE	; 254
     724:	fc 01       	movw	r30, r24
     726:	20 83       	st	Z, r18
#ifndef OBSTACLEGENERATOR_H_
#define OBSTACLEGENERATOR_H_

void arrayShift(unsigned char shift)
{
	for (unsigned char i = shift ; i > 0; i--)
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	81 50       	subi	r24, 0x01	; 1
     72c:	89 83       	std	Y+1, r24	; 0x01
     72e:	89 81       	ldd	r24, Y+1	; 0x01
     730:	88 23       	and	r24, r24
     732:	d1 f6       	brne	.-76     	; 0x6e8 <arrayShift+0x12>
	{
		row1[i] = row1[i - 1];
		row2[i] = row2[i - 1 ];
	}
}
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	08 95       	ret

0000073e <clearArray>:

void clearArray(unsigned char arraySize)
{
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	00 d0       	rcall	.+0      	; 0x744 <clearArray+0x6>
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	8a 83       	std	Y+2, r24	; 0x02
	for (unsigned char i = 0 ; i < arraySize; i++)
     74a:	19 82       	std	Y+1, r1	; 0x01
     74c:	11 c0       	rjmp	.+34     	; 0x770 <clearArray+0x32>
	{
		row1[i] = 0;
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	88 2f       	mov	r24, r24
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	82 5f       	subi	r24, 0xF2	; 242
     756:	9e 4f       	sbci	r25, 0xFE	; 254
     758:	fc 01       	movw	r30, r24
     75a:	10 82       	st	Z, r1
		row2[i] = 0;
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	88 2f       	mov	r24, r24
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	81 5e       	subi	r24, 0xE1	; 225
     764:	9e 4f       	sbci	r25, 0xFE	; 254
     766:	fc 01       	movw	r30, r24
     768:	10 82       	st	Z, r1
	}
}

void clearArray(unsigned char arraySize)
{
	for (unsigned char i = 0 ; i < arraySize; i++)
     76a:	89 81       	ldd	r24, Y+1	; 0x01
     76c:	8f 5f       	subi	r24, 0xFF	; 255
     76e:	89 83       	std	Y+1, r24	; 0x01
     770:	99 81       	ldd	r25, Y+1	; 0x01
     772:	8a 81       	ldd	r24, Y+2	; 0x02
     774:	98 17       	cp	r25, r24
     776:	58 f3       	brcs	.-42     	; 0x74e <clearArray+0x10>
	{
		row1[i] = 0;
		row2[i] = 0;
	}
}
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <ObstacleGeneratorSM_Tick>:

enum ObstacleGeneratorSM {OGSM_start, OGSM_wait, OGSM_generate} ObstacleGeneratorSM;
int ObstacleGeneratorSM_Tick(int state)
{
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	2a 97       	sbiw	r28, 0x0a	; 10
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	9a 83       	std	Y+2, r25	; 0x02
     798:	89 83       	std	Y+1, r24	; 0x01
	switch(state) //state transition
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	81 30       	cpi	r24, 0x01	; 1
     7a0:	91 05       	cpc	r25, r1
     7a2:	51 f0       	breq	.+20     	; 0x7b8 <ObstacleGeneratorSM_Tick+0x36>
     7a4:	82 30       	cpi	r24, 0x02	; 2
     7a6:	91 05       	cpc	r25, r1
     7a8:	c1 f0       	breq	.+48     	; 0x7da <ObstacleGeneratorSM_Tick+0x58>
     7aa:	89 2b       	or	r24, r25
     7ac:	11 f5       	brne	.+68     	; 0x7f2 <ObstacleGeneratorSM_Tick+0x70>
	{
		//keypad_value = GetKeypadKey();
		case OGSM_start: 
			state = OGSM_wait;
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	9a 83       	std	Y+2, r25	; 0x02
     7b4:	89 83       	std	Y+1, r24	; 0x01
		break;
     7b6:	20 c0       	rjmp	.+64     	; 0x7f8 <ObstacleGeneratorSM_Tick+0x76>
		
		case OGSM_wait:
			if ( restart == 1)
     7b8:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <restart>
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	19 f4       	brne	.+6      	; 0x7c6 <ObstacleGeneratorSM_Tick+0x44>
			{
				state = OGSM_start;
     7c0:	1a 82       	std	Y+2, r1	; 0x02
     7c2:	19 82       	std	Y+1, r1	; 0x01
     7c4:	09 c0       	rjmp	.+18     	; 0x7d8 <ObstacleGeneratorSM_Tick+0x56>
			}else if (beginGenerate == 1)
     7c6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <beginGenerate>
     7ca:	81 30       	cpi	r24, 0x01	; 1
     7cc:	29 f4       	brne	.+10     	; 0x7d8 <ObstacleGeneratorSM_Tick+0x56>
			{
				state = OGSM_generate;
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	9a 83       	std	Y+2, r25	; 0x02
     7d4:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     7d6:	10 c0       	rjmp	.+32     	; 0x7f8 <ObstacleGeneratorSM_Tick+0x76>
     7d8:	0f c0       	rjmp	.+30     	; 0x7f8 <ObstacleGeneratorSM_Tick+0x76>
		
		case OGSM_generate:
			if (restart == 1)
     7da:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <restart>
     7de:	81 30       	cpi	r24, 0x01	; 1
     7e0:	19 f4       	brne	.+6      	; 0x7e8 <ObstacleGeneratorSM_Tick+0x66>
			{
				state = OGSM_start;
     7e2:	1a 82       	std	Y+2, r1	; 0x02
     7e4:	19 82       	std	Y+1, r1	; 0x01
			}
			else
			{
				state = OGSM_wait;
			}
		break;
     7e6:	08 c0       	rjmp	.+16     	; 0x7f8 <ObstacleGeneratorSM_Tick+0x76>
			{
				state = OGSM_start;
			}
			else
			{
				state = OGSM_wait;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	9a 83       	std	Y+2, r25	; 0x02
     7ee:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <ObstacleGeneratorSM_Tick+0x76>
		
		default: 
			state = OGSM_start;
     7f2:	1a 82       	std	Y+2, r1	; 0x02
     7f4:	19 82       	std	Y+1, r1	; 0x01
		break;
     7f6:	00 00       	nop
	}
	
	switch(state) //state actions
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	81 30       	cpi	r24, 0x01	; 1
     7fe:	91 05       	cpc	r25, r1
     800:	09 f4       	brne	.+2      	; 0x804 <ObstacleGeneratorSM_Tick+0x82>
     802:	66 c0       	rjmp	.+204    	; 0x8d0 <ObstacleGeneratorSM_Tick+0x14e>
     804:	82 30       	cpi	r24, 0x02	; 2
     806:	91 05       	cpc	r25, r1
     808:	61 f0       	breq	.+24     	; 0x822 <ObstacleGeneratorSM_Tick+0xa0>
     80a:	89 2b       	or	r24, r25
     80c:	09 f0       	breq	.+2      	; 0x810 <ObstacleGeneratorSM_Tick+0x8e>
     80e:	61 c0       	rjmp	.+194    	; 0x8d2 <ObstacleGeneratorSM_Tick+0x150>
	{
		case OGSM_start:
			str_index				= 1;
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <str_index>
			object_generate_prob	= 2;
     816:	82 e0       	ldi	r24, 0x02	; 2
     818:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <object_generate_prob>
			clearArray(17);
     81c:	81 e1       	ldi	r24, 0x11	; 17
     81e:	8f df       	rcall	.-226    	; 0x73e <clearArray>
		break;
     820:	58 c0       	rjmp	.+176    	; 0x8d2 <ObstacleGeneratorSM_Tick+0x150>
			
		break;
		
		case OGSM_generate: 
			//shift data >> 1
			arrayShift(str_index);
     822:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <str_index>
     826:	57 df       	rcall	.-338    	; 0x6d6 <arrayShift>
			//generate an obstacle then push into first index
			if ((rand() % object_generate_prob) == 1)
     828:	f4 d5       	rcall	.+3048   	; 0x1412 <rand>
     82a:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <object_generate_prob>
     82e:	22 2f       	mov	r18, r18
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	b9 01       	movw	r22, r18
     834:	31 d4       	rcall	.+2146   	; 0x1098 <__divmodhi4>
     836:	01 97       	sbiw	r24, 0x01	; 1
     838:	21 f4       	brne	.+8      	; 0x842 <ObstacleGeneratorSM_Tick+0xc0>
			{
				row1[0] = '#';
     83a:	83 e2       	ldi	r24, 0x23	; 35
     83c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <row1>
     840:	10 c0       	rjmp	.+32     	; 0x862 <ObstacleGeneratorSM_Tick+0xe0>
			}
			else if ((rand() % object_generate_prob) == 1)
     842:	e7 d5       	rcall	.+3022   	; 0x1412 <rand>
     844:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <object_generate_prob>
     848:	22 2f       	mov	r18, r18
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	b9 01       	movw	r22, r18
     84e:	24 d4       	rcall	.+2120   	; 0x1098 <__divmodhi4>
     850:	01 97       	sbiw	r24, 0x01	; 1
     852:	21 f4       	brne	.+8      	; 0x85c <ObstacleGeneratorSM_Tick+0xda>
			{
				row1[0] = '*';
     854:	8a e2       	ldi	r24, 0x2A	; 42
     856:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <row1>
     85a:	03 c0       	rjmp	.+6      	; 0x862 <ObstacleGeneratorSM_Tick+0xe0>
			}
			else
				row1[0] = ' ';
     85c:	80 e2       	ldi	r24, 0x20	; 32
     85e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <row1>
					
			if ((rand() % object_generate_prob) == 1)
     862:	d7 d5       	rcall	.+2990   	; 0x1412 <rand>
     864:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <object_generate_prob>
     868:	22 2f       	mov	r18, r18
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	b9 01       	movw	r22, r18
     86e:	14 d4       	rcall	.+2088   	; 0x1098 <__divmodhi4>
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	21 f4       	brne	.+8      	; 0x87c <ObstacleGeneratorSM_Tick+0xfa>
			{
				row2[0] = '#';
     874:	83 e2       	ldi	r24, 0x23	; 35
     876:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <row2>
     87a:	10 c0       	rjmp	.+32     	; 0x89c <ObstacleGeneratorSM_Tick+0x11a>
			}
			else if ((rand() % object_generate_prob) == 1)
     87c:	ca d5       	rcall	.+2964   	; 0x1412 <rand>
     87e:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <object_generate_prob>
     882:	22 2f       	mov	r18, r18
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	b9 01       	movw	r22, r18
     888:	07 d4       	rcall	.+2062   	; 0x1098 <__divmodhi4>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	21 f4       	brne	.+8      	; 0x896 <ObstacleGeneratorSM_Tick+0x114>
			{
				row2[0] = '*';
     88e:	8a e2       	ldi	r24, 0x2A	; 42
     890:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <row2>
     894:	03 c0       	rjmp	.+6      	; 0x89c <ObstacleGeneratorSM_Tick+0x11a>
			}
			else
				row2[0] = ' ';
     896:	80 e2       	ldi	r24, 0x20	; 32
     898:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <row2>
			
			//set the last bit to '\0' to complete string
			if ((row1[16] != '\0' || row2[16] != '\0') && str_index >= 16)
     89c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <row1+0x10>
     8a0:	88 23       	and	r24, r24
     8a2:	21 f4       	brne	.+8      	; 0x8ac <ObstacleGeneratorSM_Tick+0x12a>
     8a4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <row2+0x10>
     8a8:	88 23       	and	r24, r24
     8aa:	61 f0       	breq	.+24     	; 0x8c4 <ObstacleGeneratorSM_Tick+0x142>
     8ac:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <str_index>
     8b0:	80 31       	cpi	r24, 0x10	; 16
     8b2:	40 f0       	brcs	.+16     	; 0x8c4 <ObstacleGeneratorSM_Tick+0x142>
			{
				row1[16] = '\0'; row2[16] = '\0';
     8b4:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <row1+0x10>
     8b8:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <row2+0x10>
				str_index = 16;
     8bc:	80 e1       	ldi	r24, 0x10	; 16
     8be:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <str_index>
			}else str_index++;
		break;
     8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <ObstacleGeneratorSM_Tick+0x150>
			//set the last bit to '\0' to complete string
			if ((row1[16] != '\0' || row2[16] != '\0') && str_index >= 16)
			{
				row1[16] = '\0'; row2[16] = '\0';
				str_index = 16;
			}else str_index++;
     8c4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <str_index>
     8c8:	8f 5f       	subi	r24, 0xFF	; 255
     8ca:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <str_index>
		break;
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <ObstacleGeneratorSM_Tick+0x150>
			clearArray(17);
		break;
		
		case OGSM_wait:
			
		break;
     8d0:	00 00       	nop
				str_index = 16;
			}else str_index++;
		break;
	}
	
	return state;
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	9a 81       	ldd	r25, Y+2	; 0x02
}
     8d6:	2a 96       	adiw	r28, 0x0a	; 10
     8d8:	0f b6       	in	r0, 0x3f	; 63
     8da:	f8 94       	cli
     8dc:	de bf       	out	0x3e, r29	; 62
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	cd bf       	out	0x3d, r28	; 61
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	08 95       	ret

000008e8 <DisplaySM_Tick>:
unsigned char deathAni;
unsigned char debounce2 = 50;
//display global variables
enum displaySM{display_start,display_wait, display_scroll, display_deathAnimation_X, display_dead} displaySM;
int DisplaySM_Tick(int state)
{
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	00 d0       	rcall	.+0      	; 0x8ee <DisplaySM_Tick+0x6>
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	9a 83       	std	Y+2, r25	; 0x02
     8f4:	89 83       	std	Y+1, r24	; 0x01
	switch(state) //state transition
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	9a 81       	ldd	r25, Y+2	; 0x02
     8fa:	82 30       	cpi	r24, 0x02	; 2
     8fc:	91 05       	cpc	r25, r1
     8fe:	e9 f0       	breq	.+58     	; 0x93a <DisplaySM_Tick+0x52>
     900:	83 30       	cpi	r24, 0x03	; 3
     902:	91 05       	cpc	r25, r1
     904:	2c f4       	brge	.+10     	; 0x910 <DisplaySM_Tick+0x28>
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	49 f0       	breq	.+18     	; 0x91c <DisplaySM_Tick+0x34>
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	61 f0       	breq	.+24     	; 0x926 <DisplaySM_Tick+0x3e>
     90e:	48 c0       	rjmp	.+144    	; 0x9a0 <DisplaySM_Tick+0xb8>
     910:	83 30       	cpi	r24, 0x03	; 3
     912:	91 05       	cpc	r25, r1
     914:	51 f1       	breq	.+84     	; 0x96a <DisplaySM_Tick+0x82>
     916:	04 97       	sbiw	r24, 0x04	; 4
     918:	d9 f1       	breq	.+118    	; 0x990 <DisplaySM_Tick+0xa8>
     91a:	42 c0       	rjmp	.+132    	; 0x9a0 <DisplaySM_Tick+0xb8>
	{

		case display_start:
				state =  display_wait;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	9a 83       	std	Y+2, r25	; 0x02
     922:	89 83       	std	Y+1, r24	; 0x01
		break;
     924:	40 c0       	rjmp	.+128    	; 0x9a6 <DisplaySM_Tick+0xbe>
		
		case display_wait:
			if (keypad_value == '1')
     926:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <keypad_value>
     92a:	81 33       	cpi	r24, 0x31	; 49
     92c:	29 f4       	brne	.+10     	; 0x938 <DisplaySM_Tick+0x50>
			{
				state = display_scroll;
     92e:	82 e0       	ldi	r24, 0x02	; 2
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	9a 83       	std	Y+2, r25	; 0x02
     934:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     936:	37 c0       	rjmp	.+110    	; 0x9a6 <DisplaySM_Tick+0xbe>
     938:	36 c0       	rjmp	.+108    	; 0x9a6 <DisplaySM_Tick+0xbe>
		
		case display_scroll:
			if (restart == 1)
     93a:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <restart>
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	29 f4       	brne	.+10     	; 0x94c <DisplaySM_Tick+0x64>
			{
				state = display_deathAnimation_X;
     942:	83 e0       	ldi	r24, 0x03	; 3
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	9a 83       	std	Y+2, r25	; 0x02
     948:	89 83       	std	Y+1, r24	; 0x01
     94a:	0e c0       	rjmp	.+28     	; 0x968 <DisplaySM_Tick+0x80>
			}
			else if (isHit == 0)
     94c:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <isHit>
     950:	88 23       	and	r24, r24
     952:	29 f4       	brne	.+10     	; 0x95e <DisplaySM_Tick+0x76>
			{
				state = display_scroll;
     954:	82 e0       	ldi	r24, 0x02	; 2
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	9a 83       	std	Y+2, r25	; 0x02
     95a:	89 83       	std	Y+1, r24	; 0x01
     95c:	05 c0       	rjmp	.+10     	; 0x968 <DisplaySM_Tick+0x80>
			}
			else 
				state = display_deathAnimation_X;
     95e:	83 e0       	ldi	r24, 0x03	; 3
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	9a 83       	std	Y+2, r25	; 0x02
     964:	89 83       	std	Y+1, r24	; 0x01
		break;
     966:	1f c0       	rjmp	.+62     	; 0x9a6 <DisplaySM_Tick+0xbe>
     968:	1e c0       	rjmp	.+60     	; 0x9a6 <DisplaySM_Tick+0xbe>
		
		case display_deathAnimation_X:
			if (deathAni < 5)
     96a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <deathAni>
     96e:	85 30       	cpi	r24, 0x05	; 5
     970:	50 f4       	brcc	.+20     	; 0x986 <DisplaySM_Tick+0x9e>
			{
				state = display_deathAnimation_X;
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	9a 83       	std	Y+2, r25	; 0x02
     978:	89 83       	std	Y+1, r24	; 0x01
				deathAni++;
     97a:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <deathAni>
     97e:	8f 5f       	subi	r24, 0xFF	; 255
     980:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <deathAni>
			}else
				state = display_dead;
		break;
     984:	10 c0       	rjmp	.+32     	; 0x9a6 <DisplaySM_Tick+0xbe>
			if (deathAni < 5)
			{
				state = display_deathAnimation_X;
				deathAni++;
			}else
				state = display_dead;
     986:	84 e0       	ldi	r24, 0x04	; 4
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	9a 83       	std	Y+2, r25	; 0x02
     98c:	89 83       	std	Y+1, r24	; 0x01
		break;
     98e:	0b c0       	rjmp	.+22     	; 0x9a6 <DisplaySM_Tick+0xbe>
		
		case display_dead:
			if (keypad_value == '1')
     990:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <keypad_value>
     994:	81 33       	cpi	r24, 0x31	; 49
     996:	19 f4       	brne	.+6      	; 0x99e <DisplaySM_Tick+0xb6>
			{
				state = display_start;
     998:	1a 82       	std	Y+2, r1	; 0x02
     99a:	19 82       	std	Y+1, r1	; 0x01
				
			}
		break;
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <DisplaySM_Tick+0xbe>
     99e:	03 c0       	rjmp	.+6      	; 0x9a6 <DisplaySM_Tick+0xbe>
		
		default:
			state = display_start;
     9a0:	1a 82       	std	Y+2, r1	; 0x02
     9a2:	19 82       	std	Y+1, r1	; 0x01
		break;
     9a4:	00 00       	nop
	}
	
	
	switch(state) //state action
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	9a 81       	ldd	r25, Y+2	; 0x02
     9aa:	82 30       	cpi	r24, 0x02	; 2
     9ac:	91 05       	cpc	r25, r1
     9ae:	09 f1       	breq	.+66     	; 0x9f2 <DisplaySM_Tick+0x10a>
     9b0:	83 30       	cpi	r24, 0x03	; 3
     9b2:	91 05       	cpc	r25, r1
     9b4:	2c f4       	brge	.+10     	; 0x9c0 <DisplaySM_Tick+0xd8>
     9b6:	00 97       	sbiw	r24, 0x00	; 0
     9b8:	51 f0       	breq	.+20     	; 0x9ce <DisplaySM_Tick+0xe6>
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	a1 f0       	breq	.+40     	; 0x9e6 <DisplaySM_Tick+0xfe>
			LCD_DisplayString(1, " YOU ARE DEAD:( ");
			restart = 1;
			//clearArray(16);
		break;
		
		default: break;
     9be:	50 c0       	rjmp	.+160    	; 0xa60 <DisplaySM_Tick+0x178>
			state = display_start;
		break;
	}
	
	
	switch(state) //state action
     9c0:	83 30       	cpi	r24, 0x03	; 3
     9c2:	91 05       	cpc	r25, r1
     9c4:	49 f1       	breq	.+82     	; 0xa18 <DisplaySM_Tick+0x130>
     9c6:	04 97       	sbiw	r24, 0x04	; 4
     9c8:	09 f4       	brne	.+2      	; 0x9cc <DisplaySM_Tick+0xe4>
     9ca:	3f c0       	rjmp	.+126    	; 0xa4a <DisplaySM_Tick+0x162>
			LCD_DisplayString(1, " YOU ARE DEAD:( ");
			restart = 1;
			//clearArray(16);
		break;
		
		default: break;
     9cc:	49 c0       	rjmp	.+146    	; 0xa60 <DisplaySM_Tick+0x178>
	
	
	switch(state) //state action
	{
		case display_start:
			isHit			= 0;
     9ce:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <isHit>
			playerPosition	= 16;
     9d2:	80 e1       	ldi	r24, 0x10	; 16
     9d4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <playerPosition>
			task3.state		= 0;//Task initial state.
     9d8:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <task3>
			restart			= 0;
     9dc:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <restart>
			keypad_value	= 0;
     9e0:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <keypad_value>
		break;
     9e4:	3d c0       	rjmp	.+122    	; 0xa60 <DisplaySM_Tick+0x178>
		
		case display_wait:
			LCD_ClearScreen();
     9e6:	71 db       	rcall	.-2334   	; 0xca <LCD_ClearScreen>
			LCD_DisplayString(1, "   LCD_RACER!   ");
     9e8:	6c e3       	ldi	r22, 0x3C	; 60
     9ea:	71 e0       	ldi	r23, 0x01	; 1
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	e7 db       	rcall	.-2098   	; 0x1be <LCD_DisplayString>
		break;
     9f0:	37 c0       	rjmp	.+110    	; 0xa60 <DisplaySM_Tick+0x178>
		
		case display_scroll:
			beginGenerate = 1;
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <beginGenerate>
			LCD_ClearScreen();
     9f8:	68 db       	rcall	.-2352   	; 0xca <LCD_ClearScreen>
			LCD_DisplayString(1, row1);
     9fa:	6e e0       	ldi	r22, 0x0E	; 14
     9fc:	71 e0       	ldi	r23, 0x01	; 1
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	de db       	rcall	.-2116   	; 0x1be <LCD_DisplayString>
			LCD_DisplayString(17, row2);
     a02:	6f e1       	ldi	r22, 0x1F	; 31
     a04:	71 e0       	ldi	r23, 0x01	; 1
     a06:	81 e1       	ldi	r24, 0x11	; 17
     a08:	da db       	rcall	.-2124   	; 0x1be <LCD_DisplayString>
			LCD_Cursor(playerPosition);
     a0a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <playerPosition>
     a0e:	ff db       	rcall	.-2050   	; 0x20e <LCD_Cursor>
			//LCD_WriteData(x);
			LCD_WriteData(playerIcon);
     a10:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <playerIcon>
     a14:	a6 db       	rcall	.-2228   	; 0x162 <LCD_WriteData>
		break;
     a16:	24 c0       	rjmp	.+72     	; 0xa60 <DisplaySM_Tick+0x178>
		
		case display_deathAnimation_X:
			//task1.state = 0;//Task initial state.
			beginGenerate = 0;
     a18:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <beginGenerate>
			LCD_ClearScreen();
     a1c:	56 db       	rcall	.-2388   	; 0xca <LCD_ClearScreen>
			LCD_DisplayString(1, row1);
     a1e:	6e e0       	ldi	r22, 0x0E	; 14
     a20:	71 e0       	ldi	r23, 0x01	; 1
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	cc db       	rcall	.-2152   	; 0x1be <LCD_DisplayString>
			LCD_DisplayString(17, row2);
     a26:	6f e1       	ldi	r22, 0x1F	; 31
     a28:	71 e0       	ldi	r23, 0x01	; 1
     a2a:	81 e1       	ldi	r24, 0x11	; 17
     a2c:	c8 db       	rcall	.-2160   	; 0x1be <LCD_DisplayString>
			LCD_Cursor(playerPosition);
     a2e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <playerPosition>
     a32:	ed db       	rcall	.-2086   	; 0x20e <LCD_Cursor>
			if ((deathAni % 2) == 0)
     a34:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <deathAni>
     a38:	81 70       	andi	r24, 0x01	; 1
     a3a:	88 23       	and	r24, r24
     a3c:	19 f4       	brne	.+6      	; 0xa44 <DisplaySM_Tick+0x15c>
			{
				LCD_WriteData('X');
     a3e:	88 e5       	ldi	r24, 0x58	; 88
     a40:	90 db       	rcall	.-2272   	; 0x162 <LCD_WriteData>
			else
			{
				LCD_WriteData(0xDB);
			}
			
		break;
     a42:	0e c0       	rjmp	.+28     	; 0xa60 <DisplaySM_Tick+0x178>
			{
				LCD_WriteData('X');
			} 
			else
			{
				LCD_WriteData(0xDB);
     a44:	8b ed       	ldi	r24, 0xDB	; 219
     a46:	8d db       	rcall	.-2278   	; 0x162 <LCD_WriteData>
			}
			
		break;
     a48:	0b c0       	rjmp	.+22     	; 0xa60 <DisplaySM_Tick+0x178>
		
		case display_dead:
			deathAni = 0;
     a4a:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <deathAni>
			LCD_ClearScreen();
     a4e:	3d db       	rcall	.-2438   	; 0xca <LCD_ClearScreen>
			LCD_DisplayString(1, " YOU ARE DEAD:( ");
     a50:	6d e4       	ldi	r22, 0x4D	; 77
     a52:	71 e0       	ldi	r23, 0x01	; 1
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	b3 db       	rcall	.-2202   	; 0x1be <LCD_DisplayString>
			restart = 1;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <restart>
			//clearArray(16);
		break;
     a5e:	00 00       	nop
		
		default: break;
	}
	
	return state;
     a60:	89 81       	ldd	r24, Y+1	; 0x01
     a62:	9a 81       	ldd	r25, Y+2	; 0x02
	
}
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	08 95       	ret

00000a6e <Movement_Tick>:
enum MovementSM {M_start, M_wait, M_move, M_moveRelease} MovementSM;

unsigned char debounce	= 0;
	
int Movement_Tick(int state)
{
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	00 d0       	rcall	.+0      	; 0xa74 <Movement_Tick+0x6>
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
     a78:	9a 83       	std	Y+2, r25	; 0x02
     a7a:	89 83       	std	Y+1, r24	; 0x01
	keypad_value = GetKeypadKey();
     a7c:	3d dd       	rcall	.-1414   	; 0x4f8 <GetKeypadKey>
     a7e:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <keypad_value>
	switch(state)
     a82:	89 81       	ldd	r24, Y+1	; 0x01
     a84:	9a 81       	ldd	r25, Y+2	; 0x02
     a86:	81 30       	cpi	r24, 0x01	; 1
     a88:	91 05       	cpc	r25, r1
     a8a:	89 f0       	breq	.+34     	; 0xaae <Movement_Tick+0x40>
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	91 05       	cpc	r25, r1
     a90:	1c f4       	brge	.+6      	; 0xa98 <Movement_Tick+0x2a>
     a92:	89 2b       	or	r24, r25
     a94:	39 f0       	breq	.+14     	; 0xaa4 <Movement_Tick+0x36>
     a96:	24 c0       	rjmp	.+72     	; 0xae0 <Movement_Tick+0x72>
     a98:	82 30       	cpi	r24, 0x02	; 2
     a9a:	91 05       	cpc	r25, r1
     a9c:	91 f0       	breq	.+36     	; 0xac2 <Movement_Tick+0x54>
     a9e:	03 97       	sbiw	r24, 0x03	; 3
     aa0:	a9 f0       	breq	.+42     	; 0xacc <Movement_Tick+0x5e>
     aa2:	1e c0       	rjmp	.+60     	; 0xae0 <Movement_Tick+0x72>
	{
		case M_start:
			state			= M_wait;
     aa4:	81 e0       	ldi	r24, 0x01	; 1
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	9a 83       	std	Y+2, r25	; 0x02
     aaa:	89 83       	std	Y+1, r24	; 0x01
		break;
     aac:	1c c0       	rjmp	.+56     	; 0xae6 <Movement_Tick+0x78>
		
		case M_wait:
			 if (keypad_value != '\0')
     aae:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <keypad_value>
     ab2:	88 23       	and	r24, r24
     ab4:	29 f0       	breq	.+10     	; 0xac0 <Movement_Tick+0x52>
			{
				state = M_move;
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	9a 83       	std	Y+2, r25	; 0x02
     abc:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     abe:	13 c0       	rjmp	.+38     	; 0xae6 <Movement_Tick+0x78>
     ac0:	12 c0       	rjmp	.+36     	; 0xae6 <Movement_Tick+0x78>
		
		case M_move:
			state = M_moveRelease;
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
		break;
     aca:	0d c0       	rjmp	.+26     	; 0xae6 <Movement_Tick+0x78>
		
		case M_moveRelease:
			if (keypad_value == '\0')
     acc:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <keypad_value>
     ad0:	88 23       	and	r24, r24
     ad2:	29 f4       	brne	.+10     	; 0xade <Movement_Tick+0x70>
			{
				state = M_wait;
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	9a 83       	std	Y+2, r25	; 0x02
     ada:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <Movement_Tick+0x78>
     ade:	03 c0       	rjmp	.+6      	; 0xae6 <Movement_Tick+0x78>
		
		default: 
			state = M_start;
     ae0:	1a 82       	std	Y+2, r1	; 0x02
     ae2:	19 82       	std	Y+1, r1	; 0x01
		break;
     ae4:	00 00       	nop
	}
	
	switch(state)
     ae6:	89 81       	ldd	r24, Y+1	; 0x01
     ae8:	9a 81       	ldd	r25, Y+2	; 0x02
     aea:	81 30       	cpi	r24, 0x01	; 1
     aec:	91 05       	cpc	r25, r1
     aee:	a9 f1       	breq	.+106    	; 0xb5a <Movement_Tick+0xec>
     af0:	82 30       	cpi	r24, 0x02	; 2
     af2:	91 05       	cpc	r25, r1
     af4:	1c f4       	brge	.+6      	; 0xafc <Movement_Tick+0x8e>
     af6:	89 2b       	or	r24, r25
     af8:	91 f1       	breq	.+100    	; 0xb5e <Movement_Tick+0xf0>
		
		case M_moveRelease: 
			//keypad_value = 0;
		break;
		
		default: break;
     afa:	34 c0       	rjmp	.+104    	; 0xb64 <Movement_Tick+0xf6>
		default: 
			state = M_start;
		break;
	}
	
	switch(state)
     afc:	82 30       	cpi	r24, 0x02	; 2
     afe:	91 05       	cpc	r25, r1
     b00:	19 f0       	breq	.+6      	; 0xb08 <Movement_Tick+0x9a>
     b02:	03 97       	sbiw	r24, 0x03	; 3
     b04:	71 f1       	breq	.+92     	; 0xb62 <Movement_Tick+0xf4>
		
		case M_moveRelease: 
			//keypad_value = 0;
		break;
		
		default: break;
     b06:	2e c0       	rjmp	.+92     	; 0xb64 <Movement_Tick+0xf6>
		break;
		
		case M_wait: break;
		
		case M_move:
			if (playerPosition == 16 && keypad_value == 'C')
     b08:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <playerPosition>
     b0c:	80 31       	cpi	r24, 0x10	; 16
     b0e:	39 f4       	brne	.+14     	; 0xb1e <Movement_Tick+0xb0>
     b10:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <keypad_value>
     b14:	83 34       	cpi	r24, 0x43	; 67
     b16:	19 f4       	brne	.+6      	; 0xb1e <Movement_Tick+0xb0>
			{
				playerPosition = 32;
     b18:	80 e2       	ldi	r24, 0x20	; 32
     b1a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <playerPosition>
			} 
			if (playerPosition == 32 && keypad_value == 'B')
     b1e:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <playerPosition>
     b22:	80 32       	cpi	r24, 0x20	; 32
     b24:	39 f4       	brne	.+14     	; 0xb34 <Movement_Tick+0xc6>
     b26:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <keypad_value>
     b2a:	82 34       	cpi	r24, 0x42	; 66
     b2c:	19 f4       	brne	.+6      	; 0xb34 <Movement_Tick+0xc6>
			{
				playerPosition = 16;
     b2e:	80 e1       	ldi	r24, 0x10	; 16
     b30:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <playerPosition>
			}
			
			if (keypad_value == '1' && debounce > 5)
     b34:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <keypad_value>
     b38:	81 33       	cpi	r24, 0x31	; 49
     b3a:	49 f4       	brne	.+18     	; 0xb4e <Movement_Tick+0xe0>
     b3c:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <debounce>
     b40:	86 30       	cpi	r24, 0x06	; 6
     b42:	28 f0       	brcs	.+10     	; 0xb4e <Movement_Tick+0xe0>
			{
				restart = 1;
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <restart>
				debounce = 0;
     b4a:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <debounce>
				//keypad_value = 0;
			}
			
			debounce++;
     b4e:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <debounce>
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <debounce>
		break;
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <Movement_Tick+0xf6>
	switch(state)
	{
		case M_start: 
		break;
		
		case M_wait: break;
     b5a:	00 00       	nop
     b5c:	03 c0       	rjmp	.+6      	; 0xb64 <Movement_Tick+0xf6>
	}
	
	switch(state)
	{
		case M_start: 
		break;
     b5e:	00 00       	nop
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <Movement_Tick+0xf6>
			debounce++;
		break;
		
		case M_moveRelease: 
			//keypad_value = 0;
		break;
     b62:	00 00       	nop
		
		default: break;
	}
	return state;
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	08 95       	ret

00000b72 <destroyObj>:

#ifndef COLLISIONDETECTION_H_
#define COLLISIONDETECTION_H_

void destroyObj()
{
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	00 d0       	rcall	.+0      	; 0xb78 <destroyObj+0x6>
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
	for (unsigned i = 0; i < 15; i++)
     b7c:	1a 82       	std	Y+2, r1	; 0x02
     b7e:	19 82       	std	Y+1, r1	; 0x01
     b80:	4c c0       	rjmp	.+152    	; 0xc1a <destroyObj+0xa8>
	{
		if (playerPosition == 16 )
     b82:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <playerPosition>
     b86:	80 31       	cpi	r24, 0x10	; 16
     b88:	01 f5       	brne	.+64     	; 0xbca <destroyObj+0x58>
		{
			if (bulletRow[i] == '-' && (row1[i] == '*' || row1[i] == '#' ))
     b8a:	89 81       	ldd	r24, Y+1	; 0x01
     b8c:	9a 81       	ldd	r25, Y+2	; 0x02
     b8e:	8b 56       	subi	r24, 0x6B	; 107
     b90:	9e 4f       	sbci	r25, 0xFE	; 254
     b92:	fc 01       	movw	r30, r24
     b94:	80 81       	ld	r24, Z
     b96:	8d 32       	cpi	r24, 0x2D	; 45
     b98:	d9 f5       	brne	.+118    	; 0xc10 <destroyObj+0x9e>
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	9a 81       	ldd	r25, Y+2	; 0x02
     b9e:	82 5f       	subi	r24, 0xF2	; 242
     ba0:	9e 4f       	sbci	r25, 0xFE	; 254
     ba2:	fc 01       	movw	r30, r24
     ba4:	80 81       	ld	r24, Z
     ba6:	8a 32       	cpi	r24, 0x2A	; 42
     ba8:	41 f0       	breq	.+16     	; 0xbba <destroyObj+0x48>
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	9a 81       	ldd	r25, Y+2	; 0x02
     bae:	82 5f       	subi	r24, 0xF2	; 242
     bb0:	9e 4f       	sbci	r25, 0xFE	; 254
     bb2:	fc 01       	movw	r30, r24
     bb4:	80 81       	ld	r24, Z
     bb6:	83 32       	cpi	r24, 0x23	; 35
     bb8:	59 f5       	brne	.+86     	; 0xc10 <destroyObj+0x9e>
			{
				row1[i] = ' ';
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	82 5f       	subi	r24, 0xF2	; 242
     bc0:	9e 4f       	sbci	r25, 0xFE	; 254
     bc2:	20 e2       	ldi	r18, 0x20	; 32
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 83       	st	Z, r18
     bc8:	23 c0       	rjmp	.+70     	; 0xc10 <destroyObj+0x9e>
			}
		}else if (playerPosition == 32)
     bca:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <playerPosition>
     bce:	80 32       	cpi	r24, 0x20	; 32
     bd0:	f9 f4       	brne	.+62     	; 0xc10 <destroyObj+0x9e>
		{
			if (bulletRow[i] == '-' && (row2[i] == '*' || row2[i] == '#' ))
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	9a 81       	ldd	r25, Y+2	; 0x02
     bd6:	8b 56       	subi	r24, 0x6B	; 107
     bd8:	9e 4f       	sbci	r25, 0xFE	; 254
     bda:	fc 01       	movw	r30, r24
     bdc:	80 81       	ld	r24, Z
     bde:	8d 32       	cpi	r24, 0x2D	; 45
     be0:	b9 f4       	brne	.+46     	; 0xc10 <destroyObj+0x9e>
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	9a 81       	ldd	r25, Y+2	; 0x02
     be6:	81 5e       	subi	r24, 0xE1	; 225
     be8:	9e 4f       	sbci	r25, 0xFE	; 254
     bea:	fc 01       	movw	r30, r24
     bec:	80 81       	ld	r24, Z
     bee:	8a 32       	cpi	r24, 0x2A	; 42
     bf0:	41 f0       	breq	.+16     	; 0xc02 <destroyObj+0x90>
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	9a 81       	ldd	r25, Y+2	; 0x02
     bf6:	81 5e       	subi	r24, 0xE1	; 225
     bf8:	9e 4f       	sbci	r25, 0xFE	; 254
     bfa:	fc 01       	movw	r30, r24
     bfc:	80 81       	ld	r24, Z
     bfe:	83 32       	cpi	r24, 0x23	; 35
     c00:	39 f4       	brne	.+14     	; 0xc10 <destroyObj+0x9e>
			{
				row2[i] = ' ';
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	81 5e       	subi	r24, 0xE1	; 225
     c08:	9e 4f       	sbci	r25, 0xFE	; 254
     c0a:	20 e2       	ldi	r18, 0x20	; 32
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 83       	st	Z, r18
#ifndef COLLISIONDETECTION_H_
#define COLLISIONDETECTION_H_

void destroyObj()
{
	for (unsigned i = 0; i < 15; i++)
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	9a 81       	ldd	r25, Y+2	; 0x02
     c14:	01 96       	adiw	r24, 0x01	; 1
     c16:	9a 83       	std	Y+2, r25	; 0x02
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	9a 81       	ldd	r25, Y+2	; 0x02
     c1e:	0f 97       	sbiw	r24, 0x0f	; 15
     c20:	08 f4       	brcc	.+2      	; 0xc24 <destroyObj+0xb2>
     c22:	af cf       	rjmp	.-162    	; 0xb82 <destroyObj+0x10>
			{
				row2[i] = ' ';
			}
		}
	}
}
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <Collision_Tick>:

enum CollisionSM {C_start, C_detect} CollisionSM;

int Collision_Tick(int state) 
{
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	00 d0       	rcall	.+0      	; 0xc34 <Collision_Tick+0x6>
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	19 f0       	breq	.+6      	; 0xc4a <Collision_Tick+0x1c>
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	31 f0       	breq	.+12     	; 0xc54 <Collision_Tick+0x26>
     c48:	0a c0       	rjmp	.+20     	; 0xc5e <Collision_Tick+0x30>
	{
		case C_start:
			state = C_detect;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	89 83       	std	Y+1, r24	; 0x01
		break;
     c52:	08 c0       	rjmp	.+16     	; 0xc64 <Collision_Tick+0x36>
		
		case C_detect:
			state = C_detect;
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	9a 83       	std	Y+2, r25	; 0x02
     c5a:	89 83       	std	Y+1, r24	; 0x01
		break;
     c5c:	03 c0       	rjmp	.+6      	; 0xc64 <Collision_Tick+0x36>
		
		default: 
			state = C_start;
     c5e:	1a 82       	std	Y+2, r1	; 0x02
     c60:	19 82       	std	Y+1, r1	; 0x01
		break;
     c62:	00 00       	nop
		
	}
	
	switch(state)
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	9a 81       	ldd	r25, Y+2	; 0x02
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	19 f0       	breq	.+6      	; 0xc72 <Collision_Tick+0x44>
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	21 f0       	breq	.+8      	; 0xc78 <Collision_Tick+0x4a>
				isHit	= 1;
			}

			break;	
			
		default:break;
     c70:	25 c0       	rjmp	.+74     	; 0xcbc <Collision_Tick+0x8e>
	}
	
	switch(state)
	{
		case C_start:
			isHit = 0;
     c72:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <isHit>
		break;
     c76:	22 c0       	rjmp	.+68     	; 0xcbc <Collision_Tick+0x8e>
			
		case C_detect:
			
			destroyObj();
     c78:	7c df       	rcall	.-264    	; 0xb72 <destroyObj>
			
			if (playerPosition == 16 && (row1[15] != 32 && row1[15] != 0))
     c7a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <playerPosition>
     c7e:	80 31       	cpi	r24, 0x10	; 16
     c80:	61 f4       	brne	.+24     	; 0xc9a <Collision_Tick+0x6c>
     c82:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <row1+0xf>
     c86:	80 32       	cpi	r24, 0x20	; 32
     c88:	41 f0       	breq	.+16     	; 0xc9a <Collision_Tick+0x6c>
     c8a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <row1+0xf>
     c8e:	88 23       	and	r24, r24
     c90:	21 f0       	breq	.+8      	; 0xc9a <Collision_Tick+0x6c>
			{
				isHit	= 1;
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <isHit>
     c98:	10 c0       	rjmp	.+32     	; 0xcba <Collision_Tick+0x8c>
			} 
			else if (playerPosition == 32 && (row2[15] != 32 && row2[15] != 0))
     c9a:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <playerPosition>
     c9e:	80 32       	cpi	r24, 0x20	; 32
     ca0:	61 f4       	brne	.+24     	; 0xcba <Collision_Tick+0x8c>
     ca2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <row2+0xf>
     ca6:	80 32       	cpi	r24, 0x20	; 32
     ca8:	41 f0       	breq	.+16     	; 0xcba <Collision_Tick+0x8c>
     caa:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <row2+0xf>
     cae:	88 23       	and	r24, r24
     cb0:	21 f0       	breq	.+8      	; 0xcba <Collision_Tick+0x8c>
			{
				isHit	= 1;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <isHit>
			}

			break;	
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <Collision_Tick+0x8c>
     cba:	00 00       	nop
			
		default:break;
	}
	
	return state;
     cbc:	89 81       	ldd	r24, Y+1	; 0x01
     cbe:	9a 81       	ldd	r25, Y+2	; 0x02
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	df 91       	pop	r29
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <main>:
#include "Display.h"
#include "Movement.h"
#include "CollisionDetection.h"

int main(void)
{
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	ec 97       	sbiw	r28, 0x3c	; 60
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
     ce2:	84 e2       	ldi	r24, 0x24	; 36
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	2f ef       	ldi	r18, 0xFF	; 255
     ce8:	fc 01       	movw	r30, r24
     cea:	20 83       	st	Z, r18
     cec:	85 e2       	ldi	r24, 0x25	; 37
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	fc 01       	movw	r30, r24
     cf2:	10 82       	st	Z, r1
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
     cf4:	87 e2       	ldi	r24, 0x27	; 39
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	20 ef       	ldi	r18, 0xF0	; 240
     cfa:	fc 01       	movw	r30, r24
     cfc:	20 83       	st	Z, r18
     cfe:	88 e2       	ldi	r24, 0x28	; 40
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	2f e0       	ldi	r18, 0x0F	; 15
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18
	DDRD = 0xFF; PORTD = 0x00;
     d08:	8a e2       	ldi	r24, 0x2A	; 42
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	2f ef       	ldi	r18, 0xFF	; 255
     d0e:	fc 01       	movw	r30, r24
     d10:	20 83       	st	Z, r18
     d12:	8b e2       	ldi	r24, 0x2B	; 43
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	fc 01       	movw	r30, r24
     d18:	10 82       	st	Z, r1
	
	bulletQ = QueueInit(1);
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	ad dc       	rcall	.-1702   	; 0x678 <QueueInit>
     d1e:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <bulletQ+0x1>
     d22:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <bulletQ>

	/**Set individual task period********************************/
	unsigned long int ObstacleGenerator_calc	= 500;
     d26:	84 ef       	ldi	r24, 0xF4	; 244
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	a0 e0       	ldi	r26, 0x00	; 0
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	8b 83       	std	Y+3, r24	; 0x03
     d30:	9c 83       	std	Y+4, r25	; 0x04
     d32:	ad 83       	std	Y+5, r26	; 0x05
     d34:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int Display_calc				= 500;
     d36:	84 ef       	ldi	r24, 0xF4	; 244
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	a0 e0       	ldi	r26, 0x00	; 0
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	8f 83       	std	Y+7, r24	; 0x07
     d40:	98 87       	std	Y+8, r25	; 0x08
     d42:	a9 87       	std	Y+9, r26	; 0x09
     d44:	ba 87       	std	Y+10, r27	; 0x0a
// 	unsigned long int Movement_calc				= 500;
// 	unsigned long int Collision_calc			= 500;
	unsigned long int Movement_calc				= 10;
     d46:	8a e0       	ldi	r24, 0x0A	; 10
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	a0 e0       	ldi	r26, 0x00	; 0
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	8b 87       	std	Y+11, r24	; 0x0b
     d50:	9c 87       	std	Y+12, r25	; 0x0c
     d52:	ad 87       	std	Y+13, r26	; 0x0d
     d54:	be 87       	std	Y+14, r27	; 0x0e
	unsigned long int Collision_calc			= 100;
     d56:	84 e6       	ldi	r24, 0x64	; 100
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a0 e0       	ldi	r26, 0x00	; 0
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	8f 87       	std	Y+15, r24	; 0x0f
     d60:	98 8b       	std	Y+16, r25	; 0x10
     d62:	a9 8b       	std	Y+17, r26	; 0x11
     d64:	ba 8b       	std	Y+18, r27	; 0x12
	
		
	/**Set individual task properties********************************/
	
	//Calculating GCD
	unsigned long int tempGCD		= findGCD(ObstacleGenerator_calc, Display_calc);
     d66:	2f 81       	ldd	r18, Y+7	; 0x07
     d68:	38 85       	ldd	r19, Y+8	; 0x08
     d6a:	49 85       	ldd	r20, Y+9	; 0x09
     d6c:	5a 85       	ldd	r21, Y+10	; 0x0a
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	9c 81       	ldd	r25, Y+4	; 0x04
     d72:	ad 81       	ldd	r26, Y+5	; 0x05
     d74:	be 81       	ldd	r27, Y+6	; 0x06
     d76:	bc 01       	movw	r22, r24
     d78:	cd 01       	movw	r24, r26
     d7a:	72 db       	rcall	.-2332   	; 0x460 <findGCD>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	8b 8b       	std	Y+19, r24	; 0x13
     d82:	9c 8b       	std	Y+20, r25	; 0x14
     d84:	ad 8b       	std	Y+21, r26	; 0x15
     d86:	be 8b       	std	Y+22, r27	; 0x16
					  tempGCD		= findGCD(tempGCD, Movement_calc);
     d88:	2b 85       	ldd	r18, Y+11	; 0x0b
     d8a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d8c:	4d 85       	ldd	r20, Y+13	; 0x0d
     d8e:	5e 85       	ldd	r21, Y+14	; 0x0e
     d90:	8b 89       	ldd	r24, Y+19	; 0x13
     d92:	9c 89       	ldd	r25, Y+20	; 0x14
     d94:	ad 89       	ldd	r26, Y+21	; 0x15
     d96:	be 89       	ldd	r27, Y+22	; 0x16
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	61 db       	rcall	.-2366   	; 0x460 <findGCD>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	8b 8b       	std	Y+19, r24	; 0x13
     da4:	9c 8b       	std	Y+20, r25	; 0x14
     da6:	ad 8b       	std	Y+21, r26	; 0x15
     da8:	be 8b       	std	Y+22, r27	; 0x16
					  tempGCD		= findGCD(tempGCD, Collision_calc);
     daa:	2f 85       	ldd	r18, Y+15	; 0x0f
     dac:	38 89       	ldd	r19, Y+16	; 0x10
     dae:	49 89       	ldd	r20, Y+17	; 0x11
     db0:	5a 89       	ldd	r21, Y+18	; 0x12
     db2:	8b 89       	ldd	r24, Y+19	; 0x13
     db4:	9c 89       	ldd	r25, Y+20	; 0x14
     db6:	ad 89       	ldd	r26, Y+21	; 0x15
     db8:	be 89       	ldd	r27, Y+22	; 0x16
     dba:	bc 01       	movw	r22, r24
     dbc:	cd 01       	movw	r24, r26
     dbe:	50 db       	rcall	.-2400   	; 0x460 <findGCD>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	8b 8b       	std	Y+19, r24	; 0x13
     dc6:	9c 8b       	std	Y+20, r25	; 0x14
     dc8:	ad 8b       	std	Y+21, r26	; 0x15
     dca:	be 8b       	std	Y+22, r27	; 0x16
	unsigned long int GCD			= tempGCD;
     dcc:	8b 89       	ldd	r24, Y+19	; 0x13
     dce:	9c 89       	ldd	r25, Y+20	; 0x14
     dd0:	ad 89       	ldd	r26, Y+21	; 0x15
     dd2:	be 89       	ldd	r27, Y+22	; 0x16
     dd4:	8f 8b       	std	Y+23, r24	; 0x17
     dd6:	98 8f       	std	Y+24, r25	; 0x18
     dd8:	a9 8f       	std	Y+25, r26	; 0x19
     dda:	ba 8f       	std	Y+26, r27	; 0x1a
	//Recalculate GCD periods for scheduler
	unsigned long int Tick1_Period	= ObstacleGenerator_calc/GCD,
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	9c 81       	ldd	r25, Y+4	; 0x04
     de0:	ad 81       	ldd	r26, Y+5	; 0x05
     de2:	be 81       	ldd	r27, Y+6	; 0x06
     de4:	2f 89       	ldd	r18, Y+23	; 0x17
     de6:	38 8d       	ldd	r19, Y+24	; 0x18
     de8:	49 8d       	ldd	r20, Y+25	; 0x19
     dea:	5a 8d       	ldd	r21, Y+26	; 0x1a
     dec:	bc 01       	movw	r22, r24
     dee:	cd 01       	movw	r24, r26
     df0:	66 d1       	rcall	.+716    	; 0x10be <__udivmodsi4>
     df2:	da 01       	movw	r26, r20
     df4:	c9 01       	movw	r24, r18
     df6:	8b 8f       	std	Y+27, r24	; 0x1b
     df8:	9c 8f       	std	Y+28, r25	; 0x1c
     dfa:	ad 8f       	std	Y+29, r26	; 0x1d
     dfc:	be 8f       	std	Y+30, r27	; 0x1e
					  Tick2_period	= Display_calc/GCD,
     dfe:	8f 81       	ldd	r24, Y+7	; 0x07
     e00:	98 85       	ldd	r25, Y+8	; 0x08
     e02:	a9 85       	ldd	r26, Y+9	; 0x09
     e04:	ba 85       	ldd	r27, Y+10	; 0x0a
     e06:	2f 89       	ldd	r18, Y+23	; 0x17
     e08:	38 8d       	ldd	r19, Y+24	; 0x18
     e0a:	49 8d       	ldd	r20, Y+25	; 0x19
     e0c:	5a 8d       	ldd	r21, Y+26	; 0x1a
     e0e:	bc 01       	movw	r22, r24
     e10:	cd 01       	movw	r24, r26
     e12:	55 d1       	rcall	.+682    	; 0x10be <__udivmodsi4>
     e14:	da 01       	movw	r26, r20
     e16:	c9 01       	movw	r24, r18
     e18:	8f 8f       	std	Y+31, r24	; 0x1f
     e1a:	98 a3       	std	Y+32, r25	; 0x20
     e1c:	a9 a3       	std	Y+33, r26	; 0x21
     e1e:	ba a3       	std	Y+34, r27	; 0x22
					  Tick3_period	= Movement_calc/GCD,
     e20:	8b 85       	ldd	r24, Y+11	; 0x0b
     e22:	9c 85       	ldd	r25, Y+12	; 0x0c
     e24:	ad 85       	ldd	r26, Y+13	; 0x0d
     e26:	be 85       	ldd	r27, Y+14	; 0x0e
     e28:	2f 89       	ldd	r18, Y+23	; 0x17
     e2a:	38 8d       	ldd	r19, Y+24	; 0x18
     e2c:	49 8d       	ldd	r20, Y+25	; 0x19
     e2e:	5a 8d       	ldd	r21, Y+26	; 0x1a
     e30:	bc 01       	movw	r22, r24
     e32:	cd 01       	movw	r24, r26
     e34:	44 d1       	rcall	.+648    	; 0x10be <__udivmodsi4>
     e36:	da 01       	movw	r26, r20
     e38:	c9 01       	movw	r24, r18
     e3a:	8b a3       	std	Y+35, r24	; 0x23
     e3c:	9c a3       	std	Y+36, r25	; 0x24
     e3e:	ad a3       	std	Y+37, r26	; 0x25
     e40:	be a3       	std	Y+38, r27	; 0x26
					  Tick4_period	= Collision_calc/GCD;
     e42:	8f 85       	ldd	r24, Y+15	; 0x0f
     e44:	98 89       	ldd	r25, Y+16	; 0x10
     e46:	a9 89       	ldd	r26, Y+17	; 0x11
     e48:	ba 89       	ldd	r27, Y+18	; 0x12
     e4a:	2f 89       	ldd	r18, Y+23	; 0x17
     e4c:	38 8d       	ldd	r19, Y+24	; 0x18
     e4e:	49 8d       	ldd	r20, Y+25	; 0x19
     e50:	5a 8d       	ldd	r21, Y+26	; 0x1a
     e52:	bc 01       	movw	r22, r24
     e54:	cd 01       	movw	r24, r26
     e56:	33 d1       	rcall	.+614    	; 0x10be <__udivmodsi4>
     e58:	da 01       	movw	r26, r20
     e5a:	c9 01       	movw	r24, r18
     e5c:	8f a3       	std	Y+39, r24	; 0x27
     e5e:	98 a7       	std	Y+40, r25	; 0x28
     e60:	a9 a7       	std	Y+41, r26	; 0x29
     e62:	ba a7       	std	Y+42, r27	; 0x2a
	const unsigned short numTasks	= sizeof(tasks)/sizeof(task*);
     e64:	84 e0       	ldi	r24, 0x04	; 4
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	9c a7       	std	Y+44, r25	; 0x2c
     e6a:	8b a7       	std	Y+43, r24	; 0x2b
	
	/****************************************************************/
	
	/**Set individual task properties**************/
	task1.state						= 0;
     e6c:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <task1>
	task1.period					= Tick1_Period;
     e70:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e72:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e74:	ad 8d       	ldd	r26, Y+29	; 0x1d
     e76:	be 8d       	ldd	r27, Y+30	; 0x1e
     e78:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <task1+0x1>
     e7c:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <task1+0x2>
     e80:	a0 93 6a 01 	sts	0x016A, r26	; 0x80016a <task1+0x3>
     e84:	b0 93 6b 01 	sts	0x016B, r27	; 0x80016b <task1+0x4>
	task1.elapsedTime				= Tick1_Period;
     e88:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e8c:	ad 8d       	ldd	r26, Y+29	; 0x1d
     e8e:	be 8d       	ldd	r27, Y+30	; 0x1e
     e90:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <task1+0x5>
     e94:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <task1+0x6>
     e98:	a0 93 6e 01 	sts	0x016E, r26	; 0x80016e <task1+0x7>
     e9c:	b0 93 6f 01 	sts	0x016F, r27	; 0x80016f <task1+0x8>
	task1.TickFct					= &ObstacleGeneratorSM_Tick;
     ea0:	81 ec       	ldi	r24, 0xC1	; 193
     ea2:	93 e0       	ldi	r25, 0x03	; 3
     ea4:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <task1+0xa>
     ea8:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <task1+0x9>
	
	// Task 2
	task2.state						= 0;//Task initial state.
     eac:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <task2>
	task2.period					= Tick2_period;//Task Period.
     eb0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eb2:	98 a1       	ldd	r25, Y+32	; 0x20
     eb4:	a9 a1       	ldd	r26, Y+33	; 0x21
     eb6:	ba a1       	ldd	r27, Y+34	; 0x22
     eb8:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <task2+0x1>
     ebc:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <task2+0x2>
     ec0:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <task2+0x3>
     ec4:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <task2+0x4>
	task2.elapsedTime				= Tick2_period;//Task current elapsed time.
     ec8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eca:	98 a1       	ldd	r25, Y+32	; 0x20
     ecc:	a9 a1       	ldd	r26, Y+33	; 0x21
     ece:	ba a1       	ldd	r27, Y+34	; 0x22
     ed0:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <task2+0x5>
     ed4:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <task2+0x6>
     ed8:	a0 93 79 01 	sts	0x0179, r26	; 0x800179 <task2+0x7>
     edc:	b0 93 7a 01 	sts	0x017A, r27	; 0x80017a <task2+0x8>
	task2.TickFct					= &DisplaySM_Tick;//Function pointer for the tick.
     ee0:	84 e7       	ldi	r24, 0x74	; 116
     ee2:	94 e0       	ldi	r25, 0x04	; 4
     ee4:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <task2+0xa>
     ee8:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <task2+0x9>
	
	//Task 3
	task3.state						= 0;//Task initial state.
     eec:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <task3>
	task3.period					= Tick3_period;//Task Period.
     ef0:	8b a1       	ldd	r24, Y+35	; 0x23
     ef2:	9c a1       	ldd	r25, Y+36	; 0x24
     ef4:	ad a1       	ldd	r26, Y+37	; 0x25
     ef6:	be a1       	ldd	r27, Y+38	; 0x26
     ef8:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <task3+0x1>
     efc:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <task3+0x2>
     f00:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <task3+0x3>
     f04:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <task3+0x4>
	task3.elapsedTime				= Tick3_period;//Task current elapsed time.
     f08:	8b a1       	ldd	r24, Y+35	; 0x23
     f0a:	9c a1       	ldd	r25, Y+36	; 0x24
     f0c:	ad a1       	ldd	r26, Y+37	; 0x25
     f0e:	be a1       	ldd	r27, Y+38	; 0x26
     f10:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <task3+0x5>
     f14:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <task3+0x6>
     f18:	a0 93 84 01 	sts	0x0184, r26	; 0x800184 <task3+0x7>
     f1c:	b0 93 85 01 	sts	0x0185, r27	; 0x800185 <task3+0x8>
	task3.TickFct					= &Movement_Tick;//Function pointer for the tick.
     f20:	87 e3       	ldi	r24, 0x37	; 55
     f22:	95 e0       	ldi	r25, 0x05	; 5
     f24:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <task3+0xa>
     f28:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <task3+0x9>
	
	//Task 4
	task4.state						= 0;//Task initial state.
     f2c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <task4>
	task4.period					= Tick4_period;//Task Period.
     f30:	8f a1       	ldd	r24, Y+39	; 0x27
     f32:	98 a5       	ldd	r25, Y+40	; 0x28
     f34:	a9 a5       	ldd	r26, Y+41	; 0x29
     f36:	ba a5       	ldd	r27, Y+42	; 0x2a
     f38:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <task4+0x1>
     f3c:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <task4+0x2>
     f40:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <task4+0x3>
     f44:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <task4+0x4>
	task4.elapsedTime				= Tick4_period;//Task current elapsed time.
     f48:	8f a1       	ldd	r24, Y+39	; 0x27
     f4a:	98 a5       	ldd	r25, Y+40	; 0x28
     f4c:	a9 a5       	ldd	r26, Y+41	; 0x29
     f4e:	ba a5       	ldd	r27, Y+42	; 0x2a
     f50:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <task4+0x5>
     f54:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <task4+0x6>
     f58:	a0 93 8f 01 	sts	0x018F, r26	; 0x80018f <task4+0x7>
     f5c:	b0 93 90 01 	sts	0x0190, r27	; 0x800190 <task4+0x8>
	task4.TickFct					= &Collision_Tick;//Function pointer for the tick.
     f60:	87 e1       	ldi	r24, 0x17	; 23
     f62:	96 e0       	ldi	r25, 0x06	; 6
     f64:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <task4+0xa>
     f68:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <task4+0x9>

	/**********************************************/
	
	
	TimerSet(GCD);
     f6c:	8f 89       	ldd	r24, Y+23	; 0x17
     f6e:	98 8d       	ldd	r25, Y+24	; 0x18
     f70:	a9 8d       	ldd	r26, Y+25	; 0x19
     f72:	ba 8d       	ldd	r27, Y+26	; 0x1a
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	a6 d9       	rcall	.-3252   	; 0x2c6 <TimerSet>
	TimerOn();
     f7a:	d2 d9       	rcall	.-3164   	; 0x320 <TimerOn>
	
	LCD_init();
     f7c:	af d8       	rcall	.-3746   	; 0xdc <LCD_init>
	
	while(1) 
	{
		for(unsigned short i = 0; i < numTasks; i++)
     f7e:	1a 82       	std	Y+2, r1	; 0x02
     f80:	19 82       	std	Y+1, r1	; 0x01
     f82:	7a c0       	rjmp	.+244    	; 0x1078 <main+0x3ae>
		{
			//keypad_value = GetKeypadKey();
			if(tasks[i] -> elapsedTime == tasks[i]-> period)
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	88 0f       	add	r24, r24
     f8a:	99 1f       	adc	r25, r25
     f8c:	8c 5c       	subi	r24, 0xCC	; 204
     f8e:	9e 4f       	sbci	r25, 0xFE	; 254
     f90:	fc 01       	movw	r30, r24
     f92:	80 81       	ld	r24, Z
     f94:	91 81       	ldd	r25, Z+1	; 0x01
     f96:	fc 01       	movw	r30, r24
     f98:	25 81       	ldd	r18, Z+5	; 0x05
     f9a:	36 81       	ldd	r19, Z+6	; 0x06
     f9c:	47 81       	ldd	r20, Z+7	; 0x07
     f9e:	50 85       	ldd	r21, Z+8	; 0x08
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	8c 5c       	subi	r24, 0xCC	; 204
     faa:	9e 4f       	sbci	r25, 0xFE	; 254
     fac:	fc 01       	movw	r30, r24
     fae:	80 81       	ld	r24, Z
     fb0:	91 81       	ldd	r25, Z+1	; 0x01
     fb2:	fc 01       	movw	r30, r24
     fb4:	81 81       	ldd	r24, Z+1	; 0x01
     fb6:	92 81       	ldd	r25, Z+2	; 0x02
     fb8:	a3 81       	ldd	r26, Z+3	; 0x03
     fba:	b4 81       	ldd	r27, Z+4	; 0x04
     fbc:	28 17       	cp	r18, r24
     fbe:	39 07       	cpc	r19, r25
     fc0:	4a 07       	cpc	r20, r26
     fc2:	5b 07       	cpc	r21, r27
     fc4:	a9 f5       	brne	.+106    	; 0x1030 <main+0x366>
			{
				
				tasks[i] -> state		= tasks[i] -> TickFct(tasks[i] -> state);
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	8c 5c       	subi	r24, 0xCC	; 204
     fd0:	9e 4f       	sbci	r25, 0xFE	; 254
     fd2:	fc 01       	movw	r30, r24
     fd4:	00 81       	ld	r16, Z
     fd6:	11 81       	ldd	r17, Z+1	; 0x01
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	9a 81       	ldd	r25, Y+2	; 0x02
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	8c 5c       	subi	r24, 0xCC	; 204
     fe2:	9e 4f       	sbci	r25, 0xFE	; 254
     fe4:	fc 01       	movw	r30, r24
     fe6:	80 81       	ld	r24, Z
     fe8:	91 81       	ldd	r25, Z+1	; 0x01
     fea:	fc 01       	movw	r30, r24
     fec:	21 85       	ldd	r18, Z+9	; 0x09
     fee:	32 85       	ldd	r19, Z+10	; 0x0a
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	8c 5c       	subi	r24, 0xCC	; 204
     ffa:	9e 4f       	sbci	r25, 0xFE	; 254
     ffc:	fc 01       	movw	r30, r24
     ffe:	80 81       	ld	r24, Z
    1000:	91 81       	ldd	r25, Z+1	; 0x01
    1002:	fc 01       	movw	r30, r24
    1004:	80 81       	ld	r24, Z
    1006:	08 2e       	mov	r0, r24
    1008:	00 0c       	add	r0, r0
    100a:	99 0b       	sbc	r25, r25
    100c:	f9 01       	movw	r30, r18
    100e:	09 95       	icall
    1010:	f8 01       	movw	r30, r16
    1012:	80 83       	st	Z, r24
				tasks[i] -> elapsedTime = 0;
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	9a 81       	ldd	r25, Y+2	; 0x02
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	8c 5c       	subi	r24, 0xCC	; 204
    101e:	9e 4f       	sbci	r25, 0xFE	; 254
    1020:	fc 01       	movw	r30, r24
    1022:	80 81       	ld	r24, Z
    1024:	91 81       	ldd	r25, Z+1	; 0x01
    1026:	fc 01       	movw	r30, r24
    1028:	15 82       	std	Z+5, r1	; 0x05
    102a:	16 82       	std	Z+6, r1	; 0x06
    102c:	17 82       	std	Z+7, r1	; 0x07
    102e:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i] -> elapsedTime += 1;
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	9a 81       	ldd	r25, Y+2	; 0x02
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	8c 5c       	subi	r24, 0xCC	; 204
    103a:	9e 4f       	sbci	r25, 0xFE	; 254
    103c:	fc 01       	movw	r30, r24
    103e:	20 81       	ld	r18, Z
    1040:	31 81       	ldd	r19, Z+1	; 0x01
    1042:	89 81       	ldd	r24, Y+1	; 0x01
    1044:	9a 81       	ldd	r25, Y+2	; 0x02
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	8c 5c       	subi	r24, 0xCC	; 204
    104c:	9e 4f       	sbci	r25, 0xFE	; 254
    104e:	fc 01       	movw	r30, r24
    1050:	80 81       	ld	r24, Z
    1052:	91 81       	ldd	r25, Z+1	; 0x01
    1054:	fc 01       	movw	r30, r24
    1056:	85 81       	ldd	r24, Z+5	; 0x05
    1058:	96 81       	ldd	r25, Z+6	; 0x06
    105a:	a7 81       	ldd	r26, Z+7	; 0x07
    105c:	b0 85       	ldd	r27, Z+8	; 0x08
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	a1 1d       	adc	r26, r1
    1062:	b1 1d       	adc	r27, r1
    1064:	f9 01       	movw	r30, r18
    1066:	85 83       	std	Z+5, r24	; 0x05
    1068:	96 83       	std	Z+6, r25	; 0x06
    106a:	a7 83       	std	Z+7, r26	; 0x07
    106c:	b0 87       	std	Z+8, r27	; 0x08
	
	LCD_init();
	
	while(1) 
	{
		for(unsigned short i = 0; i < numTasks; i++)
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	9a 81       	ldd	r25, Y+2	; 0x02
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	9a 83       	std	Y+2, r25	; 0x02
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	29 81       	ldd	r18, Y+1	; 0x01
    107a:	3a 81       	ldd	r19, Y+2	; 0x02
    107c:	8b a5       	ldd	r24, Y+43	; 0x2b
    107e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1080:	28 17       	cp	r18, r24
    1082:	39 07       	cpc	r19, r25
    1084:	08 f4       	brcc	.+2      	; 0x1088 <main+0x3be>
    1086:	7e cf       	rjmp	.-260    	; 0xf84 <main+0x2ba>
				tasks[i] -> state		= tasks[i] -> TickFct(tasks[i] -> state);
				tasks[i] -> elapsedTime = 0;
			}
			tasks[i] -> elapsedTime += 1;
		}
		while(!TimerFlag);
    1088:	00 00       	nop
    108a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
    108e:	88 23       	and	r24, r24
    1090:	e1 f3       	breq	.-8      	; 0x108a <main+0x3c0>
		TimerFlag = 0;
    1092:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__data_end>
	}
    1096:	73 cf       	rjmp	.-282    	; 0xf7e <main+0x2b4>

00001098 <__divmodhi4>:
    1098:	97 fb       	bst	r25, 7
    109a:	07 2e       	mov	r0, r23
    109c:	16 f4       	brtc	.+4      	; 0x10a2 <__divmodhi4+0xa>
    109e:	00 94       	com	r0
    10a0:	06 d0       	rcall	.+12     	; 0x10ae <__divmodhi4_neg1>
    10a2:	77 fd       	sbrc	r23, 7
    10a4:	08 d0       	rcall	.+16     	; 0x10b6 <__divmodhi4_neg2>
    10a6:	2d d0       	rcall	.+90     	; 0x1102 <__udivmodhi4>
    10a8:	07 fc       	sbrc	r0, 7
    10aa:	05 d0       	rcall	.+10     	; 0x10b6 <__divmodhi4_neg2>
    10ac:	3e f4       	brtc	.+14     	; 0x10bc <__divmodhi4_exit>

000010ae <__divmodhi4_neg1>:
    10ae:	90 95       	com	r25
    10b0:	81 95       	neg	r24
    10b2:	9f 4f       	sbci	r25, 0xFF	; 255
    10b4:	08 95       	ret

000010b6 <__divmodhi4_neg2>:
    10b6:	70 95       	com	r23
    10b8:	61 95       	neg	r22
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255

000010bc <__divmodhi4_exit>:
    10bc:	08 95       	ret

000010be <__udivmodsi4>:
    10be:	a1 e2       	ldi	r26, 0x21	; 33
    10c0:	1a 2e       	mov	r1, r26
    10c2:	aa 1b       	sub	r26, r26
    10c4:	bb 1b       	sub	r27, r27
    10c6:	fd 01       	movw	r30, r26
    10c8:	0d c0       	rjmp	.+26     	; 0x10e4 <__udivmodsi4_ep>

000010ca <__udivmodsi4_loop>:
    10ca:	aa 1f       	adc	r26, r26
    10cc:	bb 1f       	adc	r27, r27
    10ce:	ee 1f       	adc	r30, r30
    10d0:	ff 1f       	adc	r31, r31
    10d2:	a2 17       	cp	r26, r18
    10d4:	b3 07       	cpc	r27, r19
    10d6:	e4 07       	cpc	r30, r20
    10d8:	f5 07       	cpc	r31, r21
    10da:	20 f0       	brcs	.+8      	; 0x10e4 <__udivmodsi4_ep>
    10dc:	a2 1b       	sub	r26, r18
    10de:	b3 0b       	sbc	r27, r19
    10e0:	e4 0b       	sbc	r30, r20
    10e2:	f5 0b       	sbc	r31, r21

000010e4 <__udivmodsi4_ep>:
    10e4:	66 1f       	adc	r22, r22
    10e6:	77 1f       	adc	r23, r23
    10e8:	88 1f       	adc	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	1a 94       	dec	r1
    10ee:	69 f7       	brne	.-38     	; 0x10ca <__udivmodsi4_loop>
    10f0:	60 95       	com	r22
    10f2:	70 95       	com	r23
    10f4:	80 95       	com	r24
    10f6:	90 95       	com	r25
    10f8:	9b 01       	movw	r18, r22
    10fa:	ac 01       	movw	r20, r24
    10fc:	bd 01       	movw	r22, r26
    10fe:	cf 01       	movw	r24, r30
    1100:	08 95       	ret

00001102 <__udivmodhi4>:
    1102:	aa 1b       	sub	r26, r26
    1104:	bb 1b       	sub	r27, r27
    1106:	51 e1       	ldi	r21, 0x11	; 17
    1108:	07 c0       	rjmp	.+14     	; 0x1118 <__udivmodhi4_ep>

0000110a <__udivmodhi4_loop>:
    110a:	aa 1f       	adc	r26, r26
    110c:	bb 1f       	adc	r27, r27
    110e:	a6 17       	cp	r26, r22
    1110:	b7 07       	cpc	r27, r23
    1112:	10 f0       	brcs	.+4      	; 0x1118 <__udivmodhi4_ep>
    1114:	a6 1b       	sub	r26, r22
    1116:	b7 0b       	sbc	r27, r23

00001118 <__udivmodhi4_ep>:
    1118:	88 1f       	adc	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	5a 95       	dec	r21
    111e:	a9 f7       	brne	.-22     	; 0x110a <__udivmodhi4_loop>
    1120:	80 95       	com	r24
    1122:	90 95       	com	r25
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	08 95       	ret

0000112a <malloc>:
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	82 30       	cpi	r24, 0x02	; 2
    1130:	91 05       	cpc	r25, r1
    1132:	10 f4       	brcc	.+4      	; 0x1138 <malloc+0xe>
    1134:	82 e0       	ldi	r24, 0x02	; 2
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <__flp>
    113c:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <__flp+0x1>
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	c0 e0       	ldi	r28, 0x00	; 0
    1146:	d0 e0       	ldi	r29, 0x00	; 0
    1148:	30 97       	sbiw	r30, 0x00	; 0
    114a:	11 f1       	breq	.+68     	; 0x1190 <malloc+0x66>
    114c:	40 81       	ld	r20, Z
    114e:	51 81       	ldd	r21, Z+1	; 0x01
    1150:	48 17       	cp	r20, r24
    1152:	59 07       	cpc	r21, r25
    1154:	c0 f0       	brcs	.+48     	; 0x1186 <malloc+0x5c>
    1156:	48 17       	cp	r20, r24
    1158:	59 07       	cpc	r21, r25
    115a:	61 f4       	brne	.+24     	; 0x1174 <malloc+0x4a>
    115c:	82 81       	ldd	r24, Z+2	; 0x02
    115e:	93 81       	ldd	r25, Z+3	; 0x03
    1160:	20 97       	sbiw	r28, 0x00	; 0
    1162:	19 f0       	breq	.+6      	; 0x116a <malloc+0x40>
    1164:	9b 83       	std	Y+3, r25	; 0x03
    1166:	8a 83       	std	Y+2, r24	; 0x02
    1168:	2b c0       	rjmp	.+86     	; 0x11c0 <malloc+0x96>
    116a:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <__flp+0x1>
    116e:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__flp>
    1172:	26 c0       	rjmp	.+76     	; 0x11c0 <malloc+0x96>
    1174:	21 15       	cp	r18, r1
    1176:	31 05       	cpc	r19, r1
    1178:	19 f0       	breq	.+6      	; 0x1180 <malloc+0x56>
    117a:	42 17       	cp	r20, r18
    117c:	53 07       	cpc	r21, r19
    117e:	18 f4       	brcc	.+6      	; 0x1186 <malloc+0x5c>
    1180:	9a 01       	movw	r18, r20
    1182:	be 01       	movw	r22, r28
    1184:	df 01       	movw	r26, r30
    1186:	ef 01       	movw	r28, r30
    1188:	02 80       	ldd	r0, Z+2	; 0x02
    118a:	f3 81       	ldd	r31, Z+3	; 0x03
    118c:	e0 2d       	mov	r30, r0
    118e:	dc cf       	rjmp	.-72     	; 0x1148 <malloc+0x1e>
    1190:	21 15       	cp	r18, r1
    1192:	31 05       	cpc	r19, r1
    1194:	09 f1       	breq	.+66     	; 0x11d8 <malloc+0xae>
    1196:	28 1b       	sub	r18, r24
    1198:	39 0b       	sbc	r19, r25
    119a:	24 30       	cpi	r18, 0x04	; 4
    119c:	31 05       	cpc	r19, r1
    119e:	90 f4       	brcc	.+36     	; 0x11c4 <malloc+0x9a>
    11a0:	12 96       	adiw	r26, 0x02	; 2
    11a2:	8d 91       	ld	r24, X+
    11a4:	9c 91       	ld	r25, X
    11a6:	13 97       	sbiw	r26, 0x03	; 3
    11a8:	61 15       	cp	r22, r1
    11aa:	71 05       	cpc	r23, r1
    11ac:	21 f0       	breq	.+8      	; 0x11b6 <malloc+0x8c>
    11ae:	fb 01       	movw	r30, r22
    11b0:	93 83       	std	Z+3, r25	; 0x03
    11b2:	82 83       	std	Z+2, r24	; 0x02
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <malloc+0x94>
    11b6:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <__flp+0x1>
    11ba:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__flp>
    11be:	fd 01       	movw	r30, r26
    11c0:	32 96       	adiw	r30, 0x02	; 2
    11c2:	44 c0       	rjmp	.+136    	; 0x124c <malloc+0x122>
    11c4:	fd 01       	movw	r30, r26
    11c6:	e2 0f       	add	r30, r18
    11c8:	f3 1f       	adc	r31, r19
    11ca:	81 93       	st	Z+, r24
    11cc:	91 93       	st	Z+, r25
    11ce:	22 50       	subi	r18, 0x02	; 2
    11d0:	31 09       	sbc	r19, r1
    11d2:	2d 93       	st	X+, r18
    11d4:	3c 93       	st	X, r19
    11d6:	3a c0       	rjmp	.+116    	; 0x124c <malloc+0x122>
    11d8:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <__brkval>
    11dc:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <__brkval+0x1>
    11e0:	23 2b       	or	r18, r19
    11e2:	41 f4       	brne	.+16     	; 0x11f4 <malloc+0xca>
    11e4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    11e8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    11ec:	30 93 ab 01 	sts	0x01AB, r19	; 0x8001ab <__brkval+0x1>
    11f0:	20 93 aa 01 	sts	0x01AA, r18	; 0x8001aa <__brkval>
    11f4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    11f8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    11fc:	21 15       	cp	r18, r1
    11fe:	31 05       	cpc	r19, r1
    1200:	41 f4       	brne	.+16     	; 0x1212 <malloc+0xe8>
    1202:	2d b7       	in	r18, 0x3d	; 61
    1204:	3e b7       	in	r19, 0x3e	; 62
    1206:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    120a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    120e:	24 1b       	sub	r18, r20
    1210:	35 0b       	sbc	r19, r21
    1212:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <__brkval>
    1216:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <__brkval+0x1>
    121a:	e2 17       	cp	r30, r18
    121c:	f3 07       	cpc	r31, r19
    121e:	a0 f4       	brcc	.+40     	; 0x1248 <malloc+0x11e>
    1220:	2e 1b       	sub	r18, r30
    1222:	3f 0b       	sbc	r19, r31
    1224:	28 17       	cp	r18, r24
    1226:	39 07       	cpc	r19, r25
    1228:	78 f0       	brcs	.+30     	; 0x1248 <malloc+0x11e>
    122a:	ac 01       	movw	r20, r24
    122c:	4e 5f       	subi	r20, 0xFE	; 254
    122e:	5f 4f       	sbci	r21, 0xFF	; 255
    1230:	24 17       	cp	r18, r20
    1232:	35 07       	cpc	r19, r21
    1234:	48 f0       	brcs	.+18     	; 0x1248 <malloc+0x11e>
    1236:	4e 0f       	add	r20, r30
    1238:	5f 1f       	adc	r21, r31
    123a:	50 93 ab 01 	sts	0x01AB, r21	; 0x8001ab <__brkval+0x1>
    123e:	40 93 aa 01 	sts	0x01AA, r20	; 0x8001aa <__brkval>
    1242:	81 93       	st	Z+, r24
    1244:	91 93       	st	Z+, r25
    1246:	02 c0       	rjmp	.+4      	; 0x124c <malloc+0x122>
    1248:	e0 e0       	ldi	r30, 0x00	; 0
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	cf 01       	movw	r24, r30
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <free>:
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	09 f4       	brne	.+2      	; 0x1262 <free+0xe>
    1260:	8c c0       	rjmp	.+280    	; 0x137a <free+0x126>
    1262:	fc 01       	movw	r30, r24
    1264:	32 97       	sbiw	r30, 0x02	; 2
    1266:	13 82       	std	Z+3, r1	; 0x03
    1268:	12 82       	std	Z+2, r1	; 0x02
    126a:	00 91 ac 01 	lds	r16, 0x01AC	; 0x8001ac <__flp>
    126e:	10 91 ad 01 	lds	r17, 0x01AD	; 0x8001ad <__flp+0x1>
    1272:	01 15       	cp	r16, r1
    1274:	11 05       	cpc	r17, r1
    1276:	81 f4       	brne	.+32     	; 0x1298 <free+0x44>
    1278:	20 81       	ld	r18, Z
    127a:	31 81       	ldd	r19, Z+1	; 0x01
    127c:	82 0f       	add	r24, r18
    127e:	93 1f       	adc	r25, r19
    1280:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <__brkval>
    1284:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <__brkval+0x1>
    1288:	28 17       	cp	r18, r24
    128a:	39 07       	cpc	r19, r25
    128c:	79 f5       	brne	.+94     	; 0x12ec <free+0x98>
    128e:	f0 93 ab 01 	sts	0x01AB, r31	; 0x8001ab <__brkval+0x1>
    1292:	e0 93 aa 01 	sts	0x01AA, r30	; 0x8001aa <__brkval>
    1296:	71 c0       	rjmp	.+226    	; 0x137a <free+0x126>
    1298:	d8 01       	movw	r26, r16
    129a:	40 e0       	ldi	r20, 0x00	; 0
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	ae 17       	cp	r26, r30
    12a0:	bf 07       	cpc	r27, r31
    12a2:	50 f4       	brcc	.+20     	; 0x12b8 <free+0x64>
    12a4:	12 96       	adiw	r26, 0x02	; 2
    12a6:	2d 91       	ld	r18, X+
    12a8:	3c 91       	ld	r19, X
    12aa:	13 97       	sbiw	r26, 0x03	; 3
    12ac:	ad 01       	movw	r20, r26
    12ae:	21 15       	cp	r18, r1
    12b0:	31 05       	cpc	r19, r1
    12b2:	09 f1       	breq	.+66     	; 0x12f6 <free+0xa2>
    12b4:	d9 01       	movw	r26, r18
    12b6:	f3 cf       	rjmp	.-26     	; 0x129e <free+0x4a>
    12b8:	9d 01       	movw	r18, r26
    12ba:	da 01       	movw	r26, r20
    12bc:	33 83       	std	Z+3, r19	; 0x03
    12be:	22 83       	std	Z+2, r18	; 0x02
    12c0:	60 81       	ld	r22, Z
    12c2:	71 81       	ldd	r23, Z+1	; 0x01
    12c4:	86 0f       	add	r24, r22
    12c6:	97 1f       	adc	r25, r23
    12c8:	82 17       	cp	r24, r18
    12ca:	93 07       	cpc	r25, r19
    12cc:	69 f4       	brne	.+26     	; 0x12e8 <free+0x94>
    12ce:	ec 01       	movw	r28, r24
    12d0:	28 81       	ld	r18, Y
    12d2:	39 81       	ldd	r19, Y+1	; 0x01
    12d4:	26 0f       	add	r18, r22
    12d6:	37 1f       	adc	r19, r23
    12d8:	2e 5f       	subi	r18, 0xFE	; 254
    12da:	3f 4f       	sbci	r19, 0xFF	; 255
    12dc:	31 83       	std	Z+1, r19	; 0x01
    12de:	20 83       	st	Z, r18
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	9b 81       	ldd	r25, Y+3	; 0x03
    12e4:	93 83       	std	Z+3, r25	; 0x03
    12e6:	82 83       	std	Z+2, r24	; 0x02
    12e8:	45 2b       	or	r20, r21
    12ea:	29 f4       	brne	.+10     	; 0x12f6 <free+0xa2>
    12ec:	f0 93 ad 01 	sts	0x01AD, r31	; 0x8001ad <__flp+0x1>
    12f0:	e0 93 ac 01 	sts	0x01AC, r30	; 0x8001ac <__flp>
    12f4:	42 c0       	rjmp	.+132    	; 0x137a <free+0x126>
    12f6:	13 96       	adiw	r26, 0x03	; 3
    12f8:	fc 93       	st	X, r31
    12fa:	ee 93       	st	-X, r30
    12fc:	12 97       	sbiw	r26, 0x02	; 2
    12fe:	ed 01       	movw	r28, r26
    1300:	49 91       	ld	r20, Y+
    1302:	59 91       	ld	r21, Y+
    1304:	9e 01       	movw	r18, r28
    1306:	24 0f       	add	r18, r20
    1308:	35 1f       	adc	r19, r21
    130a:	e2 17       	cp	r30, r18
    130c:	f3 07       	cpc	r31, r19
    130e:	71 f4       	brne	.+28     	; 0x132c <free+0xd8>
    1310:	80 81       	ld	r24, Z
    1312:	91 81       	ldd	r25, Z+1	; 0x01
    1314:	84 0f       	add	r24, r20
    1316:	95 1f       	adc	r25, r21
    1318:	02 96       	adiw	r24, 0x02	; 2
    131a:	11 96       	adiw	r26, 0x01	; 1
    131c:	9c 93       	st	X, r25
    131e:	8e 93       	st	-X, r24
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	93 81       	ldd	r25, Z+3	; 0x03
    1324:	13 96       	adiw	r26, 0x03	; 3
    1326:	9c 93       	st	X, r25
    1328:	8e 93       	st	-X, r24
    132a:	12 97       	sbiw	r26, 0x02	; 2
    132c:	e0 e0       	ldi	r30, 0x00	; 0
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	d8 01       	movw	r26, r16
    1332:	12 96       	adiw	r26, 0x02	; 2
    1334:	8d 91       	ld	r24, X+
    1336:	9c 91       	ld	r25, X
    1338:	13 97       	sbiw	r26, 0x03	; 3
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	19 f0       	breq	.+6      	; 0x1344 <free+0xf0>
    133e:	f8 01       	movw	r30, r16
    1340:	8c 01       	movw	r16, r24
    1342:	f6 cf       	rjmp	.-20     	; 0x1330 <free+0xdc>
    1344:	8d 91       	ld	r24, X+
    1346:	9c 91       	ld	r25, X
    1348:	98 01       	movw	r18, r16
    134a:	2e 5f       	subi	r18, 0xFE	; 254
    134c:	3f 4f       	sbci	r19, 0xFF	; 255
    134e:	82 0f       	add	r24, r18
    1350:	93 1f       	adc	r25, r19
    1352:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <__brkval>
    1356:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <__brkval+0x1>
    135a:	28 17       	cp	r18, r24
    135c:	39 07       	cpc	r19, r25
    135e:	69 f4       	brne	.+26     	; 0x137a <free+0x126>
    1360:	30 97       	sbiw	r30, 0x00	; 0
    1362:	29 f4       	brne	.+10     	; 0x136e <free+0x11a>
    1364:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <__flp+0x1>
    1368:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__flp>
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <free+0x11e>
    136e:	13 82       	std	Z+3, r1	; 0x03
    1370:	12 82       	std	Z+2, r1	; 0x02
    1372:	10 93 ab 01 	sts	0x01AB, r17	; 0x8001ab <__brkval+0x1>
    1376:	00 93 aa 01 	sts	0x01AA, r16	; 0x8001aa <__brkval>
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	08 95       	ret

00001384 <do_rand>:
    1384:	8f 92       	push	r8
    1386:	9f 92       	push	r9
    1388:	af 92       	push	r10
    138a:	bf 92       	push	r11
    138c:	cf 92       	push	r12
    138e:	df 92       	push	r13
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	ec 01       	movw	r28, r24
    139a:	68 81       	ld	r22, Y
    139c:	79 81       	ldd	r23, Y+1	; 0x01
    139e:	8a 81       	ldd	r24, Y+2	; 0x02
    13a0:	9b 81       	ldd	r25, Y+3	; 0x03
    13a2:	61 15       	cp	r22, r1
    13a4:	71 05       	cpc	r23, r1
    13a6:	81 05       	cpc	r24, r1
    13a8:	91 05       	cpc	r25, r1
    13aa:	21 f4       	brne	.+8      	; 0x13b4 <do_rand+0x30>
    13ac:	64 e2       	ldi	r22, 0x24	; 36
    13ae:	79 ed       	ldi	r23, 0xD9	; 217
    13b0:	8b e5       	ldi	r24, 0x5B	; 91
    13b2:	97 e0       	ldi	r25, 0x07	; 7
    13b4:	2d e1       	ldi	r18, 0x1D	; 29
    13b6:	33 ef       	ldi	r19, 0xF3	; 243
    13b8:	41 e0       	ldi	r20, 0x01	; 1
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	38 d0       	rcall	.+112    	; 0x142e <__divmodsi4>
    13be:	49 01       	movw	r8, r18
    13c0:	5a 01       	movw	r10, r20
    13c2:	9b 01       	movw	r18, r22
    13c4:	ac 01       	movw	r20, r24
    13c6:	a7 ea       	ldi	r26, 0xA7	; 167
    13c8:	b1 e4       	ldi	r27, 0x41	; 65
    13ca:	4d d0       	rcall	.+154    	; 0x1466 <__muluhisi3>
    13cc:	6b 01       	movw	r12, r22
    13ce:	7c 01       	movw	r14, r24
    13d0:	ac ee       	ldi	r26, 0xEC	; 236
    13d2:	b4 ef       	ldi	r27, 0xF4	; 244
    13d4:	a5 01       	movw	r20, r10
    13d6:	94 01       	movw	r18, r8
    13d8:	52 d0       	rcall	.+164    	; 0x147e <__mulohisi3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	8c 0d       	add	r24, r12
    13e0:	9d 1d       	adc	r25, r13
    13e2:	ae 1d       	adc	r26, r14
    13e4:	bf 1d       	adc	r27, r15
    13e6:	b7 ff       	sbrs	r27, 7
    13e8:	03 c0       	rjmp	.+6      	; 0x13f0 <do_rand+0x6c>
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	a1 09       	sbc	r26, r1
    13ee:	b0 48       	sbci	r27, 0x80	; 128
    13f0:	88 83       	st	Y, r24
    13f2:	99 83       	std	Y+1, r25	; 0x01
    13f4:	aa 83       	std	Y+2, r26	; 0x02
    13f6:	bb 83       	std	Y+3, r27	; 0x03
    13f8:	9f 77       	andi	r25, 0x7F	; 127
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	ff 90       	pop	r15
    1400:	ef 90       	pop	r14
    1402:	df 90       	pop	r13
    1404:	cf 90       	pop	r12
    1406:	bf 90       	pop	r11
    1408:	af 90       	pop	r10
    140a:	9f 90       	pop	r9
    140c:	8f 90       	pop	r8
    140e:	08 95       	ret

00001410 <rand_r>:
    1410:	b9 cf       	rjmp	.-142    	; 0x1384 <do_rand>

00001412 <rand>:
    1412:	86 e0       	ldi	r24, 0x06	; 6
    1414:	91 e0       	ldi	r25, 0x01	; 1
    1416:	b6 cf       	rjmp	.-148    	; 0x1384 <do_rand>

00001418 <srand>:
    1418:	a0 e0       	ldi	r26, 0x00	; 0
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    1420:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    1424:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    1428:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    142c:	08 95       	ret

0000142e <__divmodsi4>:
    142e:	05 2e       	mov	r0, r21
    1430:	97 fb       	bst	r25, 7
    1432:	16 f4       	brtc	.+4      	; 0x1438 <__divmodsi4+0xa>
    1434:	00 94       	com	r0
    1436:	0f d0       	rcall	.+30     	; 0x1456 <__negsi2>
    1438:	57 fd       	sbrc	r21, 7
    143a:	05 d0       	rcall	.+10     	; 0x1446 <__divmodsi4_neg2>
    143c:	40 de       	rcall	.-896    	; 0x10be <__udivmodsi4>
    143e:	07 fc       	sbrc	r0, 7
    1440:	02 d0       	rcall	.+4      	; 0x1446 <__divmodsi4_neg2>
    1442:	46 f4       	brtc	.+16     	; 0x1454 <__divmodsi4_exit>
    1444:	08 c0       	rjmp	.+16     	; 0x1456 <__negsi2>

00001446 <__divmodsi4_neg2>:
    1446:	50 95       	com	r21
    1448:	40 95       	com	r20
    144a:	30 95       	com	r19
    144c:	21 95       	neg	r18
    144e:	3f 4f       	sbci	r19, 0xFF	; 255
    1450:	4f 4f       	sbci	r20, 0xFF	; 255
    1452:	5f 4f       	sbci	r21, 0xFF	; 255

00001454 <__divmodsi4_exit>:
    1454:	08 95       	ret

00001456 <__negsi2>:
    1456:	90 95       	com	r25
    1458:	80 95       	com	r24
    145a:	70 95       	com	r23
    145c:	61 95       	neg	r22
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	8f 4f       	sbci	r24, 0xFF	; 255
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	08 95       	ret

00001466 <__muluhisi3>:
    1466:	0f d0       	rcall	.+30     	; 0x1486 <__umulhisi3>
    1468:	a5 9f       	mul	r26, r21
    146a:	90 0d       	add	r25, r0
    146c:	b4 9f       	mul	r27, r20
    146e:	90 0d       	add	r25, r0
    1470:	a4 9f       	mul	r26, r20
    1472:	80 0d       	add	r24, r0
    1474:	91 1d       	adc	r25, r1
    1476:	11 24       	eor	r1, r1
    1478:	08 95       	ret

0000147a <__mulshisi3>:
    147a:	b7 ff       	sbrs	r27, 7
    147c:	f4 cf       	rjmp	.-24     	; 0x1466 <__muluhisi3>

0000147e <__mulohisi3>:
    147e:	f3 df       	rcall	.-26     	; 0x1466 <__muluhisi3>
    1480:	82 1b       	sub	r24, r18
    1482:	93 0b       	sbc	r25, r19
    1484:	08 95       	ret

00001486 <__umulhisi3>:
    1486:	a2 9f       	mul	r26, r18
    1488:	b0 01       	movw	r22, r0
    148a:	b3 9f       	mul	r27, r19
    148c:	c0 01       	movw	r24, r0
    148e:	a3 9f       	mul	r26, r19
    1490:	70 0d       	add	r23, r0
    1492:	81 1d       	adc	r24, r1
    1494:	11 24       	eor	r1, r1
    1496:	91 1d       	adc	r25, r1
    1498:	b2 9f       	mul	r27, r18
    149a:	70 0d       	add	r23, r0
    149c:	81 1d       	adc	r24, r1
    149e:	11 24       	eor	r1, r1
    14a0:	91 1d       	adc	r25, r1
    14a2:	08 95       	ret

000014a4 <_exit>:
    14a4:	f8 94       	cli

000014a6 <__stop_program>:
    14a6:	ff cf       	rjmp	.-2      	; 0x14a6 <__stop_program>
