
xzhou016_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  0000123c  000012d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000123c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  0080015a  0080015a  0000132a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000132a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000135c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a3f  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001b2  00000000  00000000  00001ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d50  00000000  00000000  00002095  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  00002de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ff  00000000  00000000  0000320c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e3  00000000  00000000  0000380b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000040ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e3       	ldi	r30, 0x3C	; 60
      a0:	f2 e1       	ldi	r31, 0x12	; 18
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 35       	cpi	r26, 0x5A	; 90
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	aa e5       	ldi	r26, 0x5A	; 90
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 3a       	cpi	r26, 0xAB	; 171
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	b5 d5       	rcall	.+2922   	; 0xc2e <main>
      c4:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <LCD_ClearScreen>:
		Q->front %= Q->capacity;		// Modulate according to queue capacity
		Q->num_objects--;				// Decrement number of objects
		return tmp;						// Return data
	}
	return '\0';						// Else return null to indicate empty
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	18 d0       	rcall	.+48     	; 0x106 <LCD_WriteCommand>
      d6:	df 91       	pop	r29
      d8:	cf 91       	pop	r28
      da:	08 95       	ret

000000dc <LCD_init>:
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
      e4:	84 e6       	ldi	r24, 0x64	; 100
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	a6 d0       	rcall	.+332    	; 0x236 <delay_ms>
      ea:	88 e3       	ldi	r24, 0x38	; 56
      ec:	0c d0       	rcall	.+24     	; 0x106 <LCD_WriteCommand>
      ee:	86 e0       	ldi	r24, 0x06	; 6
      f0:	0a d0       	rcall	.+20     	; 0x106 <LCD_WriteCommand>
      f2:	8f e0       	ldi	r24, 0x0F	; 15
      f4:	08 d0       	rcall	.+16     	; 0x106 <LCD_WriteCommand>
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	06 d0       	rcall	.+12     	; 0x106 <LCD_WriteCommand>
      fa:	8a e0       	ldi	r24, 0x0A	; 10
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	9b d0       	rcall	.+310    	; 0x236 <delay_ms>
     100:	df 91       	pop	r29
     102:	cf 91       	pop	r28
     104:	08 95       	ret

00000106 <LCD_WriteCommand>:
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	1f 92       	push	r1
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	89 83       	std	Y+1, r24	; 0x01
     112:	8b e2       	ldi	r24, 0x2B	; 43
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	2b e2       	ldi	r18, 0x2B	; 43
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	f9 01       	movw	r30, r18
     11c:	20 81       	ld	r18, Z
     11e:	2f 7b       	andi	r18, 0xBF	; 191
     120:	fc 01       	movw	r30, r24
     122:	20 83       	st	Z, r18
     124:	85 e2       	ldi	r24, 0x25	; 37
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	29 81       	ldd	r18, Y+1	; 0x01
     12a:	fc 01       	movw	r30, r24
     12c:	20 83       	st	Z, r18
     12e:	8b e2       	ldi	r24, 0x2B	; 43
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	2b e2       	ldi	r18, 0x2B	; 43
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	f9 01       	movw	r30, r18
     138:	20 81       	ld	r18, Z
     13a:	20 68       	ori	r18, 0x80	; 128
     13c:	fc 01       	movw	r30, r24
     13e:	20 83       	st	Z, r18
     140:	00 00       	nop
     142:	8b e2       	ldi	r24, 0x2B	; 43
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	2b e2       	ldi	r18, 0x2B	; 43
     148:	30 e0       	ldi	r19, 0x00	; 0
     14a:	f9 01       	movw	r30, r18
     14c:	20 81       	ld	r18, Z
     14e:	2f 77       	andi	r18, 0x7F	; 127
     150:	fc 01       	movw	r30, r24
     152:	20 83       	st	Z, r18
     154:	82 e0       	ldi	r24, 0x02	; 2
     156:	90 e0       	ldi	r25, 0x00	; 0
     158:	6e d0       	rcall	.+220    	; 0x236 <delay_ms>
     15a:	0f 90       	pop	r0
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	08 95       	ret

00000162 <LCD_WriteData>:
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	1f 92       	push	r1
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	89 83       	std	Y+1, r24	; 0x01
     16e:	8b e2       	ldi	r24, 0x2B	; 43
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	2b e2       	ldi	r18, 0x2B	; 43
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	f9 01       	movw	r30, r18
     178:	20 81       	ld	r18, Z
     17a:	20 64       	ori	r18, 0x40	; 64
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18
     180:	85 e2       	ldi	r24, 0x25	; 37
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	29 81       	ldd	r18, Y+1	; 0x01
     186:	fc 01       	movw	r30, r24
     188:	20 83       	st	Z, r18
     18a:	8b e2       	ldi	r24, 0x2B	; 43
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	2b e2       	ldi	r18, 0x2B	; 43
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	f9 01       	movw	r30, r18
     194:	20 81       	ld	r18, Z
     196:	20 68       	ori	r18, 0x80	; 128
     198:	fc 01       	movw	r30, r24
     19a:	20 83       	st	Z, r18
     19c:	00 00       	nop
     19e:	8b e2       	ldi	r24, 0x2B	; 43
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	2b e2       	ldi	r18, 0x2B	; 43
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	f9 01       	movw	r30, r18
     1a8:	20 81       	ld	r18, Z
     1aa:	2f 77       	andi	r18, 0x7F	; 127
     1ac:	fc 01       	movw	r30, r24
     1ae:	20 83       	st	Z, r18
     1b0:	81 e0       	ldi	r24, 0x01	; 1
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	40 d0       	rcall	.+128    	; 0x236 <delay_ms>
     1b6:	0f 90       	pop	r0
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	08 95       	ret

000001be <LCD_DisplayString>:
     1be:	cf 93       	push	r28
     1c0:	df 93       	push	r29
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <LCD_DisplayString+0x6>
     1c4:	00 d0       	rcall	.+0      	; 0x1c6 <LCD_DisplayString+0x8>
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	8a 83       	std	Y+2, r24	; 0x02
     1cc:	7c 83       	std	Y+4, r23	; 0x04
     1ce:	6b 83       	std	Y+3, r22	; 0x03
     1d0:	8a 81       	ldd	r24, Y+2	; 0x02
     1d2:	89 83       	std	Y+1, r24	; 0x01
     1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <LCD_DisplayString+0x36>
     1d6:	89 81       	ldd	r24, Y+1	; 0x01
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	98 0f       	add	r25, r24
     1dc:	99 83       	std	Y+1, r25	; 0x01
     1de:	17 d0       	rcall	.+46     	; 0x20e <LCD_Cursor>
     1e0:	8b 81       	ldd	r24, Y+3	; 0x03
     1e2:	9c 81       	ldd	r25, Y+4	; 0x04
     1e4:	9c 01       	movw	r18, r24
     1e6:	2f 5f       	subi	r18, 0xFF	; 255
     1e8:	3f 4f       	sbci	r19, 0xFF	; 255
     1ea:	3c 83       	std	Y+4, r19	; 0x04
     1ec:	2b 83       	std	Y+3, r18	; 0x03
     1ee:	fc 01       	movw	r30, r24
     1f0:	80 81       	ld	r24, Z
     1f2:	b7 df       	rcall	.-146    	; 0x162 <LCD_WriteData>
     1f4:	8b 81       	ldd	r24, Y+3	; 0x03
     1f6:	9c 81       	ldd	r25, Y+4	; 0x04
     1f8:	fc 01       	movw	r30, r24
     1fa:	80 81       	ld	r24, Z
     1fc:	88 23       	and	r24, r24
     1fe:	59 f7       	brne	.-42     	; 0x1d6 <LCD_DisplayString+0x18>
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	0f 90       	pop	r0
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <LCD_Cursor>:
     20e:	cf 93       	push	r28
     210:	df 93       	push	r29
     212:	1f 92       	push	r1
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	89 83       	std	Y+1, r24	; 0x01
     21a:	89 81       	ldd	r24, Y+1	; 0x01
     21c:	81 31       	cpi	r24, 0x11	; 17
     21e:	20 f4       	brcc	.+8      	; 0x228 <LCD_Cursor+0x1a>
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	81 58       	subi	r24, 0x81	; 129
     224:	70 df       	rcall	.-288    	; 0x106 <LCD_WriteCommand>
     226:	03 c0       	rjmp	.+6      	; 0x22e <LCD_Cursor+0x20>
     228:	89 81       	ldd	r24, Y+1	; 0x01
     22a:	81 55       	subi	r24, 0x51	; 81
     22c:	6c df       	rcall	.-296    	; 0x106 <LCD_WriteCommand>
     22e:	0f 90       	pop	r0
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <delay_ms>:
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	00 d0       	rcall	.+0      	; 0x23c <delay_ms+0x6>
     23c:	00 d0       	rcall	.+0      	; 0x23e <delay_ms+0x8>
     23e:	00 d0       	rcall	.+0      	; 0x240 <delay_ms+0xa>
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
     244:	9e 83       	std	Y+6, r25	; 0x06
     246:	8d 83       	std	Y+5, r24	; 0x05
     248:	1a 82       	std	Y+2, r1	; 0x02
     24a:	19 82       	std	Y+1, r1	; 0x01
     24c:	13 c0       	rjmp	.+38     	; 0x274 <delay_ms+0x3e>
     24e:	1c 82       	std	Y+4, r1	; 0x04
     250:	1b 82       	std	Y+3, r1	; 0x03
     252:	06 c0       	rjmp	.+12     	; 0x260 <delay_ms+0x2a>
     254:	00 00       	nop
     256:	8b 81       	ldd	r24, Y+3	; 0x03
     258:	9c 81       	ldd	r25, Y+4	; 0x04
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	9c 83       	std	Y+4, r25	; 0x04
     25e:	8b 83       	std	Y+3, r24	; 0x03
     260:	8b 81       	ldd	r24, Y+3	; 0x03
     262:	9c 81       	ldd	r25, Y+4	; 0x04
     264:	87 30       	cpi	r24, 0x07	; 7
     266:	93 40       	sbci	r25, 0x03	; 3
     268:	ac f3       	brlt	.-22     	; 0x254 <delay_ms+0x1e>
     26a:	89 81       	ldd	r24, Y+1	; 0x01
     26c:	9a 81       	ldd	r25, Y+2	; 0x02
     26e:	01 96       	adiw	r24, 0x01	; 1
     270:	9a 83       	std	Y+2, r25	; 0x02
     272:	89 83       	std	Y+1, r24	; 0x01
     274:	29 81       	ldd	r18, Y+1	; 0x01
     276:	3a 81       	ldd	r19, Y+2	; 0x02
     278:	8d 81       	ldd	r24, Y+5	; 0x05
     27a:	9e 81       	ldd	r25, Y+6	; 0x06
     27c:	28 17       	cp	r18, r24
     27e:	39 07       	cpc	r19, r25
     280:	34 f3       	brlt	.-52     	; 0x24e <delay_ms+0x18>
     282:	26 96       	adiw	r28, 0x06	; 6
     284:	0f b6       	in	r0, 0x3f	; 63
     286:	f8 94       	cli
     288:	de bf       	out	0x3e, r29	; 62
     28a:	0f be       	out	0x3f, r0	; 63
     28c:	cd bf       	out	0x3d, r28	; 61
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <GetBit>:
     294:	cf 93       	push	r28
     296:	df 93       	push	r29
     298:	00 d0       	rcall	.+0      	; 0x29a <GetBit+0x6>
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	89 83       	std	Y+1, r24	; 0x01
     2a0:	6a 83       	std	Y+2, r22	; 0x02
     2a2:	8a 81       	ldd	r24, Y+2	; 0x02
     2a4:	28 2f       	mov	r18, r24
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <GetBit+0x1e>
     2ae:	88 0f       	add	r24, r24
     2b0:	99 1f       	adc	r25, r25
     2b2:	2a 95       	dec	r18
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <GetBit+0x1a>
     2b6:	98 2f       	mov	r25, r24
     2b8:	89 81       	ldd	r24, Y+1	; 0x01
     2ba:	89 23       	and	r24, r25
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <TimerSet>:
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <TimerSet+0x6>
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <TimerSet+0x8>
     2ce:	cd b7       	in	r28, 0x3d	; 61
     2d0:	de b7       	in	r29, 0x3e	; 62
     2d2:	69 83       	std	Y+1, r22	; 0x01
     2d4:	7a 83       	std	Y+2, r23	; 0x02
     2d6:	8b 83       	std	Y+3, r24	; 0x03
     2d8:	9c 83       	std	Y+4, r25	; 0x04
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	9a 81       	ldd	r25, Y+2	; 0x02
     2de:	ab 81       	ldd	r26, Y+3	; 0x03
     2e0:	bc 81       	ldd	r27, Y+4	; 0x04
     2e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M>
     2e6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x1>
     2ea:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <_avr_timer_M+0x2>
     2ee:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <_avr_timer_M+0x3>
     2f2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     2f6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     2fa:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     2fe:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     302:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <_avr_timer_cntcurr>
     306:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <_avr_timer_cntcurr+0x1>
     30a:	a0 93 5d 01 	sts	0x015D, r26	; 0x80015d <_avr_timer_cntcurr+0x2>
     30e:	b0 93 5e 01 	sts	0x015E, r27	; 0x80015e <_avr_timer_cntcurr+0x3>
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	0f 90       	pop	r0
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret

00000320 <TimerOn>:
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62
     328:	81 e8       	ldi	r24, 0x81	; 129
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	2b e0       	ldi	r18, 0x0B	; 11
     32e:	fc 01       	movw	r30, r24
     330:	20 83       	st	Z, r18
     332:	88 e8       	ldi	r24, 0x88	; 136
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	2d e7       	ldi	r18, 0x7D	; 125
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	fc 01       	movw	r30, r24
     33c:	31 83       	std	Z+1, r19	; 0x01
     33e:	20 83       	st	Z, r18
     340:	8f e6       	ldi	r24, 0x6F	; 111
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	22 e0       	ldi	r18, 0x02	; 2
     346:	fc 01       	movw	r30, r24
     348:	20 83       	st	Z, r18
     34a:	84 e8       	ldi	r24, 0x84	; 132
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	fc 01       	movw	r30, r24
     350:	11 82       	std	Z+1, r1	; 0x01
     352:	10 82       	st	Z, r1
     354:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     358:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     35c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     360:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     364:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <_avr_timer_cntcurr>
     368:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <_avr_timer_cntcurr+0x1>
     36c:	a0 93 5d 01 	sts	0x015D, r26	; 0x80015d <_avr_timer_cntcurr+0x2>
     370:	b0 93 5e 01 	sts	0x015E, r27	; 0x80015e <_avr_timer_cntcurr+0x3>
     374:	8f e5       	ldi	r24, 0x5F	; 95
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	2f e5       	ldi	r18, 0x5F	; 95
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	f9 01       	movw	r30, r18
     37e:	20 81       	ld	r18, Z
     380:	20 68       	ori	r18, 0x80	; 128
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <TimerISR>:
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <__vector_13>:
     3a0:	1f 92       	push	r1
     3a2:	0f 92       	push	r0
     3a4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     3b0:	0f 92       	push	r0
     3b2:	2f 93       	push	r18
     3b4:	3f 93       	push	r19
     3b6:	4f 93       	push	r20
     3b8:	5f 93       	push	r21
     3ba:	6f 93       	push	r22
     3bc:	7f 93       	push	r23
     3be:	8f 93       	push	r24
     3c0:	9f 93       	push	r25
     3c2:	af 93       	push	r26
     3c4:	bf 93       	push	r27
     3c6:	ef 93       	push	r30
     3c8:	ff 93       	push	r31
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
     3d2:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <_avr_timer_cntcurr>
     3d6:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <_avr_timer_cntcurr+0x1>
     3da:	a0 91 5d 01 	lds	r26, 0x015D	; 0x80015d <_avr_timer_cntcurr+0x2>
     3de:	b0 91 5e 01 	lds	r27, 0x015E	; 0x80015e <_avr_timer_cntcurr+0x3>
     3e2:	01 97       	sbiw	r24, 0x01	; 1
     3e4:	a1 09       	sbc	r26, r1
     3e6:	b1 09       	sbc	r27, r1
     3e8:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <_avr_timer_cntcurr>
     3ec:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <_avr_timer_cntcurr+0x1>
     3f0:	a0 93 5d 01 	sts	0x015D, r26	; 0x80015d <_avr_timer_cntcurr+0x2>
     3f4:	b0 93 5e 01 	sts	0x015E, r27	; 0x80015e <_avr_timer_cntcurr+0x3>
     3f8:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <_avr_timer_cntcurr>
     3fc:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <_avr_timer_cntcurr+0x1>
     400:	a0 91 5d 01 	lds	r26, 0x015D	; 0x80015d <_avr_timer_cntcurr+0x2>
     404:	b0 91 5e 01 	lds	r27, 0x015E	; 0x80015e <_avr_timer_cntcurr+0x3>
     408:	89 2b       	or	r24, r25
     40a:	8a 2b       	or	r24, r26
     40c:	8b 2b       	or	r24, r27
     40e:	89 f4       	brne	.+34     	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
     410:	bd df       	rcall	.-134    	; 0x38c <TimerISR>
     412:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     416:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     41a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     41e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     422:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <_avr_timer_cntcurr>
     426:	90 93 5c 01 	sts	0x015C, r25	; 0x80015c <_avr_timer_cntcurr+0x1>
     42a:	a0 93 5d 01 	sts	0x015D, r26	; 0x80015d <_avr_timer_cntcurr+0x2>
     42e:	b0 93 5e 01 	sts	0x015E, r27	; 0x80015e <_avr_timer_cntcurr+0x3>
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	bf 91       	pop	r27
     43c:	af 91       	pop	r26
     43e:	9f 91       	pop	r25
     440:	8f 91       	pop	r24
     442:	7f 91       	pop	r23
     444:	6f 91       	pop	r22
     446:	5f 91       	pop	r21
     448:	4f 91       	pop	r20
     44a:	3f 91       	pop	r19
     44c:	2f 91       	pop	r18
     44e:	0f 90       	pop	r0
     450:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     454:	0f 90       	pop	r0
     456:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     45a:	0f 90       	pop	r0
     45c:	1f 90       	pop	r1
     45e:	18 95       	reti

00000460 <findGCD>:
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
     468:	60 97       	sbiw	r28, 0x10	; 16
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	6d 83       	std	Y+5, r22	; 0x05
     476:	7e 83       	std	Y+6, r23	; 0x06
     478:	8f 83       	std	Y+7, r24	; 0x07
     47a:	98 87       	std	Y+8, r25	; 0x08
     47c:	29 87       	std	Y+9, r18	; 0x09
     47e:	3a 87       	std	Y+10, r19	; 0x0a
     480:	4b 87       	std	Y+11, r20	; 0x0b
     482:	5c 87       	std	Y+12, r21	; 0x0c
     484:	8d 81       	ldd	r24, Y+5	; 0x05
     486:	9e 81       	ldd	r25, Y+6	; 0x06
     488:	af 81       	ldd	r26, Y+7	; 0x07
     48a:	b8 85       	ldd	r27, Y+8	; 0x08
     48c:	29 85       	ldd	r18, Y+9	; 0x09
     48e:	3a 85       	ldd	r19, Y+10	; 0x0a
     490:	4b 85       	ldd	r20, Y+11	; 0x0b
     492:	5c 85       	ldd	r21, Y+12	; 0x0c
     494:	bc 01       	movw	r22, r24
     496:	cd 01       	movw	r24, r26
     498:	09 d6       	rcall	.+3090   	; 0x10ac <__udivmodsi4>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	89 83       	std	Y+1, r24	; 0x01
     4a0:	9a 83       	std	Y+2, r25	; 0x02
     4a2:	ab 83       	std	Y+3, r26	; 0x03
     4a4:	bc 83       	std	Y+4, r27	; 0x04
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
     4a8:	9a 81       	ldd	r25, Y+2	; 0x02
     4aa:	ab 81       	ldd	r26, Y+3	; 0x03
     4ac:	bc 81       	ldd	r27, Y+4	; 0x04
     4ae:	89 2b       	or	r24, r25
     4b0:	8a 2b       	or	r24, r26
     4b2:	8b 2b       	or	r24, r27
     4b4:	29 f4       	brne	.+10     	; 0x4c0 <findGCD+0x60>
     4b6:	89 85       	ldd	r24, Y+9	; 0x09
     4b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     4ba:	ab 85       	ldd	r26, Y+11	; 0x0b
     4bc:	bc 85       	ldd	r27, Y+12	; 0x0c
     4be:	11 c0       	rjmp	.+34     	; 0x4e2 <findGCD+0x82>
     4c0:	89 85       	ldd	r24, Y+9	; 0x09
     4c2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c4:	ab 85       	ldd	r26, Y+11	; 0x0b
     4c6:	bc 85       	ldd	r27, Y+12	; 0x0c
     4c8:	8d 83       	std	Y+5, r24	; 0x05
     4ca:	9e 83       	std	Y+6, r25	; 0x06
     4cc:	af 83       	std	Y+7, r26	; 0x07
     4ce:	b8 87       	std	Y+8, r27	; 0x08
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	9a 81       	ldd	r25, Y+2	; 0x02
     4d4:	ab 81       	ldd	r26, Y+3	; 0x03
     4d6:	bc 81       	ldd	r27, Y+4	; 0x04
     4d8:	89 87       	std	Y+9, r24	; 0x09
     4da:	9a 87       	std	Y+10, r25	; 0x0a
     4dc:	ab 87       	std	Y+11, r26	; 0x0b
     4de:	bc 87       	std	Y+12, r27	; 0x0c
     4e0:	d1 cf       	rjmp	.-94     	; 0x484 <findGCD+0x24>
     4e2:	bc 01       	movw	r22, r24
     4e4:	cd 01       	movw	r24, r26
     4e6:	60 96       	adiw	r28, 0x10	; 16
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <GetKeypadKey>:
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	88 e2       	ldi	r24, 0x28	; 40
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	2f ee       	ldi	r18, 0xEF	; 239
     506:	fc 01       	movw	r30, r24
     508:	20 83       	st	Z, r18
     50a:	00 00       	nop
     50c:	86 e2       	ldi	r24, 0x26	; 38
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	fc 01       	movw	r30, r24
     512:	80 81       	ld	r24, Z
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	be de       	rcall	.-644    	; 0x294 <GetBit>
     518:	88 23       	and	r24, r24
     51a:	11 f4       	brne	.+4      	; 0x520 <GetKeypadKey+0x28>
     51c:	81 e3       	ldi	r24, 0x31	; 49
     51e:	a9 c0       	rjmp	.+338    	; 0x672 <GetKeypadKey+0x17a>
     520:	86 e2       	ldi	r24, 0x26	; 38
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	fc 01       	movw	r30, r24
     526:	80 81       	ld	r24, Z
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	b4 de       	rcall	.-664    	; 0x294 <GetBit>
     52c:	88 23       	and	r24, r24
     52e:	11 f4       	brne	.+4      	; 0x534 <GetKeypadKey+0x3c>
     530:	82 e3       	ldi	r24, 0x32	; 50
     532:	9f c0       	rjmp	.+318    	; 0x672 <GetKeypadKey+0x17a>
     534:	86 e2       	ldi	r24, 0x26	; 38
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	fc 01       	movw	r30, r24
     53a:	80 81       	ld	r24, Z
     53c:	62 e0       	ldi	r22, 0x02	; 2
     53e:	aa de       	rcall	.-684    	; 0x294 <GetBit>
     540:	88 23       	and	r24, r24
     542:	11 f4       	brne	.+4      	; 0x548 <GetKeypadKey+0x50>
     544:	83 e3       	ldi	r24, 0x33	; 51
     546:	95 c0       	rjmp	.+298    	; 0x672 <GetKeypadKey+0x17a>
     548:	86 e2       	ldi	r24, 0x26	; 38
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	fc 01       	movw	r30, r24
     54e:	80 81       	ld	r24, Z
     550:	63 e0       	ldi	r22, 0x03	; 3
     552:	a0 de       	rcall	.-704    	; 0x294 <GetBit>
     554:	88 23       	and	r24, r24
     556:	11 f4       	brne	.+4      	; 0x55c <GetKeypadKey+0x64>
     558:	81 e4       	ldi	r24, 0x41	; 65
     55a:	8b c0       	rjmp	.+278    	; 0x672 <GetKeypadKey+0x17a>
     55c:	88 e2       	ldi	r24, 0x28	; 40
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	2f ed       	ldi	r18, 0xDF	; 223
     562:	fc 01       	movw	r30, r24
     564:	20 83       	st	Z, r18
     566:	00 00       	nop
     568:	86 e2       	ldi	r24, 0x26	; 38
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	fc 01       	movw	r30, r24
     56e:	80 81       	ld	r24, Z
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	90 de       	rcall	.-736    	; 0x294 <GetBit>
     574:	88 23       	and	r24, r24
     576:	11 f4       	brne	.+4      	; 0x57c <GetKeypadKey+0x84>
     578:	84 e3       	ldi	r24, 0x34	; 52
     57a:	7b c0       	rjmp	.+246    	; 0x672 <GetKeypadKey+0x17a>
     57c:	86 e2       	ldi	r24, 0x26	; 38
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	fc 01       	movw	r30, r24
     582:	80 81       	ld	r24, Z
     584:	61 e0       	ldi	r22, 0x01	; 1
     586:	86 de       	rcall	.-756    	; 0x294 <GetBit>
     588:	88 23       	and	r24, r24
     58a:	11 f4       	brne	.+4      	; 0x590 <GetKeypadKey+0x98>
     58c:	85 e3       	ldi	r24, 0x35	; 53
     58e:	71 c0       	rjmp	.+226    	; 0x672 <GetKeypadKey+0x17a>
     590:	86 e2       	ldi	r24, 0x26	; 38
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	fc 01       	movw	r30, r24
     596:	80 81       	ld	r24, Z
     598:	62 e0       	ldi	r22, 0x02	; 2
     59a:	7c de       	rcall	.-776    	; 0x294 <GetBit>
     59c:	88 23       	and	r24, r24
     59e:	11 f4       	brne	.+4      	; 0x5a4 <GetKeypadKey+0xac>
     5a0:	86 e3       	ldi	r24, 0x36	; 54
     5a2:	67 c0       	rjmp	.+206    	; 0x672 <GetKeypadKey+0x17a>
     5a4:	86 e2       	ldi	r24, 0x26	; 38
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	fc 01       	movw	r30, r24
     5aa:	80 81       	ld	r24, Z
     5ac:	63 e0       	ldi	r22, 0x03	; 3
     5ae:	72 de       	rcall	.-796    	; 0x294 <GetBit>
     5b0:	88 23       	and	r24, r24
     5b2:	11 f4       	brne	.+4      	; 0x5b8 <GetKeypadKey+0xc0>
     5b4:	82 e4       	ldi	r24, 0x42	; 66
     5b6:	5d c0       	rjmp	.+186    	; 0x672 <GetKeypadKey+0x17a>
     5b8:	88 e2       	ldi	r24, 0x28	; 40
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	2f eb       	ldi	r18, 0xBF	; 191
     5be:	fc 01       	movw	r30, r24
     5c0:	20 83       	st	Z, r18
     5c2:	00 00       	nop
     5c4:	86 e2       	ldi	r24, 0x26	; 38
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	fc 01       	movw	r30, r24
     5ca:	80 81       	ld	r24, Z
     5cc:	60 e0       	ldi	r22, 0x00	; 0
     5ce:	62 de       	rcall	.-828    	; 0x294 <GetBit>
     5d0:	88 23       	and	r24, r24
     5d2:	11 f4       	brne	.+4      	; 0x5d8 <GetKeypadKey+0xe0>
     5d4:	87 e3       	ldi	r24, 0x37	; 55
     5d6:	4d c0       	rjmp	.+154    	; 0x672 <GetKeypadKey+0x17a>
     5d8:	86 e2       	ldi	r24, 0x26	; 38
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	fc 01       	movw	r30, r24
     5de:	80 81       	ld	r24, Z
     5e0:	61 e0       	ldi	r22, 0x01	; 1
     5e2:	58 de       	rcall	.-848    	; 0x294 <GetBit>
     5e4:	88 23       	and	r24, r24
     5e6:	11 f4       	brne	.+4      	; 0x5ec <GetKeypadKey+0xf4>
     5e8:	88 e3       	ldi	r24, 0x38	; 56
     5ea:	43 c0       	rjmp	.+134    	; 0x672 <GetKeypadKey+0x17a>
     5ec:	86 e2       	ldi	r24, 0x26	; 38
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	fc 01       	movw	r30, r24
     5f2:	80 81       	ld	r24, Z
     5f4:	62 e0       	ldi	r22, 0x02	; 2
     5f6:	4e de       	rcall	.-868    	; 0x294 <GetBit>
     5f8:	88 23       	and	r24, r24
     5fa:	11 f4       	brne	.+4      	; 0x600 <GetKeypadKey+0x108>
     5fc:	89 e3       	ldi	r24, 0x39	; 57
     5fe:	39 c0       	rjmp	.+114    	; 0x672 <GetKeypadKey+0x17a>
     600:	86 e2       	ldi	r24, 0x26	; 38
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	fc 01       	movw	r30, r24
     606:	80 81       	ld	r24, Z
     608:	63 e0       	ldi	r22, 0x03	; 3
     60a:	44 de       	rcall	.-888    	; 0x294 <GetBit>
     60c:	88 23       	and	r24, r24
     60e:	11 f4       	brne	.+4      	; 0x614 <GetKeypadKey+0x11c>
     610:	83 e4       	ldi	r24, 0x43	; 67
     612:	2f c0       	rjmp	.+94     	; 0x672 <GetKeypadKey+0x17a>
     614:	88 e2       	ldi	r24, 0x28	; 40
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	2f e7       	ldi	r18, 0x7F	; 127
     61a:	fc 01       	movw	r30, r24
     61c:	20 83       	st	Z, r18
     61e:	00 00       	nop
     620:	86 e2       	ldi	r24, 0x26	; 38
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	fc 01       	movw	r30, r24
     626:	80 81       	ld	r24, Z
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	34 de       	rcall	.-920    	; 0x294 <GetBit>
     62c:	88 23       	and	r24, r24
     62e:	11 f4       	brne	.+4      	; 0x634 <GetKeypadKey+0x13c>
     630:	8a e2       	ldi	r24, 0x2A	; 42
     632:	1f c0       	rjmp	.+62     	; 0x672 <GetKeypadKey+0x17a>
     634:	86 e2       	ldi	r24, 0x26	; 38
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	fc 01       	movw	r30, r24
     63a:	80 81       	ld	r24, Z
     63c:	61 e0       	ldi	r22, 0x01	; 1
     63e:	2a de       	rcall	.-940    	; 0x294 <GetBit>
     640:	88 23       	and	r24, r24
     642:	11 f4       	brne	.+4      	; 0x648 <GetKeypadKey+0x150>
     644:	80 e3       	ldi	r24, 0x30	; 48
     646:	15 c0       	rjmp	.+42     	; 0x672 <GetKeypadKey+0x17a>
     648:	86 e2       	ldi	r24, 0x26	; 38
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	fc 01       	movw	r30, r24
     64e:	80 81       	ld	r24, Z
     650:	62 e0       	ldi	r22, 0x02	; 2
     652:	20 de       	rcall	.-960    	; 0x294 <GetBit>
     654:	88 23       	and	r24, r24
     656:	11 f4       	brne	.+4      	; 0x65c <GetKeypadKey+0x164>
     658:	83 e2       	ldi	r24, 0x23	; 35
     65a:	0b c0       	rjmp	.+22     	; 0x672 <GetKeypadKey+0x17a>
     65c:	86 e2       	ldi	r24, 0x26	; 38
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	fc 01       	movw	r30, r24
     662:	80 81       	ld	r24, Z
     664:	63 e0       	ldi	r22, 0x03	; 3
     666:	16 de       	rcall	.-980    	; 0x294 <GetBit>
     668:	88 23       	and	r24, r24
     66a:	11 f4       	brne	.+4      	; 0x670 <GetKeypadKey+0x178>
     66c:	84 e4       	ldi	r24, 0x44	; 68
     66e:	01 c0       	rjmp	.+2      	; 0x672 <GetKeypadKey+0x17a>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <arrayShift>:

#ifndef OBSTACLEGENERATOR_H_
#define OBSTACLEGENERATOR_H_

void arrayShift(unsigned char shift)
{
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	00 d0       	rcall	.+0      	; 0x67e <arrayShift+0x6>
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	8a 83       	std	Y+2, r24	; 0x02
	for (unsigned char i = shift ; i > 0; i--)
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	89 83       	std	Y+1, r24	; 0x01
     688:	23 c0       	rjmp	.+70     	; 0x6d0 <arrayShift+0x58>
	{
		row1[i] = row1[i - 1];
     68a:	89 81       	ldd	r24, Y+1	; 0x01
     68c:	88 2f       	mov	r24, r24
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	29 81       	ldd	r18, Y+1	; 0x01
     692:	22 2f       	mov	r18, r18
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	21 50       	subi	r18, 0x01	; 1
     698:	31 09       	sbc	r19, r1
     69a:	28 5f       	subi	r18, 0xF8	; 248
     69c:	3e 4f       	sbci	r19, 0xFE	; 254
     69e:	f9 01       	movw	r30, r18
     6a0:	20 81       	ld	r18, Z
     6a2:	88 5f       	subi	r24, 0xF8	; 248
     6a4:	9e 4f       	sbci	r25, 0xFE	; 254
     6a6:	fc 01       	movw	r30, r24
     6a8:	20 83       	st	Z, r18
		row2[i] = row2[i - 1 ];
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	88 2f       	mov	r24, r24
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	29 81       	ldd	r18, Y+1	; 0x01
     6b2:	22 2f       	mov	r18, r18
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	21 50       	subi	r18, 0x01	; 1
     6b8:	31 09       	sbc	r19, r1
     6ba:	27 5e       	subi	r18, 0xE7	; 231
     6bc:	3e 4f       	sbci	r19, 0xFE	; 254
     6be:	f9 01       	movw	r30, r18
     6c0:	20 81       	ld	r18, Z
     6c2:	87 5e       	subi	r24, 0xE7	; 231
     6c4:	9e 4f       	sbci	r25, 0xFE	; 254
     6c6:	fc 01       	movw	r30, r24
     6c8:	20 83       	st	Z, r18
#ifndef OBSTACLEGENERATOR_H_
#define OBSTACLEGENERATOR_H_

void arrayShift(unsigned char shift)
{
	for (unsigned char i = shift ; i > 0; i--)
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	81 50       	subi	r24, 0x01	; 1
     6ce:	89 83       	std	Y+1, r24	; 0x01
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	88 23       	and	r24, r24
     6d4:	d1 f6       	brne	.-76     	; 0x68a <arrayShift+0x12>
	{
		row1[i] = row1[i - 1];
		row2[i] = row2[i - 1 ];
	}
	
}
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	08 95       	ret

000006e0 <clearArray>:

void clearArray(unsigned char arraySize)
{
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	00 d0       	rcall	.+0      	; 0x6e6 <clearArray+0x6>
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	8a 83       	std	Y+2, r24	; 0x02
	for (unsigned char i = 0 ; i < arraySize; i++)
     6ec:	19 82       	std	Y+1, r1	; 0x01
     6ee:	11 c0       	rjmp	.+34     	; 0x712 <clearArray+0x32>
	{
		row1[i] = 0;
     6f0:	89 81       	ldd	r24, Y+1	; 0x01
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	88 5f       	subi	r24, 0xF8	; 248
     6f8:	9e 4f       	sbci	r25, 0xFE	; 254
     6fa:	fc 01       	movw	r30, r24
     6fc:	10 82       	st	Z, r1
		row2[i] = 0;
     6fe:	89 81       	ldd	r24, Y+1	; 0x01
     700:	88 2f       	mov	r24, r24
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	87 5e       	subi	r24, 0xE7	; 231
     706:	9e 4f       	sbci	r25, 0xFE	; 254
     708:	fc 01       	movw	r30, r24
     70a:	10 82       	st	Z, r1
	
}

void clearArray(unsigned char arraySize)
{
	for (unsigned char i = 0 ; i < arraySize; i++)
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	8f 5f       	subi	r24, 0xFF	; 255
     710:	89 83       	std	Y+1, r24	; 0x01
     712:	99 81       	ldd	r25, Y+1	; 0x01
     714:	8a 81       	ldd	r24, Y+2	; 0x02
     716:	98 17       	cp	r25, r24
     718:	58 f3       	brcs	.-42     	; 0x6f0 <clearArray+0x10>
	{
		row1[i] = 0;
		row2[i] = 0;
	}
}
     71a:	0f 90       	pop	r0
     71c:	0f 90       	pop	r0
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <ObstacleGeneratorSM_Tick>:

enum ObstacleGeneratorSM {OGSM_start, OGSM_wait, OGSM_generate} ObstacleGeneratorSM;
int ObstacleGeneratorSM_Tick(int state)
{
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	2a 97       	sbiw	r28, 0x0a	; 10
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	9a 83       	std	Y+2, r25	; 0x02
     73a:	89 83       	std	Y+1, r24	; 0x01
	switch(state) //state transition
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	9a 81       	ldd	r25, Y+2	; 0x02
     740:	81 30       	cpi	r24, 0x01	; 1
     742:	91 05       	cpc	r25, r1
     744:	51 f0       	breq	.+20     	; 0x75a <ObstacleGeneratorSM_Tick+0x36>
     746:	82 30       	cpi	r24, 0x02	; 2
     748:	91 05       	cpc	r25, r1
     74a:	c1 f0       	breq	.+48     	; 0x77c <ObstacleGeneratorSM_Tick+0x58>
     74c:	89 2b       	or	r24, r25
     74e:	11 f5       	brne	.+68     	; 0x794 <ObstacleGeneratorSM_Tick+0x70>
	{
		//keypad_value = GetKeypadKey();
		case OGSM_start: 
			state = OGSM_wait;
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	9a 83       	std	Y+2, r25	; 0x02
     756:	89 83       	std	Y+1, r24	; 0x01
		break;
     758:	20 c0       	rjmp	.+64     	; 0x79a <ObstacleGeneratorSM_Tick+0x76>
		
		case OGSM_wait:
			if ( restart == 1)
     75a:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <restart>
     75e:	81 30       	cpi	r24, 0x01	; 1
     760:	19 f4       	brne	.+6      	; 0x768 <ObstacleGeneratorSM_Tick+0x44>
			{
				state = OGSM_start;
     762:	1a 82       	std	Y+2, r1	; 0x02
     764:	19 82       	std	Y+1, r1	; 0x01
     766:	09 c0       	rjmp	.+18     	; 0x77a <ObstacleGeneratorSM_Tick+0x56>
			}else if (beginGenerate == 1)
     768:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <beginGenerate>
     76c:	81 30       	cpi	r24, 0x01	; 1
     76e:	29 f4       	brne	.+10     	; 0x77a <ObstacleGeneratorSM_Tick+0x56>
			{
				state = OGSM_generate;
     770:	82 e0       	ldi	r24, 0x02	; 2
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	9a 83       	std	Y+2, r25	; 0x02
     776:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     778:	10 c0       	rjmp	.+32     	; 0x79a <ObstacleGeneratorSM_Tick+0x76>
     77a:	0f c0       	rjmp	.+30     	; 0x79a <ObstacleGeneratorSM_Tick+0x76>
		
		case OGSM_generate:
			if (restart == 1)
     77c:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <restart>
     780:	81 30       	cpi	r24, 0x01	; 1
     782:	19 f4       	brne	.+6      	; 0x78a <ObstacleGeneratorSM_Tick+0x66>
			{
				state = OGSM_start;
     784:	1a 82       	std	Y+2, r1	; 0x02
     786:	19 82       	std	Y+1, r1	; 0x01
			}
			else
			{
				state = OGSM_wait;
			}
		break;
     788:	08 c0       	rjmp	.+16     	; 0x79a <ObstacleGeneratorSM_Tick+0x76>
			{
				state = OGSM_start;
			}
			else
			{
				state = OGSM_wait;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	9a 83       	std	Y+2, r25	; 0x02
     790:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     792:	03 c0       	rjmp	.+6      	; 0x79a <ObstacleGeneratorSM_Tick+0x76>
		
		default: 
			state = OGSM_start;
     794:	1a 82       	std	Y+2, r1	; 0x02
     796:	19 82       	std	Y+1, r1	; 0x01
		break;
     798:	00 00       	nop
	}
	
	switch(state) //state actions
     79a:	89 81       	ldd	r24, Y+1	; 0x01
     79c:	9a 81       	ldd	r25, Y+2	; 0x02
     79e:	81 30       	cpi	r24, 0x01	; 1
     7a0:	91 05       	cpc	r25, r1
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <ObstacleGeneratorSM_Tick+0x82>
     7a4:	66 c0       	rjmp	.+204    	; 0x872 <ObstacleGeneratorSM_Tick+0x14e>
     7a6:	82 30       	cpi	r24, 0x02	; 2
     7a8:	91 05       	cpc	r25, r1
     7aa:	61 f0       	breq	.+24     	; 0x7c4 <ObstacleGeneratorSM_Tick+0xa0>
     7ac:	89 2b       	or	r24, r25
     7ae:	09 f0       	breq	.+2      	; 0x7b2 <ObstacleGeneratorSM_Tick+0x8e>
     7b0:	61 c0       	rjmp	.+194    	; 0x874 <ObstacleGeneratorSM_Tick+0x150>
	{
		case OGSM_start:
			str_index				= 1;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <str_index>
			object_generate_prob	= 20;
     7b8:	84 e1       	ldi	r24, 0x14	; 20
     7ba:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <object_generate_prob>
			clearArray(17);
     7be:	81 e1       	ldi	r24, 0x11	; 17
     7c0:	8f df       	rcall	.-226    	; 0x6e0 <clearArray>
		break;
     7c2:	58 c0       	rjmp	.+176    	; 0x874 <ObstacleGeneratorSM_Tick+0x150>
			
		break;
		
		case OGSM_generate: 
			//shift data >> 1
			arrayShift(str_index);
     7c4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <str_index>
     7c8:	57 df       	rcall	.-338    	; 0x678 <arrayShift>
			//generate an obstacle then push into first index
			if ((rand() % object_generate_prob) == 1)
     7ca:	ed d4       	rcall	.+2522   	; 0x11a6 <rand>
     7cc:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <object_generate_prob>
     7d0:	22 2f       	mov	r18, r18
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	b9 01       	movw	r22, r18
     7d6:	57 d4       	rcall	.+2222   	; 0x1086 <__divmodhi4>
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	21 f4       	brne	.+8      	; 0x7e4 <ObstacleGeneratorSM_Tick+0xc0>
			{
				row1[0] = '#';
     7dc:	83 e2       	ldi	r24, 0x23	; 35
     7de:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
     7e2:	10 c0       	rjmp	.+32     	; 0x804 <ObstacleGeneratorSM_Tick+0xe0>
			}
			else if ((rand() % object_generate_prob) == 1)
     7e4:	e0 d4       	rcall	.+2496   	; 0x11a6 <rand>
     7e6:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <object_generate_prob>
     7ea:	22 2f       	mov	r18, r18
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	b9 01       	movw	r22, r18
     7f0:	4a d4       	rcall	.+2196   	; 0x1086 <__divmodhi4>
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	21 f4       	brne	.+8      	; 0x7fe <ObstacleGeneratorSM_Tick+0xda>
			{
				row1[0] = '*';
     7f6:	8a e2       	ldi	r24, 0x2A	; 42
     7f8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
     7fc:	03 c0       	rjmp	.+6      	; 0x804 <ObstacleGeneratorSM_Tick+0xe0>
			}
			else
				row1[0] = ' ';
     7fe:	80 e2       	ldi	r24, 0x20	; 32
     800:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
					
			if ((rand() % object_generate_prob) == 1)
     804:	d0 d4       	rcall	.+2464   	; 0x11a6 <rand>
     806:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <object_generate_prob>
     80a:	22 2f       	mov	r18, r18
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	b9 01       	movw	r22, r18
     810:	3a d4       	rcall	.+2164   	; 0x1086 <__divmodhi4>
     812:	01 97       	sbiw	r24, 0x01	; 1
     814:	21 f4       	brne	.+8      	; 0x81e <ObstacleGeneratorSM_Tick+0xfa>
			{
				row2[0] = '#';
     816:	83 e2       	ldi	r24, 0x23	; 35
     818:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <row2>
     81c:	10 c0       	rjmp	.+32     	; 0x83e <ObstacleGeneratorSM_Tick+0x11a>
			}
			else if ((rand() % object_generate_prob) == 1)
     81e:	c3 d4       	rcall	.+2438   	; 0x11a6 <rand>
     820:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <object_generate_prob>
     824:	22 2f       	mov	r18, r18
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	b9 01       	movw	r22, r18
     82a:	2d d4       	rcall	.+2138   	; 0x1086 <__divmodhi4>
     82c:	01 97       	sbiw	r24, 0x01	; 1
     82e:	21 f4       	brne	.+8      	; 0x838 <ObstacleGeneratorSM_Tick+0x114>
			{
				row2[0] = '*';
     830:	8a e2       	ldi	r24, 0x2A	; 42
     832:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <row2>
     836:	03 c0       	rjmp	.+6      	; 0x83e <ObstacleGeneratorSM_Tick+0x11a>
			}
			else
				row2[0] = ' ';
     838:	80 e2       	ldi	r24, 0x20	; 32
     83a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <row2>
			
			//set the last bit to '\0' to complete string
			if ((row1[16] != '\0' || row2[16] != '\0') && str_index >= 16)
     83e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <row1+0x10>
     842:	88 23       	and	r24, r24
     844:	21 f4       	brne	.+8      	; 0x84e <ObstacleGeneratorSM_Tick+0x12a>
     846:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <row2+0x10>
     84a:	88 23       	and	r24, r24
     84c:	61 f0       	breq	.+24     	; 0x866 <ObstacleGeneratorSM_Tick+0x142>
     84e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <str_index>
     852:	80 31       	cpi	r24, 0x10	; 16
     854:	40 f0       	brcs	.+16     	; 0x866 <ObstacleGeneratorSM_Tick+0x142>
			{
				row1[16] = '\0'; row2[16] = '\0';
     856:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <row1+0x10>
     85a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <row2+0x10>
				str_index = 16;
     85e:	80 e1       	ldi	r24, 0x10	; 16
     860:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <str_index>
			}else str_index++;
			
			
			//arrayCpy(32);
		break;
     864:	07 c0       	rjmp	.+14     	; 0x874 <ObstacleGeneratorSM_Tick+0x150>
			//set the last bit to '\0' to complete string
			if ((row1[16] != '\0' || row2[16] != '\0') && str_index >= 16)
			{
				row1[16] = '\0'; row2[16] = '\0';
				str_index = 16;
			}else str_index++;
     866:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <str_index>
     86a:	8f 5f       	subi	r24, 0xFF	; 255
     86c:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <str_index>
			
			
			//arrayCpy(32);
		break;
     870:	01 c0       	rjmp	.+2      	; 0x874 <ObstacleGeneratorSM_Tick+0x150>
			clearArray(17);
		break;
		
		case OGSM_wait:
			
		break;
     872:	00 00       	nop
			
			//arrayCpy(32);
		break;
	}
	
	return state;
     874:	89 81       	ldd	r24, Y+1	; 0x01
     876:	9a 81       	ldd	r25, Y+2	; 0x02
}
     878:	2a 96       	adiw	r28, 0x0a	; 10
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	f8 94       	cli
     87e:	de bf       	out	0x3e, r29	; 62
     880:	0f be       	out	0x3f, r0	; 63
     882:	cd bf       	out	0x3d, r28	; 61
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <DisplaySM_Tick>:
unsigned char deathAni;
unsigned char debounce2 = 50;
//display global variables
enum displaySM{display_start,display_wait, display_scroll, display_deathAnimation_X, display_dead} displaySM;
int DisplaySM_Tick(int state)
{
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	00 d0       	rcall	.+0      	; 0x890 <DisplaySM_Tick+0x6>
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	9a 83       	std	Y+2, r25	; 0x02
     896:	89 83       	std	Y+1, r24	; 0x01
	switch(state) //state transition
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	9a 81       	ldd	r25, Y+2	; 0x02
     89c:	82 30       	cpi	r24, 0x02	; 2
     89e:	91 05       	cpc	r25, r1
     8a0:	e9 f0       	breq	.+58     	; 0x8dc <DisplaySM_Tick+0x52>
     8a2:	83 30       	cpi	r24, 0x03	; 3
     8a4:	91 05       	cpc	r25, r1
     8a6:	2c f4       	brge	.+10     	; 0x8b2 <DisplaySM_Tick+0x28>
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	49 f0       	breq	.+18     	; 0x8be <DisplaySM_Tick+0x34>
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	61 f0       	breq	.+24     	; 0x8c8 <DisplaySM_Tick+0x3e>
     8b0:	48 c0       	rjmp	.+144    	; 0x942 <DisplaySM_Tick+0xb8>
     8b2:	83 30       	cpi	r24, 0x03	; 3
     8b4:	91 05       	cpc	r25, r1
     8b6:	51 f1       	breq	.+84     	; 0x90c <DisplaySM_Tick+0x82>
     8b8:	04 97       	sbiw	r24, 0x04	; 4
     8ba:	d9 f1       	breq	.+118    	; 0x932 <DisplaySM_Tick+0xa8>
     8bc:	42 c0       	rjmp	.+132    	; 0x942 <DisplaySM_Tick+0xb8>
	{

		case display_start:
				state =  display_wait;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	9a 83       	std	Y+2, r25	; 0x02
     8c4:	89 83       	std	Y+1, r24	; 0x01
		break;
     8c6:	40 c0       	rjmp	.+128    	; 0x948 <DisplaySM_Tick+0xbe>
		
		case display_wait:
			if (keypad_value == '1')
     8c8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <keypad_value>
     8cc:	81 33       	cpi	r24, 0x31	; 49
     8ce:	29 f4       	brne	.+10     	; 0x8da <DisplaySM_Tick+0x50>
			{
				state = display_scroll;
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     8d8:	37 c0       	rjmp	.+110    	; 0x948 <DisplaySM_Tick+0xbe>
     8da:	36 c0       	rjmp	.+108    	; 0x948 <DisplaySM_Tick+0xbe>
		
		case display_scroll:
			if (restart == 1)
     8dc:	80 91 61 01 	lds	r24, 0x0161	; 0x800161 <restart>
     8e0:	81 30       	cpi	r24, 0x01	; 1
     8e2:	29 f4       	brne	.+10     	; 0x8ee <DisplaySM_Tick+0x64>
			{
				state = display_deathAnimation_X;
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	9a 83       	std	Y+2, r25	; 0x02
     8ea:	89 83       	std	Y+1, r24	; 0x01
     8ec:	0e c0       	rjmp	.+28     	; 0x90a <DisplaySM_Tick+0x80>
			}
			else if (isHit == 0)
     8ee:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <isHit>
     8f2:	88 23       	and	r24, r24
     8f4:	29 f4       	brne	.+10     	; 0x900 <DisplaySM_Tick+0x76>
			{
				state = display_scroll;
     8f6:	82 e0       	ldi	r24, 0x02	; 2
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	9a 83       	std	Y+2, r25	; 0x02
     8fc:	89 83       	std	Y+1, r24	; 0x01
     8fe:	05 c0       	rjmp	.+10     	; 0x90a <DisplaySM_Tick+0x80>
			}
			else 
				state = display_deathAnimation_X;
     900:	83 e0       	ldi	r24, 0x03	; 3
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	9a 83       	std	Y+2, r25	; 0x02
     906:	89 83       	std	Y+1, r24	; 0x01
		break;
     908:	1f c0       	rjmp	.+62     	; 0x948 <DisplaySM_Tick+0xbe>
     90a:	1e c0       	rjmp	.+60     	; 0x948 <DisplaySM_Tick+0xbe>
		
		case display_deathAnimation_X:
			if (deathAni < 5)
     90c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <deathAni>
     910:	85 30       	cpi	r24, 0x05	; 5
     912:	50 f4       	brcc	.+20     	; 0x928 <DisplaySM_Tick+0x9e>
			{
				state = display_deathAnimation_X;
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	9a 83       	std	Y+2, r25	; 0x02
     91a:	89 83       	std	Y+1, r24	; 0x01
				deathAni++;
     91c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <deathAni>
     920:	8f 5f       	subi	r24, 0xFF	; 255
     922:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <deathAni>
			}else
				state = display_dead;
		break;
     926:	10 c0       	rjmp	.+32     	; 0x948 <DisplaySM_Tick+0xbe>
			if (deathAni < 5)
			{
				state = display_deathAnimation_X;
				deathAni++;
			}else
				state = display_dead;
     928:	84 e0       	ldi	r24, 0x04	; 4
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	9a 83       	std	Y+2, r25	; 0x02
     92e:	89 83       	std	Y+1, r24	; 0x01
		break;
     930:	0b c0       	rjmp	.+22     	; 0x948 <DisplaySM_Tick+0xbe>
		
		case display_dead:
			if (keypad_value == '1')
     932:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <keypad_value>
     936:	81 33       	cpi	r24, 0x31	; 49
     938:	19 f4       	brne	.+6      	; 0x940 <DisplaySM_Tick+0xb6>
			{
				state = display_start;
     93a:	1a 82       	std	Y+2, r1	; 0x02
     93c:	19 82       	std	Y+1, r1	; 0x01
				
			}
		break;
     93e:	04 c0       	rjmp	.+8      	; 0x948 <DisplaySM_Tick+0xbe>
     940:	03 c0       	rjmp	.+6      	; 0x948 <DisplaySM_Tick+0xbe>
		
		default:
			state = display_start;
     942:	1a 82       	std	Y+2, r1	; 0x02
     944:	19 82       	std	Y+1, r1	; 0x01
		break;
     946:	00 00       	nop
	}
	
	
	switch(state) //state action
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	9a 81       	ldd	r25, Y+2	; 0x02
     94c:	82 30       	cpi	r24, 0x02	; 2
     94e:	91 05       	cpc	r25, r1
     950:	09 f1       	breq	.+66     	; 0x994 <DisplaySM_Tick+0x10a>
     952:	83 30       	cpi	r24, 0x03	; 3
     954:	91 05       	cpc	r25, r1
     956:	2c f4       	brge	.+10     	; 0x962 <DisplaySM_Tick+0xd8>
     958:	00 97       	sbiw	r24, 0x00	; 0
     95a:	51 f0       	breq	.+20     	; 0x970 <DisplaySM_Tick+0xe6>
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	a1 f0       	breq	.+40     	; 0x988 <DisplaySM_Tick+0xfe>
			//LCD_DisplayString(1, " YOU ARE DEAD:( SCORE: ");
			//LCD_DisplayString(2, playerScoreArr);
			restart = 1;
		break;
		
		default: break;
     960:	50 c0       	rjmp	.+160    	; 0xa02 <DisplaySM_Tick+0x178>
			state = display_start;
		break;
	}
	
	
	switch(state) //state action
     962:	83 30       	cpi	r24, 0x03	; 3
     964:	91 05       	cpc	r25, r1
     966:	49 f1       	breq	.+82     	; 0x9ba <DisplaySM_Tick+0x130>
     968:	04 97       	sbiw	r24, 0x04	; 4
     96a:	09 f4       	brne	.+2      	; 0x96e <DisplaySM_Tick+0xe4>
     96c:	3f c0       	rjmp	.+126    	; 0x9ec <DisplaySM_Tick+0x162>
			//LCD_DisplayString(1, " YOU ARE DEAD:( SCORE: ");
			//LCD_DisplayString(2, playerScoreArr);
			restart = 1;
		break;
		
		default: break;
     96e:	49 c0       	rjmp	.+146    	; 0xa02 <DisplaySM_Tick+0x178>
	
	
	switch(state) //state action
	{
		case display_start:
			isHit			= 0;
     970:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <isHit>
			playerPosition	= 16;
     974:	80 e1       	ldi	r24, 0x10	; 16
     976:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <playerPosition>
			//playerScore		= 0;
			task3.state		= 0;//Task initial state.
     97a:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <task3>
			restart			= 0;
     97e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <restart>
			keypad_value	= 0;
     982:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <keypad_value>
		break;
     986:	3d c0       	rjmp	.+122    	; 0xa02 <DisplaySM_Tick+0x178>
		
		case display_wait:
			LCD_ClearScreen();
     988:	a0 db       	rcall	.-2240   	; 0xca <LCD_ClearScreen>
			LCD_DisplayString(1, "   LCD_RACER!   ");
     98a:	68 e3       	ldi	r22, 0x38	; 56
     98c:	71 e0       	ldi	r23, 0x01	; 1
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	16 dc       	rcall	.-2004   	; 0x1be <LCD_DisplayString>
		break;
     992:	37 c0       	rjmp	.+110    	; 0xa02 <DisplaySM_Tick+0x178>
		
		case display_scroll:
			beginGenerate = 1;
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <beginGenerate>
			//playerScore++;
			LCD_ClearScreen();
     99a:	97 db       	rcall	.-2258   	; 0xca <LCD_ClearScreen>
			LCD_DisplayString(1, row1);
     99c:	68 e0       	ldi	r22, 0x08	; 8
     99e:	71 e0       	ldi	r23, 0x01	; 1
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	0d dc       	rcall	.-2022   	; 0x1be <LCD_DisplayString>
			LCD_DisplayString(17, row2);
     9a4:	69 e1       	ldi	r22, 0x19	; 25
     9a6:	71 e0       	ldi	r23, 0x01	; 1
     9a8:	81 e1       	ldi	r24, 0x11	; 17
     9aa:	09 dc       	rcall	.-2030   	; 0x1be <LCD_DisplayString>
			LCD_Cursor(playerPosition);
     9ac:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <playerPosition>
     9b0:	2e dc       	rcall	.-1956   	; 0x20e <LCD_Cursor>
			LCD_WriteData(playerIcon);
     9b2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <playerIcon>
     9b6:	d5 db       	rcall	.-2134   	; 0x162 <LCD_WriteData>
		break;
     9b8:	24 c0       	rjmp	.+72     	; 0xa02 <DisplaySM_Tick+0x178>
		
		case display_deathAnimation_X:
			beginGenerate = 0;
     9ba:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <beginGenerate>
			LCD_ClearScreen();
     9be:	85 db       	rcall	.-2294   	; 0xca <LCD_ClearScreen>
			LCD_DisplayString(1, row1);
     9c0:	68 e0       	ldi	r22, 0x08	; 8
     9c2:	71 e0       	ldi	r23, 0x01	; 1
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	fb db       	rcall	.-2058   	; 0x1be <LCD_DisplayString>
			LCD_DisplayString(17, row2);
     9c8:	69 e1       	ldi	r22, 0x19	; 25
     9ca:	71 e0       	ldi	r23, 0x01	; 1
     9cc:	81 e1       	ldi	r24, 0x11	; 17
     9ce:	f7 db       	rcall	.-2066   	; 0x1be <LCD_DisplayString>
			LCD_Cursor(playerPosition);
     9d0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <playerPosition>
     9d4:	1c dc       	rcall	.-1992   	; 0x20e <LCD_Cursor>
			if ((deathAni % 2) == 0)
     9d6:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <deathAni>
     9da:	81 70       	andi	r24, 0x01	; 1
     9dc:	88 23       	and	r24, r24
     9de:	19 f4       	brne	.+6      	; 0x9e6 <DisplaySM_Tick+0x15c>
			{
				LCD_WriteData('X');
     9e0:	88 e5       	ldi	r24, 0x58	; 88
     9e2:	bf db       	rcall	.-2178   	; 0x162 <LCD_WriteData>
			else
			{
				LCD_WriteData(0xDB);
			}
			
		break;
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <DisplaySM_Tick+0x178>
			{
				LCD_WriteData('X');
			} 
			else
			{
				LCD_WriteData(0xDB);
     9e6:	8b ed       	ldi	r24, 0xDB	; 219
     9e8:	bc db       	rcall	.-2184   	; 0x162 <LCD_WriteData>
			}
			
		break;
     9ea:	0b c0       	rjmp	.+22     	; 0xa02 <DisplaySM_Tick+0x178>
		
		case display_dead:
			deathAni = 0;
     9ec:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <deathAni>
			//playerScoreArr[0] = playerScore; playerScoreArr[1] = '\0';
			LCD_ClearScreen();
     9f0:	6c db       	rcall	.-2344   	; 0xca <LCD_ClearScreen>
			LCD_DisplayString(1, " YOU ARE DEAD:( ");
     9f2:	69 e4       	ldi	r22, 0x49	; 73
     9f4:	71 e0       	ldi	r23, 0x01	; 1
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	e2 db       	rcall	.-2108   	; 0x1be <LCD_DisplayString>
			//LCD_DisplayString(1, " YOU ARE DEAD:( SCORE: ");
			//LCD_DisplayString(2, playerScoreArr);
			restart = 1;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <restart>
		break;
     a00:	00 00       	nop
		
		default: break;
	}
	
	return state;
     a02:	89 81       	ldd	r24, Y+1	; 0x01
     a04:	9a 81       	ldd	r25, Y+2	; 0x02
	
}
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	df 91       	pop	r29
     a0c:	cf 91       	pop	r28
     a0e:	08 95       	ret

00000a10 <Movement_Tick>:
enum MovementSM {M_start, M_wait, M_move, M_moveRelease} MovementSM;

unsigned char debounce	= 0;
	
int Movement_Tick(int state)
{
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	00 d0       	rcall	.+0      	; 0xa16 <Movement_Tick+0x6>
     a16:	cd b7       	in	r28, 0x3d	; 61
     a18:	de b7       	in	r29, 0x3e	; 62
     a1a:	9a 83       	std	Y+2, r25	; 0x02
     a1c:	89 83       	std	Y+1, r24	; 0x01
	keypad_value = GetKeypadKey();
     a1e:	6c dd       	rcall	.-1320   	; 0x4f8 <GetKeypadKey>
     a20:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <keypad_value>
	switch(state)
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	9a 81       	ldd	r25, Y+2	; 0x02
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	91 05       	cpc	r25, r1
     a2c:	89 f0       	breq	.+34     	; 0xa50 <Movement_Tick+0x40>
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	91 05       	cpc	r25, r1
     a32:	1c f4       	brge	.+6      	; 0xa3a <Movement_Tick+0x2a>
     a34:	89 2b       	or	r24, r25
     a36:	39 f0       	breq	.+14     	; 0xa46 <Movement_Tick+0x36>
     a38:	24 c0       	rjmp	.+72     	; 0xa82 <Movement_Tick+0x72>
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	91 05       	cpc	r25, r1
     a3e:	91 f0       	breq	.+36     	; 0xa64 <Movement_Tick+0x54>
     a40:	03 97       	sbiw	r24, 0x03	; 3
     a42:	a9 f0       	breq	.+42     	; 0xa6e <Movement_Tick+0x5e>
     a44:	1e c0       	rjmp	.+60     	; 0xa82 <Movement_Tick+0x72>
	{
		case M_start:
			state			= M_wait;
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	9a 83       	std	Y+2, r25	; 0x02
     a4c:	89 83       	std	Y+1, r24	; 0x01
		break;
     a4e:	1c c0       	rjmp	.+56     	; 0xa88 <Movement_Tick+0x78>
		
		case M_wait:
			 if (keypad_value != '\0')
     a50:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <keypad_value>
     a54:	88 23       	and	r24, r24
     a56:	29 f0       	breq	.+10     	; 0xa62 <Movement_Tick+0x52>
			{
				state = M_move;
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	9a 83       	std	Y+2, r25	; 0x02
     a5e:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     a60:	13 c0       	rjmp	.+38     	; 0xa88 <Movement_Tick+0x78>
     a62:	12 c0       	rjmp	.+36     	; 0xa88 <Movement_Tick+0x78>
		
		case M_move:
			state = M_moveRelease;
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	9a 83       	std	Y+2, r25	; 0x02
     a6a:	89 83       	std	Y+1, r24	; 0x01
		break;
     a6c:	0d c0       	rjmp	.+26     	; 0xa88 <Movement_Tick+0x78>
		
		case M_moveRelease:
			if (keypad_value == '\0')
     a6e:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <keypad_value>
     a72:	88 23       	and	r24, r24
     a74:	29 f4       	brne	.+10     	; 0xa80 <Movement_Tick+0x70>
			{
				state = M_wait;
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	9a 83       	std	Y+2, r25	; 0x02
     a7c:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     a7e:	04 c0       	rjmp	.+8      	; 0xa88 <Movement_Tick+0x78>
     a80:	03 c0       	rjmp	.+6      	; 0xa88 <Movement_Tick+0x78>
		
		default: 
			state = M_start;
     a82:	1a 82       	std	Y+2, r1	; 0x02
     a84:	19 82       	std	Y+1, r1	; 0x01
		break;
     a86:	00 00       	nop
	}
	
	switch(state)
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	9a 81       	ldd	r25, Y+2	; 0x02
     a8c:	81 30       	cpi	r24, 0x01	; 1
     a8e:	91 05       	cpc	r25, r1
     a90:	a9 f1       	breq	.+106    	; 0xafc <Movement_Tick+0xec>
     a92:	82 30       	cpi	r24, 0x02	; 2
     a94:	91 05       	cpc	r25, r1
     a96:	1c f4       	brge	.+6      	; 0xa9e <Movement_Tick+0x8e>
     a98:	89 2b       	or	r24, r25
     a9a:	91 f1       	breq	.+100    	; 0xb00 <Movement_Tick+0xf0>
		
		case M_moveRelease: 
			//keypad_value = 0;
		break;
		
		default: break;
     a9c:	34 c0       	rjmp	.+104    	; 0xb06 <Movement_Tick+0xf6>
		default: 
			state = M_start;
		break;
	}
	
	switch(state)
     a9e:	82 30       	cpi	r24, 0x02	; 2
     aa0:	91 05       	cpc	r25, r1
     aa2:	19 f0       	breq	.+6      	; 0xaaa <Movement_Tick+0x9a>
     aa4:	03 97       	sbiw	r24, 0x03	; 3
     aa6:	71 f1       	breq	.+92     	; 0xb04 <Movement_Tick+0xf4>
		
		case M_moveRelease: 
			//keypad_value = 0;
		break;
		
		default: break;
     aa8:	2e c0       	rjmp	.+92     	; 0xb06 <Movement_Tick+0xf6>
		break;
		
		case M_wait: break;
		
		case M_move:
			if (playerPosition == 16 && keypad_value == 'C')
     aaa:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <playerPosition>
     aae:	80 31       	cpi	r24, 0x10	; 16
     ab0:	39 f4       	brne	.+14     	; 0xac0 <Movement_Tick+0xb0>
     ab2:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <keypad_value>
     ab6:	83 34       	cpi	r24, 0x43	; 67
     ab8:	19 f4       	brne	.+6      	; 0xac0 <Movement_Tick+0xb0>
			{
				playerPosition = 32;
     aba:	80 e2       	ldi	r24, 0x20	; 32
     abc:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <playerPosition>
			} 
			if (playerPosition == 32 && keypad_value == 'B')
     ac0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <playerPosition>
     ac4:	80 32       	cpi	r24, 0x20	; 32
     ac6:	39 f4       	brne	.+14     	; 0xad6 <Movement_Tick+0xc6>
     ac8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <keypad_value>
     acc:	82 34       	cpi	r24, 0x42	; 66
     ace:	19 f4       	brne	.+6      	; 0xad6 <Movement_Tick+0xc6>
			{
				playerPosition = 16;
     ad0:	80 e1       	ldi	r24, 0x10	; 16
     ad2:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <playerPosition>
			}
			
			if (keypad_value == '1' && debounce > 5)
     ad6:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <keypad_value>
     ada:	81 33       	cpi	r24, 0x31	; 49
     adc:	49 f4       	brne	.+18     	; 0xaf0 <Movement_Tick+0xe0>
     ade:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <debounce>
     ae2:	86 30       	cpi	r24, 0x06	; 6
     ae4:	28 f0       	brcs	.+10     	; 0xaf0 <Movement_Tick+0xe0>
			{
				restart = 1;
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <restart>
				debounce = 0;
     aec:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <debounce>
				//keypad_value = 0;
			}
			
			debounce++;
     af0:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <debounce>
     af4:	8f 5f       	subi	r24, 0xFF	; 255
     af6:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <debounce>
		break;
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <Movement_Tick+0xf6>
	switch(state)
	{
		case M_start: 
		break;
		
		case M_wait: break;
     afc:	00 00       	nop
     afe:	03 c0       	rjmp	.+6      	; 0xb06 <Movement_Tick+0xf6>
	}
	
	switch(state)
	{
		case M_start: 
		break;
     b00:	00 00       	nop
     b02:	01 c0       	rjmp	.+2      	; 0xb06 <Movement_Tick+0xf6>
			debounce++;
		break;
		
		case M_moveRelease: 
			//keypad_value = 0;
		break;
     b04:	00 00       	nop
		
		default: break;
	}
	return state;
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <Collision_Tick>:
#define COLLISIONDETECTION_H_

enum CollisionSM {C_start, C_detect} CollisionSM;

int Collision_Tick(int state) 
{
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	00 d0       	rcall	.+0      	; 0xb1a <Collision_Tick+0x6>
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	9a 83       	std	Y+2, r25	; 0x02
     b20:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     b22:	89 81       	ldd	r24, Y+1	; 0x01
     b24:	9a 81       	ldd	r25, Y+2	; 0x02
     b26:	00 97       	sbiw	r24, 0x00	; 0
     b28:	19 f0       	breq	.+6      	; 0xb30 <Collision_Tick+0x1c>
     b2a:	01 97       	sbiw	r24, 0x01	; 1
     b2c:	31 f0       	breq	.+12     	; 0xb3a <Collision_Tick+0x26>
     b2e:	0a c0       	rjmp	.+20     	; 0xb44 <Collision_Tick+0x30>
	{
		case C_start:
			state = C_detect;
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	9a 83       	std	Y+2, r25	; 0x02
     b36:	89 83       	std	Y+1, r24	; 0x01
		break;
     b38:	08 c0       	rjmp	.+16     	; 0xb4a <Collision_Tick+0x36>
		
		case C_detect:
			state = C_detect;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	9a 83       	std	Y+2, r25	; 0x02
     b40:	89 83       	std	Y+1, r24	; 0x01
		break;
     b42:	03 c0       	rjmp	.+6      	; 0xb4a <Collision_Tick+0x36>
		
		default: 
			state = C_start;
     b44:	1a 82       	std	Y+2, r1	; 0x02
     b46:	19 82       	std	Y+1, r1	; 0x01
		break;
     b48:	00 00       	nop
		
	}
	
	switch(state)
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	9a 81       	ldd	r25, Y+2	; 0x02
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	19 f0       	breq	.+6      	; 0xb58 <Collision_Tick+0x44>
     b52:	01 97       	sbiw	r24, 0x01	; 1
     b54:	21 f0       	breq	.+8      	; 0xb5e <Collision_Tick+0x4a>
				isHit	= 1;
			}

			break;	
			
		default:break;
     b56:	24 c0       	rjmp	.+72     	; 0xba0 <Collision_Tick+0x8c>
	}
	
	switch(state)
	{
		case C_start:
			isHit = 0;
     b58:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <isHit>
		break;
     b5c:	21 c0       	rjmp	.+66     	; 0xba0 <Collision_Tick+0x8c>
			
		case C_detect:
			if (playerPosition == 16 && (row1[15] != 32 && row1[15] != 0))
     b5e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <playerPosition>
     b62:	80 31       	cpi	r24, 0x10	; 16
     b64:	61 f4       	brne	.+24     	; 0xb7e <Collision_Tick+0x6a>
     b66:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <row1+0xf>
     b6a:	80 32       	cpi	r24, 0x20	; 32
     b6c:	41 f0       	breq	.+16     	; 0xb7e <Collision_Tick+0x6a>
     b6e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <row1+0xf>
     b72:	88 23       	and	r24, r24
     b74:	21 f0       	breq	.+8      	; 0xb7e <Collision_Tick+0x6a>
			{
				isHit	= 1;
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <isHit>
     b7c:	10 c0       	rjmp	.+32     	; 0xb9e <Collision_Tick+0x8a>
			} 
			else if (playerPosition == 32 && (row2[15] != 32 && row2[15] != 0))
     b7e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <playerPosition>
     b82:	80 32       	cpi	r24, 0x20	; 32
     b84:	61 f4       	brne	.+24     	; 0xb9e <Collision_Tick+0x8a>
     b86:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <row2+0xf>
     b8a:	80 32       	cpi	r24, 0x20	; 32
     b8c:	41 f0       	breq	.+16     	; 0xb9e <Collision_Tick+0x8a>
     b8e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <row2+0xf>
     b92:	88 23       	and	r24, r24
     b94:	21 f0       	breq	.+8      	; 0xb9e <Collision_Tick+0x8a>
			{
				isHit	= 1;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <isHit>
			}

			break;	
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <Collision_Tick+0x8a>
     b9e:	00 00       	nop
			
		default:break;
	}
	
	return state;
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	08 95       	ret

00000bae <LevelProgression_Tick>:
#define LEVELPROGRESSION_H_

enum LevelProgressionSM {LP_start, LP_difficultySet} LevelProgressionSM;

int LevelProgression_Tick(int state)
{
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <LevelProgression_Tick+0x6>
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	9a 83       	std	Y+2, r25	; 0x02
     bba:	89 83       	std	Y+1, r24	; 0x01
	switch(state)//state transition
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
     bbe:	9a 81       	ldd	r25, Y+2	; 0x02
     bc0:	00 97       	sbiw	r24, 0x00	; 0
     bc2:	19 f0       	breq	.+6      	; 0xbca <LevelProgression_Tick+0x1c>
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	59 f0       	breq	.+22     	; 0xbde <LevelProgression_Tick+0x30>
     bc8:	12 c0       	rjmp	.+36     	; 0xbee <LevelProgression_Tick+0x40>
	{
		case LP_start: 
			if (beginGenerate == 1)
     bca:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <beginGenerate>
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	29 f4       	brne	.+10     	; 0xbdc <LevelProgression_Tick+0x2e>
			{
				state = LP_difficultySet;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	9a 83       	std	Y+2, r25	; 0x02
     bd8:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     bda:	0c c0       	rjmp	.+24     	; 0xbf4 <LevelProgression_Tick+0x46>
     bdc:	0b c0       	rjmp	.+22     	; 0xbf4 <LevelProgression_Tick+0x46>
		
		case LP_difficultySet:
			if (beginGenerate == 0)
     bde:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <beginGenerate>
     be2:	88 23       	and	r24, r24
     be4:	19 f4       	brne	.+6      	; 0xbec <LevelProgression_Tick+0x3e>
			{
				state = LP_start;
     be6:	1a 82       	std	Y+2, r1	; 0x02
     be8:	19 82       	std	Y+1, r1	; 0x01
			}
		break;
     bea:	04 c0       	rjmp	.+8      	; 0xbf4 <LevelProgression_Tick+0x46>
     bec:	03 c0       	rjmp	.+6      	; 0xbf4 <LevelProgression_Tick+0x46>
		
		default:
			state = LP_start;
     bee:	1a 82       	std	Y+2, r1	; 0x02
     bf0:	19 82       	std	Y+1, r1	; 0x01
		break;
     bf2:	00 00       	nop
	}
	
	switch(state)
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	9a 81       	ldd	r25, Y+2	; 0x02
     bf8:	00 97       	sbiw	r24, 0x00	; 0
     bfa:	19 f0       	breq	.+6      	; 0xc02 <LevelProgression_Tick+0x54>
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	29 f0       	breq	.+10     	; 0xc0a <LevelProgression_Tick+0x5c>
				object_generate_prob--;
			}
		break;
		
		default:
		break;
     c00:	0f c0       	rjmp	.+30     	; 0xc20 <LevelProgression_Tick+0x72>
	}
	
	switch(state)
	{
		case LP_start:
			object_generate_prob = 20;
     c02:	84 e1       	ldi	r24, 0x14	; 20
     c04:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <object_generate_prob>
		break;
     c08:	0b c0       	rjmp	.+22     	; 0xc20 <LevelProgression_Tick+0x72>
		
		case LP_difficultySet:
			if (object_generate_prob > 2)
     c0a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <object_generate_prob>
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	30 f0       	brcs	.+12     	; 0xc1e <LevelProgression_Tick+0x70>
			{
				object_generate_prob--;
     c12:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <object_generate_prob>
     c16:	81 50       	subi	r24, 0x01	; 1
     c18:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <object_generate_prob>
			}
		break;
     c1c:	00 c0       	rjmp	.+0      	; 0xc1e <LevelProgression_Tick+0x70>
     c1e:	00 00       	nop
		
		default:
		break;
	}
	
	return state;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <main>:
#include "Movement.h"
#include "CollisionDetection.h"
#include "LevelProgression.h"

int main(void)
{
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	c8 54       	subi	r28, 0x48	; 72
     c3c:	d1 09       	sbc	r29, r1
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
     c48:	84 e2       	ldi	r24, 0x24	; 36
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	2f ef       	ldi	r18, 0xFF	; 255
     c4e:	fc 01       	movw	r30, r24
     c50:	20 83       	st	Z, r18
     c52:	85 e2       	ldi	r24, 0x25	; 37
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	fc 01       	movw	r30, r24
     c58:	10 82       	st	Z, r1
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
     c5a:	87 e2       	ldi	r24, 0x27	; 39
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	20 ef       	ldi	r18, 0xF0	; 240
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
     c64:	88 e2       	ldi	r24, 0x28	; 40
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	2f e0       	ldi	r18, 0x0F	; 15
     c6a:	fc 01       	movw	r30, r24
     c6c:	20 83       	st	Z, r18
	DDRD = 0xFF; PORTD = 0x00;
     c6e:	8a e2       	ldi	r24, 0x2A	; 42
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	2f ef       	ldi	r18, 0xFF	; 255
     c74:	fc 01       	movw	r30, r24
     c76:	20 83       	st	Z, r18
     c78:	8b e2       	ldi	r24, 0x2B	; 43
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	fc 01       	movw	r30, r24
     c7e:	10 82       	st	Z, r1

	/**Set individual task period********************************/
	unsigned long int ObstacleGenerator_calc	= 500;
     c80:	84 ef       	ldi	r24, 0xF4	; 244
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	a0 e0       	ldi	r26, 0x00	; 0
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	8b 83       	std	Y+3, r24	; 0x03
     c8a:	9c 83       	std	Y+4, r25	; 0x04
     c8c:	ad 83       	std	Y+5, r26	; 0x05
     c8e:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int Display_calc				= 500;
     c90:	84 ef       	ldi	r24, 0xF4	; 244
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	a0 e0       	ldi	r26, 0x00	; 0
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	8f 83       	std	Y+7, r24	; 0x07
     c9a:	98 87       	std	Y+8, r25	; 0x08
     c9c:	a9 87       	std	Y+9, r26	; 0x09
     c9e:	ba 87       	std	Y+10, r27	; 0x0a
// 	unsigned long int Movement_calc				= 500;
// 	unsigned long int Collision_calc			= 500;
	unsigned long int Movement_calc				= 10;
     ca0:	8a e0       	ldi	r24, 0x0A	; 10
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	a0 e0       	ldi	r26, 0x00	; 0
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	8b 87       	std	Y+11, r24	; 0x0b
     caa:	9c 87       	std	Y+12, r25	; 0x0c
     cac:	ad 87       	std	Y+13, r26	; 0x0d
     cae:	be 87       	std	Y+14, r27	; 0x0e
	unsigned long int Collision_calc			= 100;
     cb0:	84 e6       	ldi	r24, 0x64	; 100
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	a0 e0       	ldi	r26, 0x00	; 0
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	8f 87       	std	Y+15, r24	; 0x0f
     cba:	98 8b       	std	Y+16, r25	; 0x10
     cbc:	a9 8b       	std	Y+17, r26	; 0x11
     cbe:	ba 8b       	std	Y+18, r27	; 0x12
	unsigned long int LevelProgression_calc		= 1200;
     cc0:	80 eb       	ldi	r24, 0xB0	; 176
     cc2:	94 e0       	ldi	r25, 0x04	; 4
     cc4:	a0 e0       	ldi	r26, 0x00	; 0
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	8b 8b       	std	Y+19, r24	; 0x13
     cca:	9c 8b       	std	Y+20, r25	; 0x14
     ccc:	ad 8b       	std	Y+21, r26	; 0x15
     cce:	be 8b       	std	Y+22, r27	; 0x16
	
		
	/**Set individual task properties********************************/
	
	//Calculating GCD
	unsigned long int tempGCD		= findGCD(ObstacleGenerator_calc, Display_calc);
     cd0:	2f 81       	ldd	r18, Y+7	; 0x07
     cd2:	38 85       	ldd	r19, Y+8	; 0x08
     cd4:	49 85       	ldd	r20, Y+9	; 0x09
     cd6:	5a 85       	ldd	r21, Y+10	; 0x0a
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	ad 81       	ldd	r26, Y+5	; 0x05
     cde:	be 81       	ldd	r27, Y+6	; 0x06
     ce0:	bc 01       	movw	r22, r24
     ce2:	cd 01       	movw	r24, r26
     ce4:	bd db       	rcall	.-2182   	; 0x460 <findGCD>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	8f 8b       	std	Y+23, r24	; 0x17
     cec:	98 8f       	std	Y+24, r25	; 0x18
     cee:	a9 8f       	std	Y+25, r26	; 0x19
     cf0:	ba 8f       	std	Y+26, r27	; 0x1a
					  tempGCD		= findGCD(tempGCD, Movement_calc);
     cf2:	2b 85       	ldd	r18, Y+11	; 0x0b
     cf4:	3c 85       	ldd	r19, Y+12	; 0x0c
     cf6:	4d 85       	ldd	r20, Y+13	; 0x0d
     cf8:	5e 85       	ldd	r21, Y+14	; 0x0e
     cfa:	8f 89       	ldd	r24, Y+23	; 0x17
     cfc:	98 8d       	ldd	r25, Y+24	; 0x18
     cfe:	a9 8d       	ldd	r26, Y+25	; 0x19
     d00:	ba 8d       	ldd	r27, Y+26	; 0x1a
     d02:	bc 01       	movw	r22, r24
     d04:	cd 01       	movw	r24, r26
     d06:	ac db       	rcall	.-2216   	; 0x460 <findGCD>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	8f 8b       	std	Y+23, r24	; 0x17
     d0e:	98 8f       	std	Y+24, r25	; 0x18
     d10:	a9 8f       	std	Y+25, r26	; 0x19
     d12:	ba 8f       	std	Y+26, r27	; 0x1a
					  tempGCD		= findGCD(tempGCD, Collision_calc);
     d14:	2f 85       	ldd	r18, Y+15	; 0x0f
     d16:	38 89       	ldd	r19, Y+16	; 0x10
     d18:	49 89       	ldd	r20, Y+17	; 0x11
     d1a:	5a 89       	ldd	r21, Y+18	; 0x12
     d1c:	8f 89       	ldd	r24, Y+23	; 0x17
     d1e:	98 8d       	ldd	r25, Y+24	; 0x18
     d20:	a9 8d       	ldd	r26, Y+25	; 0x19
     d22:	ba 8d       	ldd	r27, Y+26	; 0x1a
     d24:	bc 01       	movw	r22, r24
     d26:	cd 01       	movw	r24, r26
     d28:	9b db       	rcall	.-2250   	; 0x460 <findGCD>
     d2a:	dc 01       	movw	r26, r24
     d2c:	cb 01       	movw	r24, r22
     d2e:	8f 8b       	std	Y+23, r24	; 0x17
     d30:	98 8f       	std	Y+24, r25	; 0x18
     d32:	a9 8f       	std	Y+25, r26	; 0x19
     d34:	ba 8f       	std	Y+26, r27	; 0x1a
					  tempGCD		= findGCD(tempGCD, LevelProgression_calc);
     d36:	2b 89       	ldd	r18, Y+19	; 0x13
     d38:	3c 89       	ldd	r19, Y+20	; 0x14
     d3a:	4d 89       	ldd	r20, Y+21	; 0x15
     d3c:	5e 89       	ldd	r21, Y+22	; 0x16
     d3e:	8f 89       	ldd	r24, Y+23	; 0x17
     d40:	98 8d       	ldd	r25, Y+24	; 0x18
     d42:	a9 8d       	ldd	r26, Y+25	; 0x19
     d44:	ba 8d       	ldd	r27, Y+26	; 0x1a
     d46:	bc 01       	movw	r22, r24
     d48:	cd 01       	movw	r24, r26
     d4a:	8a db       	rcall	.-2284   	; 0x460 <findGCD>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	8f 8b       	std	Y+23, r24	; 0x17
     d52:	98 8f       	std	Y+24, r25	; 0x18
     d54:	a9 8f       	std	Y+25, r26	; 0x19
     d56:	ba 8f       	std	Y+26, r27	; 0x1a
	unsigned long int GCD			= tempGCD;
     d58:	8f 89       	ldd	r24, Y+23	; 0x17
     d5a:	98 8d       	ldd	r25, Y+24	; 0x18
     d5c:	a9 8d       	ldd	r26, Y+25	; 0x19
     d5e:	ba 8d       	ldd	r27, Y+26	; 0x1a
     d60:	8b 8f       	std	Y+27, r24	; 0x1b
     d62:	9c 8f       	std	Y+28, r25	; 0x1c
     d64:	ad 8f       	std	Y+29, r26	; 0x1d
     d66:	be 8f       	std	Y+30, r27	; 0x1e
	//Recalculate GCD periods for scheduler
	unsigned long int Tick1_Period	= ObstacleGenerator_calc/GCD,
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	9c 81       	ldd	r25, Y+4	; 0x04
     d6c:	ad 81       	ldd	r26, Y+5	; 0x05
     d6e:	be 81       	ldd	r27, Y+6	; 0x06
     d70:	2b 8d       	ldd	r18, Y+27	; 0x1b
     d72:	3c 8d       	ldd	r19, Y+28	; 0x1c
     d74:	4d 8d       	ldd	r20, Y+29	; 0x1d
     d76:	5e 8d       	ldd	r21, Y+30	; 0x1e
     d78:	bc 01       	movw	r22, r24
     d7a:	cd 01       	movw	r24, r26
     d7c:	97 d1       	rcall	.+814    	; 0x10ac <__udivmodsi4>
     d7e:	da 01       	movw	r26, r20
     d80:	c9 01       	movw	r24, r18
     d82:	8f 8f       	std	Y+31, r24	; 0x1f
     d84:	98 a3       	std	Y+32, r25	; 0x20
     d86:	a9 a3       	std	Y+33, r26	; 0x21
     d88:	ba a3       	std	Y+34, r27	; 0x22
					  Tick2_period	= Display_calc/GCD,
     d8a:	8f 81       	ldd	r24, Y+7	; 0x07
     d8c:	98 85       	ldd	r25, Y+8	; 0x08
     d8e:	a9 85       	ldd	r26, Y+9	; 0x09
     d90:	ba 85       	ldd	r27, Y+10	; 0x0a
     d92:	2b 8d       	ldd	r18, Y+27	; 0x1b
     d94:	3c 8d       	ldd	r19, Y+28	; 0x1c
     d96:	4d 8d       	ldd	r20, Y+29	; 0x1d
     d98:	5e 8d       	ldd	r21, Y+30	; 0x1e
     d9a:	bc 01       	movw	r22, r24
     d9c:	cd 01       	movw	r24, r26
     d9e:	86 d1       	rcall	.+780    	; 0x10ac <__udivmodsi4>
     da0:	da 01       	movw	r26, r20
     da2:	c9 01       	movw	r24, r18
     da4:	8b a3       	std	Y+35, r24	; 0x23
     da6:	9c a3       	std	Y+36, r25	; 0x24
     da8:	ad a3       	std	Y+37, r26	; 0x25
     daa:	be a3       	std	Y+38, r27	; 0x26
					  Tick3_period	= Movement_calc/GCD,
     dac:	8b 85       	ldd	r24, Y+11	; 0x0b
     dae:	9c 85       	ldd	r25, Y+12	; 0x0c
     db0:	ad 85       	ldd	r26, Y+13	; 0x0d
     db2:	be 85       	ldd	r27, Y+14	; 0x0e
     db4:	2b 8d       	ldd	r18, Y+27	; 0x1b
     db6:	3c 8d       	ldd	r19, Y+28	; 0x1c
     db8:	4d 8d       	ldd	r20, Y+29	; 0x1d
     dba:	5e 8d       	ldd	r21, Y+30	; 0x1e
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	75 d1       	rcall	.+746    	; 0x10ac <__udivmodsi4>
     dc2:	da 01       	movw	r26, r20
     dc4:	c9 01       	movw	r24, r18
     dc6:	8f a3       	std	Y+39, r24	; 0x27
     dc8:	98 a7       	std	Y+40, r25	; 0x28
     dca:	a9 a7       	std	Y+41, r26	; 0x29
     dcc:	ba a7       	std	Y+42, r27	; 0x2a
					  Tick4_period	= Collision_calc/GCD,
     dce:	8f 85       	ldd	r24, Y+15	; 0x0f
     dd0:	98 89       	ldd	r25, Y+16	; 0x10
     dd2:	a9 89       	ldd	r26, Y+17	; 0x11
     dd4:	ba 89       	ldd	r27, Y+18	; 0x12
     dd6:	2b 8d       	ldd	r18, Y+27	; 0x1b
     dd8:	3c 8d       	ldd	r19, Y+28	; 0x1c
     dda:	4d 8d       	ldd	r20, Y+29	; 0x1d
     ddc:	5e 8d       	ldd	r21, Y+30	; 0x1e
     dde:	bc 01       	movw	r22, r24
     de0:	cd 01       	movw	r24, r26
     de2:	64 d1       	rcall	.+712    	; 0x10ac <__udivmodsi4>
     de4:	da 01       	movw	r26, r20
     de6:	c9 01       	movw	r24, r18
     de8:	8b a7       	std	Y+43, r24	; 0x2b
     dea:	9c a7       	std	Y+44, r25	; 0x2c
     dec:	ad a7       	std	Y+45, r26	; 0x2d
     dee:	be a7       	std	Y+46, r27	; 0x2e
					  Tick5_period	= LevelProgression_calc/GCD;
     df0:	8b 89       	ldd	r24, Y+19	; 0x13
     df2:	9c 89       	ldd	r25, Y+20	; 0x14
     df4:	ad 89       	ldd	r26, Y+21	; 0x15
     df6:	be 89       	ldd	r27, Y+22	; 0x16
     df8:	2b 8d       	ldd	r18, Y+27	; 0x1b
     dfa:	3c 8d       	ldd	r19, Y+28	; 0x1c
     dfc:	4d 8d       	ldd	r20, Y+29	; 0x1d
     dfe:	5e 8d       	ldd	r21, Y+30	; 0x1e
     e00:	bc 01       	movw	r22, r24
     e02:	cd 01       	movw	r24, r26
     e04:	53 d1       	rcall	.+678    	; 0x10ac <__udivmodsi4>
     e06:	da 01       	movw	r26, r20
     e08:	c9 01       	movw	r24, r18
     e0a:	8f a7       	std	Y+47, r24	; 0x2f
     e0c:	98 ab       	std	Y+48, r25	; 0x30
     e0e:	a9 ab       	std	Y+49, r26	; 0x31
     e10:	ba ab       	std	Y+50, r27	; 0x32
	const unsigned short numTasks	= sizeof(tasks)/sizeof(task*);
     e12:	85 e0       	ldi	r24, 0x05	; 5
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	9c ab       	std	Y+52, r25	; 0x34
     e18:	8b ab       	std	Y+51, r24	; 0x33
	
	/****************************************************************/
	
	/**Set individual task properties**************/
	task1.state						= 0;
     e1a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <task1>
	task1.period					= Tick1_Period;
     e1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e20:	98 a1       	ldd	r25, Y+32	; 0x20
     e22:	a9 a1       	ldd	r26, Y+33	; 0x21
     e24:	ba a1       	ldd	r27, Y+34	; 0x22
     e26:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <task1+0x1>
     e2a:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <task1+0x2>
     e2e:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <task1+0x3>
     e32:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <task1+0x4>
	task1.elapsedTime				= Tick1_Period;
     e36:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e38:	98 a1       	ldd	r25, Y+32	; 0x20
     e3a:	a9 a1       	ldd	r26, Y+33	; 0x21
     e3c:	ba a1       	ldd	r27, Y+34	; 0x22
     e3e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <task1+0x5>
     e42:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <task1+0x6>
     e46:	a0 93 6a 01 	sts	0x016A, r26	; 0x80016a <task1+0x7>
     e4a:	b0 93 6b 01 	sts	0x016B, r27	; 0x80016b <task1+0x8>
	task1.TickFct					= &ObstacleGeneratorSM_Tick;
     e4e:	82 e9       	ldi	r24, 0x92	; 146
     e50:	93 e0       	ldi	r25, 0x03	; 3
     e52:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <task1+0xa>
     e56:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <task1+0x9>
	
	// Task 2
	task2.state						= 0;//Task initial state.
     e5a:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <task2>
	task2.period					= Tick2_period;//Task Period.
     e5e:	8b a1       	ldd	r24, Y+35	; 0x23
     e60:	9c a1       	ldd	r25, Y+36	; 0x24
     e62:	ad a1       	ldd	r26, Y+37	; 0x25
     e64:	be a1       	ldd	r27, Y+38	; 0x26
     e66:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <task2+0x1>
     e6a:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <task2+0x2>
     e6e:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <task2+0x3>
     e72:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <task2+0x4>
	task2.elapsedTime				= Tick2_period;//Task current elapsed time.
     e76:	8b a1       	ldd	r24, Y+35	; 0x23
     e78:	9c a1       	ldd	r25, Y+36	; 0x24
     e7a:	ad a1       	ldd	r26, Y+37	; 0x25
     e7c:	be a1       	ldd	r27, Y+38	; 0x26
     e7e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <task2+0x5>
     e82:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <task2+0x6>
     e86:	a0 93 75 01 	sts	0x0175, r26	; 0x800175 <task2+0x7>
     e8a:	b0 93 76 01 	sts	0x0176, r27	; 0x800176 <task2+0x8>
	task2.TickFct					= &DisplaySM_Tick;//Function pointer for the tick.
     e8e:	85 e4       	ldi	r24, 0x45	; 69
     e90:	94 e0       	ldi	r25, 0x04	; 4
     e92:	90 93 78 01 	sts	0x0178, r25	; 0x800178 <task2+0xa>
     e96:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <task2+0x9>
	
	//Task 3
	task3.state						= 0;//Task initial state.
     e9a:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <task3>
	task3.period					= Tick3_period;//Task Period.
     e9e:	8f a1       	ldd	r24, Y+39	; 0x27
     ea0:	98 a5       	ldd	r25, Y+40	; 0x28
     ea2:	a9 a5       	ldd	r26, Y+41	; 0x29
     ea4:	ba a5       	ldd	r27, Y+42	; 0x2a
     ea6:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <task3+0x1>
     eaa:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <task3+0x2>
     eae:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <task3+0x3>
     eb2:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <task3+0x4>
	task3.elapsedTime				= Tick3_period;//Task current elapsed time.
     eb6:	8f a1       	ldd	r24, Y+39	; 0x27
     eb8:	98 a5       	ldd	r25, Y+40	; 0x28
     eba:	a9 a5       	ldd	r26, Y+41	; 0x29
     ebc:	ba a5       	ldd	r27, Y+42	; 0x2a
     ebe:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <task3+0x5>
     ec2:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <task3+0x6>
     ec6:	a0 93 80 01 	sts	0x0180, r26	; 0x800180 <task3+0x7>
     eca:	b0 93 81 01 	sts	0x0181, r27	; 0x800181 <task3+0x8>
	task3.TickFct					= &Movement_Tick;//Function pointer for the tick.
     ece:	88 e0       	ldi	r24, 0x08	; 8
     ed0:	95 e0       	ldi	r25, 0x05	; 5
     ed2:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <task3+0xa>
     ed6:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <task3+0x9>
	
	//Task 4
	task4.state						= 0;//Task initial state.
     eda:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <task4>
	task4.period					= Tick4_period;//Task Period.
     ede:	8b a5       	ldd	r24, Y+43	; 0x2b
     ee0:	9c a5       	ldd	r25, Y+44	; 0x2c
     ee2:	ad a5       	ldd	r26, Y+45	; 0x2d
     ee4:	be a5       	ldd	r27, Y+46	; 0x2e
     ee6:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <task4+0x1>
     eea:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <task4+0x2>
     eee:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <task4+0x3>
     ef2:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <task4+0x4>
	task4.elapsedTime				= Tick4_period;//Task current elapsed time.
     ef6:	8b a5       	ldd	r24, Y+43	; 0x2b
     ef8:	9c a5       	ldd	r25, Y+44	; 0x2c
     efa:	ad a5       	ldd	r26, Y+45	; 0x2d
     efc:	be a5       	ldd	r27, Y+46	; 0x2e
     efe:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <task4+0x5>
     f02:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <task4+0x6>
     f06:	a0 93 8b 01 	sts	0x018B, r26	; 0x80018b <task4+0x7>
     f0a:	b0 93 8c 01 	sts	0x018C, r27	; 0x80018c <task4+0x8>
	task4.TickFct					= &Collision_Tick;//Function pointer for the tick.
     f0e:	8a e8       	ldi	r24, 0x8A	; 138
     f10:	95 e0       	ldi	r25, 0x05	; 5
     f12:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <task4+0xa>
     f16:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <task4+0x9>
	
	//Task 5
	task5.state						= 0;//Task initial state.
     f1a:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <task5>
	task5.period					= Tick5_period;//Task Period.
     f1e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f20:	98 a9       	ldd	r25, Y+48	; 0x30
     f22:	a9 a9       	ldd	r26, Y+49	; 0x31
     f24:	ba a9       	ldd	r27, Y+50	; 0x32
     f26:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <task5+0x1>
     f2a:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <task5+0x2>
     f2e:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <task5+0x3>
     f32:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <task5+0x4>
	task5.elapsedTime				= Tick5_period;//Task current elapsed time.
     f36:	8f a5       	ldd	r24, Y+47	; 0x2f
     f38:	98 a9       	ldd	r25, Y+48	; 0x30
     f3a:	a9 a9       	ldd	r26, Y+49	; 0x31
     f3c:	ba a9       	ldd	r27, Y+50	; 0x32
     f3e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <task5+0x5>
     f42:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <task5+0x6>
     f46:	a0 93 96 01 	sts	0x0196, r26	; 0x800196 <task5+0x7>
     f4a:	b0 93 97 01 	sts	0x0197, r27	; 0x800197 <task5+0x8>
	task5.TickFct					= &LevelProgression_Tick;//Function pointer for the tick.
     f4e:	87 ed       	ldi	r24, 0xD7	; 215
     f50:	95 e0       	ldi	r25, 0x05	; 5
     f52:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <task5+0xa>
     f56:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <task5+0x9>

	/**********************************************/
	
	
	TimerSet(GCD);
     f5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f5e:	ad 8d       	ldd	r26, Y+29	; 0x1d
     f60:	be 8d       	ldd	r27, Y+30	; 0x1e
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	af d9       	rcall	.-3234   	; 0x2c6 <TimerSet>
	TimerOn();
     f68:	db d9       	rcall	.-3146   	; 0x320 <TimerOn>
	
	LCD_init();
     f6a:	b8 d8       	rcall	.-3728   	; 0xdc <LCD_init>
	
	while(1) 
	{
		for(unsigned short i = 0; i < numTasks; i++)
     f6c:	1a 82       	std	Y+2, r1	; 0x02
     f6e:	19 82       	std	Y+1, r1	; 0x01
     f70:	7a c0       	rjmp	.+244    	; 0x1066 <main+0x438>
		{
			//keypad_value = GetKeypadKey();
			if(tasks[i] -> elapsedTime == tasks[i]-> period)
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	82 5d       	subi	r24, 0xD2	; 210
     f7c:	9e 4f       	sbci	r25, 0xFE	; 254
     f7e:	fc 01       	movw	r30, r24
     f80:	80 81       	ld	r24, Z
     f82:	91 81       	ldd	r25, Z+1	; 0x01
     f84:	fc 01       	movw	r30, r24
     f86:	25 81       	ldd	r18, Z+5	; 0x05
     f88:	36 81       	ldd	r19, Z+6	; 0x06
     f8a:	47 81       	ldd	r20, Z+7	; 0x07
     f8c:	50 85       	ldd	r21, Z+8	; 0x08
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	82 5d       	subi	r24, 0xD2	; 210
     f98:	9e 4f       	sbci	r25, 0xFE	; 254
     f9a:	fc 01       	movw	r30, r24
     f9c:	80 81       	ld	r24, Z
     f9e:	91 81       	ldd	r25, Z+1	; 0x01
     fa0:	fc 01       	movw	r30, r24
     fa2:	81 81       	ldd	r24, Z+1	; 0x01
     fa4:	92 81       	ldd	r25, Z+2	; 0x02
     fa6:	a3 81       	ldd	r26, Z+3	; 0x03
     fa8:	b4 81       	ldd	r27, Z+4	; 0x04
     faa:	28 17       	cp	r18, r24
     fac:	39 07       	cpc	r19, r25
     fae:	4a 07       	cpc	r20, r26
     fb0:	5b 07       	cpc	r21, r27
     fb2:	a9 f5       	brne	.+106    	; 0x101e <main+0x3f0>
			{
				
				tasks[i] -> state		= tasks[i] -> TickFct(tasks[i] -> state);
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	82 5d       	subi	r24, 0xD2	; 210
     fbe:	9e 4f       	sbci	r25, 0xFE	; 254
     fc0:	fc 01       	movw	r30, r24
     fc2:	00 81       	ld	r16, Z
     fc4:	11 81       	ldd	r17, Z+1	; 0x01
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	9a 81       	ldd	r25, Y+2	; 0x02
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	82 5d       	subi	r24, 0xD2	; 210
     fd0:	9e 4f       	sbci	r25, 0xFE	; 254
     fd2:	fc 01       	movw	r30, r24
     fd4:	80 81       	ld	r24, Z
     fd6:	91 81       	ldd	r25, Z+1	; 0x01
     fd8:	fc 01       	movw	r30, r24
     fda:	21 85       	ldd	r18, Z+9	; 0x09
     fdc:	32 85       	ldd	r19, Z+10	; 0x0a
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	9a 81       	ldd	r25, Y+2	; 0x02
     fe2:	88 0f       	add	r24, r24
     fe4:	99 1f       	adc	r25, r25
     fe6:	82 5d       	subi	r24, 0xD2	; 210
     fe8:	9e 4f       	sbci	r25, 0xFE	; 254
     fea:	fc 01       	movw	r30, r24
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	fc 01       	movw	r30, r24
     ff2:	80 81       	ld	r24, Z
     ff4:	08 2e       	mov	r0, r24
     ff6:	00 0c       	add	r0, r0
     ff8:	99 0b       	sbc	r25, r25
     ffa:	f9 01       	movw	r30, r18
     ffc:	09 95       	icall
     ffe:	f8 01       	movw	r30, r16
    1000:	80 83       	st	Z, r24
				tasks[i] -> elapsedTime = 0;
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	82 5d       	subi	r24, 0xD2	; 210
    100c:	9e 4f       	sbci	r25, 0xFE	; 254
    100e:	fc 01       	movw	r30, r24
    1010:	80 81       	ld	r24, Z
    1012:	91 81       	ldd	r25, Z+1	; 0x01
    1014:	fc 01       	movw	r30, r24
    1016:	15 82       	std	Z+5, r1	; 0x05
    1018:	16 82       	std	Z+6, r1	; 0x06
    101a:	17 82       	std	Z+7, r1	; 0x07
    101c:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i] -> elapsedTime += 1;
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	9a 81       	ldd	r25, Y+2	; 0x02
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	82 5d       	subi	r24, 0xD2	; 210
    1028:	9e 4f       	sbci	r25, 0xFE	; 254
    102a:	fc 01       	movw	r30, r24
    102c:	20 81       	ld	r18, Z
    102e:	31 81       	ldd	r19, Z+1	; 0x01
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	9a 81       	ldd	r25, Y+2	; 0x02
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	82 5d       	subi	r24, 0xD2	; 210
    103a:	9e 4f       	sbci	r25, 0xFE	; 254
    103c:	fc 01       	movw	r30, r24
    103e:	80 81       	ld	r24, Z
    1040:	91 81       	ldd	r25, Z+1	; 0x01
    1042:	fc 01       	movw	r30, r24
    1044:	85 81       	ldd	r24, Z+5	; 0x05
    1046:	96 81       	ldd	r25, Z+6	; 0x06
    1048:	a7 81       	ldd	r26, Z+7	; 0x07
    104a:	b0 85       	ldd	r27, Z+8	; 0x08
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	a1 1d       	adc	r26, r1
    1050:	b1 1d       	adc	r27, r1
    1052:	f9 01       	movw	r30, r18
    1054:	85 83       	std	Z+5, r24	; 0x05
    1056:	96 83       	std	Z+6, r25	; 0x06
    1058:	a7 83       	std	Z+7, r26	; 0x07
    105a:	b0 87       	std	Z+8, r27	; 0x08
	
	LCD_init();
	
	while(1) 
	{
		for(unsigned short i = 0; i < numTasks; i++)
    105c:	89 81       	ldd	r24, Y+1	; 0x01
    105e:	9a 81       	ldd	r25, Y+2	; 0x02
    1060:	01 96       	adiw	r24, 0x01	; 1
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	29 81       	ldd	r18, Y+1	; 0x01
    1068:	3a 81       	ldd	r19, Y+2	; 0x02
    106a:	8b a9       	ldd	r24, Y+51	; 0x33
    106c:	9c a9       	ldd	r25, Y+52	; 0x34
    106e:	28 17       	cp	r18, r24
    1070:	39 07       	cpc	r19, r25
    1072:	08 f4       	brcc	.+2      	; 0x1076 <main+0x448>
    1074:	7e cf       	rjmp	.-260    	; 0xf72 <main+0x344>
				tasks[i] -> state		= tasks[i] -> TickFct(tasks[i] -> state);
				tasks[i] -> elapsedTime = 0;
			}
			tasks[i] -> elapsedTime += 1;
		}
		while(!TimerFlag);
    1076:	00 00       	nop
    1078:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__data_end>
    107c:	88 23       	and	r24, r24
    107e:	e1 f3       	breq	.-8      	; 0x1078 <main+0x44a>
		TimerFlag = 0;
    1080:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__data_end>
	}
    1084:	73 cf       	rjmp	.-282    	; 0xf6c <main+0x33e>

00001086 <__divmodhi4>:
    1086:	97 fb       	bst	r25, 7
    1088:	07 2e       	mov	r0, r23
    108a:	16 f4       	brtc	.+4      	; 0x1090 <__divmodhi4+0xa>
    108c:	00 94       	com	r0
    108e:	06 d0       	rcall	.+12     	; 0x109c <__divmodhi4_neg1>
    1090:	77 fd       	sbrc	r23, 7
    1092:	08 d0       	rcall	.+16     	; 0x10a4 <__divmodhi4_neg2>
    1094:	2d d0       	rcall	.+90     	; 0x10f0 <__udivmodhi4>
    1096:	07 fc       	sbrc	r0, 7
    1098:	05 d0       	rcall	.+10     	; 0x10a4 <__divmodhi4_neg2>
    109a:	3e f4       	brtc	.+14     	; 0x10aa <__divmodhi4_exit>

0000109c <__divmodhi4_neg1>:
    109c:	90 95       	com	r25
    109e:	81 95       	neg	r24
    10a0:	9f 4f       	sbci	r25, 0xFF	; 255
    10a2:	08 95       	ret

000010a4 <__divmodhi4_neg2>:
    10a4:	70 95       	com	r23
    10a6:	61 95       	neg	r22
    10a8:	7f 4f       	sbci	r23, 0xFF	; 255

000010aa <__divmodhi4_exit>:
    10aa:	08 95       	ret

000010ac <__udivmodsi4>:
    10ac:	a1 e2       	ldi	r26, 0x21	; 33
    10ae:	1a 2e       	mov	r1, r26
    10b0:	aa 1b       	sub	r26, r26
    10b2:	bb 1b       	sub	r27, r27
    10b4:	fd 01       	movw	r30, r26
    10b6:	0d c0       	rjmp	.+26     	; 0x10d2 <__udivmodsi4_ep>

000010b8 <__udivmodsi4_loop>:
    10b8:	aa 1f       	adc	r26, r26
    10ba:	bb 1f       	adc	r27, r27
    10bc:	ee 1f       	adc	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	a2 17       	cp	r26, r18
    10c2:	b3 07       	cpc	r27, r19
    10c4:	e4 07       	cpc	r30, r20
    10c6:	f5 07       	cpc	r31, r21
    10c8:	20 f0       	brcs	.+8      	; 0x10d2 <__udivmodsi4_ep>
    10ca:	a2 1b       	sub	r26, r18
    10cc:	b3 0b       	sbc	r27, r19
    10ce:	e4 0b       	sbc	r30, r20
    10d0:	f5 0b       	sbc	r31, r21

000010d2 <__udivmodsi4_ep>:
    10d2:	66 1f       	adc	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	88 1f       	adc	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	1a 94       	dec	r1
    10dc:	69 f7       	brne	.-38     	; 0x10b8 <__udivmodsi4_loop>
    10de:	60 95       	com	r22
    10e0:	70 95       	com	r23
    10e2:	80 95       	com	r24
    10e4:	90 95       	com	r25
    10e6:	9b 01       	movw	r18, r22
    10e8:	ac 01       	movw	r20, r24
    10ea:	bd 01       	movw	r22, r26
    10ec:	cf 01       	movw	r24, r30
    10ee:	08 95       	ret

000010f0 <__udivmodhi4>:
    10f0:	aa 1b       	sub	r26, r26
    10f2:	bb 1b       	sub	r27, r27
    10f4:	51 e1       	ldi	r21, 0x11	; 17
    10f6:	07 c0       	rjmp	.+14     	; 0x1106 <__udivmodhi4_ep>

000010f8 <__udivmodhi4_loop>:
    10f8:	aa 1f       	adc	r26, r26
    10fa:	bb 1f       	adc	r27, r27
    10fc:	a6 17       	cp	r26, r22
    10fe:	b7 07       	cpc	r27, r23
    1100:	10 f0       	brcs	.+4      	; 0x1106 <__udivmodhi4_ep>
    1102:	a6 1b       	sub	r26, r22
    1104:	b7 0b       	sbc	r27, r23

00001106 <__udivmodhi4_ep>:
    1106:	88 1f       	adc	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	5a 95       	dec	r21
    110c:	a9 f7       	brne	.-22     	; 0x10f8 <__udivmodhi4_loop>
    110e:	80 95       	com	r24
    1110:	90 95       	com	r25
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	08 95       	ret

00001118 <do_rand>:
    1118:	8f 92       	push	r8
    111a:	9f 92       	push	r9
    111c:	af 92       	push	r10
    111e:	bf 92       	push	r11
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	ec 01       	movw	r28, r24
    112e:	68 81       	ld	r22, Y
    1130:	79 81       	ldd	r23, Y+1	; 0x01
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	9b 81       	ldd	r25, Y+3	; 0x03
    1136:	61 15       	cp	r22, r1
    1138:	71 05       	cpc	r23, r1
    113a:	81 05       	cpc	r24, r1
    113c:	91 05       	cpc	r25, r1
    113e:	21 f4       	brne	.+8      	; 0x1148 <do_rand+0x30>
    1140:	64 e2       	ldi	r22, 0x24	; 36
    1142:	79 ed       	ldi	r23, 0xD9	; 217
    1144:	8b e5       	ldi	r24, 0x5B	; 91
    1146:	97 e0       	ldi	r25, 0x07	; 7
    1148:	2d e1       	ldi	r18, 0x1D	; 29
    114a:	33 ef       	ldi	r19, 0xF3	; 243
    114c:	41 e0       	ldi	r20, 0x01	; 1
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	38 d0       	rcall	.+112    	; 0x11c2 <__divmodsi4>
    1152:	49 01       	movw	r8, r18
    1154:	5a 01       	movw	r10, r20
    1156:	9b 01       	movw	r18, r22
    1158:	ac 01       	movw	r20, r24
    115a:	a7 ea       	ldi	r26, 0xA7	; 167
    115c:	b1 e4       	ldi	r27, 0x41	; 65
    115e:	4d d0       	rcall	.+154    	; 0x11fa <__muluhisi3>
    1160:	6b 01       	movw	r12, r22
    1162:	7c 01       	movw	r14, r24
    1164:	ac ee       	ldi	r26, 0xEC	; 236
    1166:	b4 ef       	ldi	r27, 0xF4	; 244
    1168:	a5 01       	movw	r20, r10
    116a:	94 01       	movw	r18, r8
    116c:	52 d0       	rcall	.+164    	; 0x1212 <__mulohisi3>
    116e:	dc 01       	movw	r26, r24
    1170:	cb 01       	movw	r24, r22
    1172:	8c 0d       	add	r24, r12
    1174:	9d 1d       	adc	r25, r13
    1176:	ae 1d       	adc	r26, r14
    1178:	bf 1d       	adc	r27, r15
    117a:	b7 ff       	sbrs	r27, 7
    117c:	03 c0       	rjmp	.+6      	; 0x1184 <do_rand+0x6c>
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	a1 09       	sbc	r26, r1
    1182:	b0 48       	sbci	r27, 0x80	; 128
    1184:	88 83       	st	Y, r24
    1186:	99 83       	std	Y+1, r25	; 0x01
    1188:	aa 83       	std	Y+2, r26	; 0x02
    118a:	bb 83       	std	Y+3, r27	; 0x03
    118c:	9f 77       	andi	r25, 0x7F	; 127
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	cf 90       	pop	r12
    119a:	bf 90       	pop	r11
    119c:	af 90       	pop	r10
    119e:	9f 90       	pop	r9
    11a0:	8f 90       	pop	r8
    11a2:	08 95       	ret

000011a4 <rand_r>:
    11a4:	b9 cf       	rjmp	.-142    	; 0x1118 <do_rand>

000011a6 <rand>:
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	91 e0       	ldi	r25, 0x01	; 1
    11aa:	b6 cf       	rjmp	.-148    	; 0x1118 <do_rand>

000011ac <srand>:
    11ac:	a0 e0       	ldi	r26, 0x00	; 0
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    11b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    11b8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    11bc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    11c0:	08 95       	ret

000011c2 <__divmodsi4>:
    11c2:	05 2e       	mov	r0, r21
    11c4:	97 fb       	bst	r25, 7
    11c6:	16 f4       	brtc	.+4      	; 0x11cc <__divmodsi4+0xa>
    11c8:	00 94       	com	r0
    11ca:	0f d0       	rcall	.+30     	; 0x11ea <__negsi2>
    11cc:	57 fd       	sbrc	r21, 7
    11ce:	05 d0       	rcall	.+10     	; 0x11da <__divmodsi4_neg2>
    11d0:	6d df       	rcall	.-294    	; 0x10ac <__udivmodsi4>
    11d2:	07 fc       	sbrc	r0, 7
    11d4:	02 d0       	rcall	.+4      	; 0x11da <__divmodsi4_neg2>
    11d6:	46 f4       	brtc	.+16     	; 0x11e8 <__divmodsi4_exit>
    11d8:	08 c0       	rjmp	.+16     	; 0x11ea <__negsi2>

000011da <__divmodsi4_neg2>:
    11da:	50 95       	com	r21
    11dc:	40 95       	com	r20
    11de:	30 95       	com	r19
    11e0:	21 95       	neg	r18
    11e2:	3f 4f       	sbci	r19, 0xFF	; 255
    11e4:	4f 4f       	sbci	r20, 0xFF	; 255
    11e6:	5f 4f       	sbci	r21, 0xFF	; 255

000011e8 <__divmodsi4_exit>:
    11e8:	08 95       	ret

000011ea <__negsi2>:
    11ea:	90 95       	com	r25
    11ec:	80 95       	com	r24
    11ee:	70 95       	com	r23
    11f0:	61 95       	neg	r22
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	8f 4f       	sbci	r24, 0xFF	; 255
    11f6:	9f 4f       	sbci	r25, 0xFF	; 255
    11f8:	08 95       	ret

000011fa <__muluhisi3>:
    11fa:	0f d0       	rcall	.+30     	; 0x121a <__umulhisi3>
    11fc:	a5 9f       	mul	r26, r21
    11fe:	90 0d       	add	r25, r0
    1200:	b4 9f       	mul	r27, r20
    1202:	90 0d       	add	r25, r0
    1204:	a4 9f       	mul	r26, r20
    1206:	80 0d       	add	r24, r0
    1208:	91 1d       	adc	r25, r1
    120a:	11 24       	eor	r1, r1
    120c:	08 95       	ret

0000120e <__mulshisi3>:
    120e:	b7 ff       	sbrs	r27, 7
    1210:	f4 cf       	rjmp	.-24     	; 0x11fa <__muluhisi3>

00001212 <__mulohisi3>:
    1212:	f3 df       	rcall	.-26     	; 0x11fa <__muluhisi3>
    1214:	82 1b       	sub	r24, r18
    1216:	93 0b       	sbc	r25, r19
    1218:	08 95       	ret

0000121a <__umulhisi3>:
    121a:	a2 9f       	mul	r26, r18
    121c:	b0 01       	movw	r22, r0
    121e:	b3 9f       	mul	r27, r19
    1220:	c0 01       	movw	r24, r0
    1222:	a3 9f       	mul	r26, r19
    1224:	70 0d       	add	r23, r0
    1226:	81 1d       	adc	r24, r1
    1228:	11 24       	eor	r1, r1
    122a:	91 1d       	adc	r25, r1
    122c:	b2 9f       	mul	r27, r18
    122e:	70 0d       	add	r23, r0
    1230:	81 1d       	adc	r24, r1
    1232:	11 24       	eor	r1, r1
    1234:	91 1d       	adc	r25, r1
    1236:	08 95       	ret

00001238 <_exit>:
    1238:	f8 94       	cli

0000123a <__stop_program>:
    123a:	ff cf       	rjmp	.-2      	; 0x123a <__stop_program>
