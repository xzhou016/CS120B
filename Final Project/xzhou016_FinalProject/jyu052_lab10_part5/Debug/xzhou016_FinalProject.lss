
xzhou016_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000b46  00000bda  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b46  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080012c  0080012c  00000c06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000824  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d0  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a30  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  0000218c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000477  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000080a  00000000  00000000  000029c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000031d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	9b c1       	rjmp	.+822    	; 0x36c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e4       	ldi	r30, 0x46	; 70
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 32       	cpi	r26, 0x2C	; 44
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e2       	ldi	r26, 0x2C	; 44
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 34       	cpi	r26, 0x47	; 71
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ef d2       	rcall	.+1502   	; 0x6a2 <main>
  c4:	3e c5       	rjmp	.+2684   	; 0xb42 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
		case keypad_release:	break;
		
		default:				break;
	}
	return state;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	18 d0       	rcall	.+48     	; 0x104 <LCD_WriteCommand>
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <LCD_init>:
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	84 e6       	ldi	r24, 0x64	; 100
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	a6 d0       	rcall	.+332    	; 0x234 <delay_ms>
  e8:	88 e3       	ldi	r24, 0x38	; 56
  ea:	0c d0       	rcall	.+24     	; 0x104 <LCD_WriteCommand>
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	0a d0       	rcall	.+20     	; 0x104 <LCD_WriteCommand>
  f0:	8f e0       	ldi	r24, 0x0F	; 15
  f2:	08 d0       	rcall	.+16     	; 0x104 <LCD_WriteCommand>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	06 d0       	rcall	.+12     	; 0x104 <LCD_WriteCommand>
  f8:	8a e0       	ldi	r24, 0x0A	; 10
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	9b d0       	rcall	.+310    	; 0x234 <delay_ms>
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <LCD_WriteCommand>:
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	89 83       	std	Y+1, r24	; 0x01
 110:	8b e2       	ldi	r24, 0x2B	; 43
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2b e2       	ldi	r18, 0x2B	; 43
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	20 81       	ld	r18, Z
 11c:	2f 7b       	andi	r18, 0xBF	; 191
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	29 81       	ldd	r18, Y+1	; 0x01
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
 12c:	8b e2       	ldi	r24, 0x2B	; 43
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2b e2       	ldi	r18, 0x2B	; 43
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	20 68       	ori	r18, 0x80	; 128
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
 13e:	00 00       	nop
 140:	8b e2       	ldi	r24, 0x2B	; 43
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	2b e2       	ldi	r18, 0x2B	; 43
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	f9 01       	movw	r30, r18
 14a:	20 81       	ld	r18, Z
 14c:	2f 77       	andi	r18, 0x7F	; 127
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	6e d0       	rcall	.+220    	; 0x234 <delay_ms>
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <LCD_WriteData>:
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	1f 92       	push	r1
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	89 83       	std	Y+1, r24	; 0x01
 16c:	8b e2       	ldi	r24, 0x2B	; 43
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	2b e2       	ldi	r18, 0x2B	; 43
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	f9 01       	movw	r30, r18
 176:	20 81       	ld	r18, Z
 178:	20 64       	ori	r18, 0x40	; 64
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
 17e:	85 e2       	ldi	r24, 0x25	; 37
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	29 81       	ldd	r18, Y+1	; 0x01
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
 188:	8b e2       	ldi	r24, 0x2B	; 43
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	2b e2       	ldi	r18, 0x2B	; 43
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	20 68       	ori	r18, 0x80	; 128
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
 19a:	00 00       	nop
 19c:	8b e2       	ldi	r24, 0x2B	; 43
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	2b e2       	ldi	r18, 0x2B	; 43
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	f9 01       	movw	r30, r18
 1a6:	20 81       	ld	r18, Z
 1a8:	2f 77       	andi	r18, 0x7F	; 127
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	40 d0       	rcall	.+128    	; 0x234 <delay_ms>
 1b4:	0f 90       	pop	r0
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <LCD_DisplayString>:
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <LCD_DisplayString+0x6>
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <LCD_DisplayString+0x8>
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	8a 83       	std	Y+2, r24	; 0x02
 1ca:	7c 83       	std	Y+4, r23	; 0x04
 1cc:	6b 83       	std	Y+3, r22	; 0x03
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	89 83       	std	Y+1, r24	; 0x01
 1d2:	0f c0       	rjmp	.+30     	; 0x1f2 <LCD_DisplayString+0x36>
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	98 0f       	add	r25, r24
 1da:	99 83       	std	Y+1, r25	; 0x01
 1dc:	17 d0       	rcall	.+46     	; 0x20c <LCD_Cursor>
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	9c 81       	ldd	r25, Y+4	; 0x04
 1e2:	9c 01       	movw	r18, r24
 1e4:	2f 5f       	subi	r18, 0xFF	; 255
 1e6:	3f 4f       	sbci	r19, 0xFF	; 255
 1e8:	3c 83       	std	Y+4, r19	; 0x04
 1ea:	2b 83       	std	Y+3, r18	; 0x03
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	b7 df       	rcall	.-146    	; 0x160 <LCD_WriteData>
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	9c 81       	ldd	r25, Y+4	; 0x04
 1f6:	fc 01       	movw	r30, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	88 23       	and	r24, r24
 1fc:	59 f7       	brne	.-42     	; 0x1d4 <LCD_DisplayString+0x18>
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <LCD_Cursor>:
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	1f 92       	push	r1
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	89 83       	std	Y+1, r24	; 0x01
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	81 31       	cpi	r24, 0x11	; 17
 21c:	20 f4       	brcc	.+8      	; 0x226 <LCD_Cursor+0x1a>
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	81 58       	subi	r24, 0x81	; 129
 222:	70 df       	rcall	.-288    	; 0x104 <LCD_WriteCommand>
 224:	03 c0       	rjmp	.+6      	; 0x22c <LCD_Cursor+0x20>
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	81 55       	subi	r24, 0x51	; 81
 22a:	6c df       	rcall	.-296    	; 0x104 <LCD_WriteCommand>
 22c:	0f 90       	pop	r0
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <delay_ms>:
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	00 d0       	rcall	.+0      	; 0x23a <delay_ms+0x6>
 23a:	00 d0       	rcall	.+0      	; 0x23c <delay_ms+0x8>
 23c:	00 d0       	rcall	.+0      	; 0x23e <delay_ms+0xa>
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	9e 83       	std	Y+6, r25	; 0x06
 244:	8d 83       	std	Y+5, r24	; 0x05
 246:	1a 82       	std	Y+2, r1	; 0x02
 248:	19 82       	std	Y+1, r1	; 0x01
 24a:	13 c0       	rjmp	.+38     	; 0x272 <delay_ms+0x3e>
 24c:	1c 82       	std	Y+4, r1	; 0x04
 24e:	1b 82       	std	Y+3, r1	; 0x03
 250:	06 c0       	rjmp	.+12     	; 0x25e <delay_ms+0x2a>
 252:	00 00       	nop
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	9c 81       	ldd	r25, Y+4	; 0x04
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	9c 83       	std	Y+4, r25	; 0x04
 25c:	8b 83       	std	Y+3, r24	; 0x03
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	9c 81       	ldd	r25, Y+4	; 0x04
 262:	87 30       	cpi	r24, 0x07	; 7
 264:	93 40       	sbci	r25, 0x03	; 3
 266:	ac f3       	brlt	.-22     	; 0x252 <delay_ms+0x1e>
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	9a 81       	ldd	r25, Y+2	; 0x02
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	9a 83       	std	Y+2, r25	; 0x02
 270:	89 83       	std	Y+1, r24	; 0x01
 272:	29 81       	ldd	r18, Y+1	; 0x01
 274:	3a 81       	ldd	r19, Y+2	; 0x02
 276:	8d 81       	ldd	r24, Y+5	; 0x05
 278:	9e 81       	ldd	r25, Y+6	; 0x06
 27a:	28 17       	cp	r18, r24
 27c:	39 07       	cpc	r19, r25
 27e:	34 f3       	brlt	.-52     	; 0x24c <delay_ms+0x18>
 280:	26 96       	adiw	r28, 0x06	; 6
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <TimerSet>:
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	00 d0       	rcall	.+0      	; 0x298 <TimerSet+0x6>
 298:	00 d0       	rcall	.+0      	; 0x29a <TimerSet+0x8>
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	69 83       	std	Y+1, r22	; 0x01
 2a0:	7a 83       	std	Y+2, r23	; 0x02
 2a2:	8b 83       	std	Y+3, r24	; 0x03
 2a4:	9c 83       	std	Y+4, r25	; 0x04
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	9a 81       	ldd	r25, Y+2	; 0x02
 2aa:	ab 81       	ldd	r26, Y+3	; 0x03
 2ac:	bc 81       	ldd	r27, Y+4	; 0x04
 2ae:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M>
 2b2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x1>
 2b6:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <_avr_timer_M+0x2>
 2ba:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <_avr_timer_M+0x3>
 2be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 2c2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 2c6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 2ca:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 2ce:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <_avr_timer_cntcurr>
 2d2:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <_avr_timer_cntcurr+0x1>
 2d6:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <_avr_timer_cntcurr+0x2>
 2da:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <_avr_timer_cntcurr+0x3>
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <TimerOn>:
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
 2f4:	81 e8       	ldi	r24, 0x81	; 129
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	2b e0       	ldi	r18, 0x0B	; 11
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
 2fe:	88 e8       	ldi	r24, 0x88	; 136
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	2d e7       	ldi	r18, 0x7D	; 125
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	31 83       	std	Z+1, r19	; 0x01
 30a:	20 83       	st	Z, r18
 30c:	8f e6       	ldi	r24, 0x6F	; 111
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	22 e0       	ldi	r18, 0x02	; 2
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
 316:	84 e8       	ldi	r24, 0x84	; 132
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	fc 01       	movw	r30, r24
 31c:	11 82       	std	Z+1, r1	; 0x01
 31e:	10 82       	st	Z, r1
 320:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 324:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 328:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 32c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 330:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <_avr_timer_cntcurr>
 334:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <_avr_timer_cntcurr+0x1>
 338:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <_avr_timer_cntcurr+0x2>
 33c:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <_avr_timer_cntcurr+0x3>
 340:	8f e5       	ldi	r24, 0x5F	; 95
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	2f e5       	ldi	r18, 0x5F	; 95
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	f9 01       	movw	r30, r18
 34a:	20 81       	ld	r18, Z
 34c:	20 68       	ori	r18, 0x80	; 128
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <TimerISR>:
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <__vector_13>:
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 37c:	0f 92       	push	r0
 37e:	2f 93       	push	r18
 380:	3f 93       	push	r19
 382:	4f 93       	push	r20
 384:	5f 93       	push	r21
 386:	6f 93       	push	r22
 388:	7f 93       	push	r23
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	af 93       	push	r26
 390:	bf 93       	push	r27
 392:	ef 93       	push	r30
 394:	ff 93       	push	r31
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <_avr_timer_cntcurr>
 3a2:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <_avr_timer_cntcurr+0x1>
 3a6:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <_avr_timer_cntcurr+0x2>
 3aa:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <_avr_timer_cntcurr+0x3>
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	a1 09       	sbc	r26, r1
 3b2:	b1 09       	sbc	r27, r1
 3b4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <_avr_timer_cntcurr>
 3b8:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <_avr_timer_cntcurr+0x1>
 3bc:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <_avr_timer_cntcurr+0x2>
 3c0:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <_avr_timer_cntcurr+0x3>
 3c4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <_avr_timer_cntcurr>
 3c8:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <_avr_timer_cntcurr+0x1>
 3cc:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <_avr_timer_cntcurr+0x2>
 3d0:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <_avr_timer_cntcurr+0x3>
 3d4:	89 2b       	or	r24, r25
 3d6:	8a 2b       	or	r24, r26
 3d8:	8b 2b       	or	r24, r27
 3da:	89 f4       	brne	.+34     	; 0x3fe <__vector_13+0x92>
 3dc:	bd df       	rcall	.-134    	; 0x358 <TimerISR>
 3de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 3e2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 3e6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 3ea:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 3ee:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <_avr_timer_cntcurr>
 3f2:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <_avr_timer_cntcurr+0x1>
 3f6:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <_avr_timer_cntcurr+0x2>
 3fa:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <_avr_timer_cntcurr+0x3>
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	ff 91       	pop	r31
 404:	ef 91       	pop	r30
 406:	bf 91       	pop	r27
 408:	af 91       	pop	r26
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	7f 91       	pop	r23
 410:	6f 91       	pop	r22
 412:	5f 91       	pop	r21
 414:	4f 91       	pop	r20
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 420:	0f 90       	pop	r0
 422:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <findGCD>:
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
 434:	60 97       	sbiw	r28, 0x10	; 16
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	f8 94       	cli
 43a:	de bf       	out	0x3e, r29	; 62
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	cd bf       	out	0x3d, r28	; 61
 440:	6d 83       	std	Y+5, r22	; 0x05
 442:	7e 83       	std	Y+6, r23	; 0x06
 444:	8f 83       	std	Y+7, r24	; 0x07
 446:	98 87       	std	Y+8, r25	; 0x08
 448:	29 87       	std	Y+9, r18	; 0x09
 44a:	3a 87       	std	Y+10, r19	; 0x0a
 44c:	4b 87       	std	Y+11, r20	; 0x0b
 44e:	5c 87       	std	Y+12, r21	; 0x0c
 450:	8d 81       	ldd	r24, Y+5	; 0x05
 452:	9e 81       	ldd	r25, Y+6	; 0x06
 454:	af 81       	ldd	r26, Y+7	; 0x07
 456:	b8 85       	ldd	r27, Y+8	; 0x08
 458:	29 85       	ldd	r18, Y+9	; 0x09
 45a:	3a 85       	ldd	r19, Y+10	; 0x0a
 45c:	4b 85       	ldd	r20, Y+11	; 0x0b
 45e:	5c 85       	ldd	r21, Y+12	; 0x0c
 460:	bc 01       	movw	r22, r24
 462:	cd 01       	movw	r24, r26
 464:	a8 d2       	rcall	.+1360   	; 0x9b6 <__udivmodsi4>
 466:	dc 01       	movw	r26, r24
 468:	cb 01       	movw	r24, r22
 46a:	89 83       	std	Y+1, r24	; 0x01
 46c:	9a 83       	std	Y+2, r25	; 0x02
 46e:	ab 83       	std	Y+3, r26	; 0x03
 470:	bc 83       	std	Y+4, r27	; 0x04
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	9a 81       	ldd	r25, Y+2	; 0x02
 476:	ab 81       	ldd	r26, Y+3	; 0x03
 478:	bc 81       	ldd	r27, Y+4	; 0x04
 47a:	89 2b       	or	r24, r25
 47c:	8a 2b       	or	r24, r26
 47e:	8b 2b       	or	r24, r27
 480:	29 f4       	brne	.+10     	; 0x48c <findGCD+0x60>
 482:	89 85       	ldd	r24, Y+9	; 0x09
 484:	9a 85       	ldd	r25, Y+10	; 0x0a
 486:	ab 85       	ldd	r26, Y+11	; 0x0b
 488:	bc 85       	ldd	r27, Y+12	; 0x0c
 48a:	11 c0       	rjmp	.+34     	; 0x4ae <findGCD+0x82>
 48c:	89 85       	ldd	r24, Y+9	; 0x09
 48e:	9a 85       	ldd	r25, Y+10	; 0x0a
 490:	ab 85       	ldd	r26, Y+11	; 0x0b
 492:	bc 85       	ldd	r27, Y+12	; 0x0c
 494:	8d 83       	std	Y+5, r24	; 0x05
 496:	9e 83       	std	Y+6, r25	; 0x06
 498:	af 83       	std	Y+7, r26	; 0x07
 49a:	b8 87       	std	Y+8, r27	; 0x08
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	9a 81       	ldd	r25, Y+2	; 0x02
 4a0:	ab 81       	ldd	r26, Y+3	; 0x03
 4a2:	bc 81       	ldd	r27, Y+4	; 0x04
 4a4:	89 87       	std	Y+9, r24	; 0x09
 4a6:	9a 87       	std	Y+10, r25	; 0x0a
 4a8:	ab 87       	std	Y+11, r26	; 0x0b
 4aa:	bc 87       	std	Y+12, r27	; 0x0c
 4ac:	d1 cf       	rjmp	.-94     	; 0x450 <findGCD+0x24>
 4ae:	bc 01       	movw	r22, r24
 4b0:	cd 01       	movw	r24, r26
 4b2:	60 96       	adiw	r28, 0x10	; 16
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <arrayShift>:
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	00 d0       	rcall	.+0      	; 0x4ca <arrayShift+0x6>
 4ca:	cd b7       	in	r28, 0x3d	; 61
 4cc:	de b7       	in	r29, 0x3e	; 62
 4ce:	8a 83       	std	Y+2, r24	; 0x02
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	89 83       	std	Y+1, r24	; 0x01
 4d4:	23 c0       	rjmp	.+70     	; 0x51c <arrayShift+0x58>
 4d6:	89 81       	ldd	r24, Y+1	; 0x01
 4d8:	88 2f       	mov	r24, r24
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	29 81       	ldd	r18, Y+1	; 0x01
 4de:	22 2f       	mov	r18, r18
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	21 50       	subi	r18, 0x01	; 1
 4e4:	31 09       	sbc	r19, r1
 4e6:	28 5f       	subi	r18, 0xF8	; 248
 4e8:	3e 4f       	sbci	r19, 0xFE	; 254
 4ea:	f9 01       	movw	r30, r18
 4ec:	20 81       	ld	r18, Z
 4ee:	88 5f       	subi	r24, 0xF8	; 248
 4f0:	9e 4f       	sbci	r25, 0xFE	; 254
 4f2:	fc 01       	movw	r30, r24
 4f4:	20 83       	st	Z, r18
 4f6:	89 81       	ldd	r24, Y+1	; 0x01
 4f8:	88 2f       	mov	r24, r24
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	29 81       	ldd	r18, Y+1	; 0x01
 4fe:	22 2f       	mov	r18, r18
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	21 50       	subi	r18, 0x01	; 1
 504:	31 09       	sbc	r19, r1
 506:	27 5e       	subi	r18, 0xE7	; 231
 508:	3e 4f       	sbci	r19, 0xFE	; 254
 50a:	f9 01       	movw	r30, r18
 50c:	20 81       	ld	r18, Z
 50e:	87 5e       	subi	r24, 0xE7	; 231
 510:	9e 4f       	sbci	r25, 0xFE	; 254
 512:	fc 01       	movw	r30, r24
 514:	20 83       	st	Z, r18
 516:	89 81       	ldd	r24, Y+1	; 0x01
 518:	81 50       	subi	r24, 0x01	; 1
 51a:	89 83       	std	Y+1, r24	; 0x01
 51c:	89 81       	ldd	r24, Y+1	; 0x01
 51e:	88 23       	and	r24, r24
 520:	d1 f6       	brne	.-76     	; 0x4d6 <arrayShift+0x12>
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <ObstacleGeneratorSM_Tick>:
 52c:	cf 93       	push	r28
 52e:	df 93       	push	r29
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
 534:	2a 97       	sbiw	r28, 0x0a	; 10
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	f8 94       	cli
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	9a 83       	std	Y+2, r25	; 0x02
 542:	89 83       	std	Y+1, r24	; 0x01
 544:	89 81       	ldd	r24, Y+1	; 0x01
 546:	9a 81       	ldd	r25, Y+2	; 0x02
 548:	00 97       	sbiw	r24, 0x00	; 0
 54a:	19 f0       	breq	.+6      	; 0x552 <ObstacleGeneratorSM_Tick+0x26>
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	49 f0       	breq	.+18     	; 0x562 <ObstacleGeneratorSM_Tick+0x36>
 550:	05 c0       	rjmp	.+10     	; 0x55c <ObstacleGeneratorSM_Tick+0x30>
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	90 e0       	ldi	r25, 0x00	; 0
 556:	9a 83       	std	Y+2, r25	; 0x02
 558:	89 83       	std	Y+1, r24	; 0x01
 55a:	04 c0       	rjmp	.+8      	; 0x564 <ObstacleGeneratorSM_Tick+0x38>
 55c:	1a 82       	std	Y+2, r1	; 0x02
 55e:	19 82       	std	Y+1, r1	; 0x01
 560:	01 c0       	rjmp	.+2      	; 0x564 <ObstacleGeneratorSM_Tick+0x38>
 562:	00 00       	nop
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	9a 81       	ldd	r25, Y+2	; 0x02
 568:	00 97       	sbiw	r24, 0x00	; 0
 56a:	09 f4       	brne	.+2      	; 0x56e <ObstacleGeneratorSM_Tick+0x42>
 56c:	5a c0       	rjmp	.+180    	; 0x622 <ObstacleGeneratorSM_Tick+0xf6>
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	09 f0       	breq	.+2      	; 0x574 <ObstacleGeneratorSM_Tick+0x48>
 572:	58 c0       	rjmp	.+176    	; 0x624 <ObstacleGeneratorSM_Tick+0xf8>
 574:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <str_index>
 578:	a5 df       	rcall	.-182    	; 0x4c4 <arrayShift>
 57a:	9a d2       	rcall	.+1332   	; 0xab0 <rand>
 57c:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <object_generate_prob>
 580:	22 2f       	mov	r18, r18
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	b9 01       	movw	r22, r18
 586:	04 d2       	rcall	.+1032   	; 0x990 <__divmodhi4>
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	21 f4       	brne	.+8      	; 0x594 <ObstacleGeneratorSM_Tick+0x68>
 58c:	83 e2       	ldi	r24, 0x23	; 35
 58e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
 592:	10 c0       	rjmp	.+32     	; 0x5b4 <ObstacleGeneratorSM_Tick+0x88>
 594:	8d d2       	rcall	.+1306   	; 0xab0 <rand>
 596:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <object_generate_prob>
 59a:	22 2f       	mov	r18, r18
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	b9 01       	movw	r22, r18
 5a0:	f7 d1       	rcall	.+1006   	; 0x990 <__divmodhi4>
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	21 f4       	brne	.+8      	; 0x5ae <ObstacleGeneratorSM_Tick+0x82>
 5a6:	8a e2       	ldi	r24, 0x2A	; 42
 5a8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
 5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <ObstacleGeneratorSM_Tick+0x88>
 5ae:	80 e2       	ldi	r24, 0x20	; 32
 5b0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
 5b4:	7d d2       	rcall	.+1274   	; 0xab0 <rand>
 5b6:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <object_generate_prob>
 5ba:	22 2f       	mov	r18, r18
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	b9 01       	movw	r22, r18
 5c0:	e7 d1       	rcall	.+974    	; 0x990 <__divmodhi4>
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	21 f4       	brne	.+8      	; 0x5ce <ObstacleGeneratorSM_Tick+0xa2>
 5c6:	83 e2       	ldi	r24, 0x23	; 35
 5c8:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <row2>
 5cc:	10 c0       	rjmp	.+32     	; 0x5ee <ObstacleGeneratorSM_Tick+0xc2>
 5ce:	70 d2       	rcall	.+1248   	; 0xab0 <rand>
 5d0:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <object_generate_prob>
 5d4:	22 2f       	mov	r18, r18
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	b9 01       	movw	r22, r18
 5da:	da d1       	rcall	.+948    	; 0x990 <__divmodhi4>
 5dc:	01 97       	sbiw	r24, 0x01	; 1
 5de:	21 f4       	brne	.+8      	; 0x5e8 <ObstacleGeneratorSM_Tick+0xbc>
 5e0:	8a e2       	ldi	r24, 0x2A	; 42
 5e2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <row2>
 5e6:	03 c0       	rjmp	.+6      	; 0x5ee <ObstacleGeneratorSM_Tick+0xc2>
 5e8:	80 e2       	ldi	r24, 0x20	; 32
 5ea:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <row2>
 5ee:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <row1+0x10>
 5f2:	88 23       	and	r24, r24
 5f4:	21 f4       	brne	.+8      	; 0x5fe <ObstacleGeneratorSM_Tick+0xd2>
 5f6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <row2+0x10>
 5fa:	88 23       	and	r24, r24
 5fc:	61 f0       	breq	.+24     	; 0x616 <ObstacleGeneratorSM_Tick+0xea>
 5fe:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <str_index>
 602:	82 31       	cpi	r24, 0x12	; 18
 604:	40 f0       	brcs	.+16     	; 0x616 <ObstacleGeneratorSM_Tick+0xea>
 606:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <row1+0x10>
 60a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <row2+0x10>
 60e:	80 e1       	ldi	r24, 0x10	; 16
 610:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <str_index>
 614:	07 c0       	rjmp	.+14     	; 0x624 <ObstacleGeneratorSM_Tick+0xf8>
 616:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <str_index>
 61a:	8f 5f       	subi	r24, 0xFF	; 255
 61c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <str_index>
 620:	01 c0       	rjmp	.+2      	; 0x624 <ObstacleGeneratorSM_Tick+0xf8>
 622:	00 00       	nop
 624:	89 81       	ldd	r24, Y+1	; 0x01
 626:	9a 81       	ldd	r25, Y+2	; 0x02
 628:	2a 96       	adiw	r28, 0x0a	; 10
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	f8 94       	cli
 62e:	de bf       	out	0x3e, r29	; 62
 630:	0f be       	out	0x3f, r0	; 63
 632:	cd bf       	out	0x3d, r28	; 61
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <DisplaySM_Tick>:

unsigned char display_index = 0;

enum displaySM{display_start, display_scroll} displaySM;
int DisplaySM_Tick(int state)
{
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	00 d0       	rcall	.+0      	; 0x640 <DisplaySM_Tick+0x6>
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
 644:	9a 83       	std	Y+2, r25	; 0x02
 646:	89 83       	std	Y+1, r24	; 0x01
	
	
	//unsigned char back = 0;
	switch(state) //state transition
 648:	89 81       	ldd	r24, Y+1	; 0x01
 64a:	9a 81       	ldd	r25, Y+2	; 0x02
 64c:	00 97       	sbiw	r24, 0x00	; 0
 64e:	19 f0       	breq	.+6      	; 0x656 <DisplaySM_Tick+0x1c>
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	31 f0       	breq	.+12     	; 0x660 <DisplaySM_Tick+0x26>
 654:	0a c0       	rjmp	.+20     	; 0x66a <DisplaySM_Tick+0x30>
	{
		case display_start:
			state =  display_scroll;
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	9a 83       	std	Y+2, r25	; 0x02
 65c:	89 83       	std	Y+1, r24	; 0x01
		break;
 65e:	08 c0       	rjmp	.+16     	; 0x670 <DisplaySM_Tick+0x36>
		
		
		case display_scroll:
			state = display_scroll;
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	9a 83       	std	Y+2, r25	; 0x02
 666:	89 83       	std	Y+1, r24	; 0x01
		break;
 668:	03 c0       	rjmp	.+6      	; 0x670 <DisplaySM_Tick+0x36>
		
		default:
			state = display_start;
 66a:	1a 82       	std	Y+2, r1	; 0x02
 66c:	19 82       	std	Y+1, r1	; 0x01
		break;
 66e:	00 00       	nop
	}
	
	
	switch(state) //state action
 670:	89 81       	ldd	r24, Y+1	; 0x01
 672:	9a 81       	ldd	r25, Y+2	; 0x02
 674:	00 97       	sbiw	r24, 0x00	; 0
 676:	69 f0       	breq	.+26     	; 0x692 <DisplaySM_Tick+0x58>
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	09 f0       	breq	.+2      	; 0x67e <DisplaySM_Tick+0x44>
			LCD_ClearScreen();
			LCD_DisplayString(1, row1);
			LCD_DisplayString(17, row2);
		break;
		
		default: break;
 67c:	0b c0       	rjmp	.+22     	; 0x694 <DisplaySM_Tick+0x5a>
	{
		case display_start:
		break;
		
		case display_scroll:
			LCD_ClearScreen();
 67e:	24 dd       	rcall	.-1464   	; 0xc8 <LCD_ClearScreen>
			LCD_DisplayString(1, row1);
 680:	68 e0       	ldi	r22, 0x08	; 8
 682:	71 e0       	ldi	r23, 0x01	; 1
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	9a dd       	rcall	.-1228   	; 0x1bc <LCD_DisplayString>
			LCD_DisplayString(17, row2);
 688:	69 e1       	ldi	r22, 0x19	; 25
 68a:	71 e0       	ldi	r23, 0x01	; 1
 68c:	81 e1       	ldi	r24, 0x11	; 17
 68e:	96 dd       	rcall	.-1236   	; 0x1bc <LCD_DisplayString>
		break;
 690:	01 c0       	rjmp	.+2      	; 0x694 <DisplaySM_Tick+0x5a>
	
	
	switch(state) //state action
	{
		case display_start:
		break;
 692:	00 00       	nop
		break;
		
		default: break;
	}
	
	return state;
 694:	89 81       	ldd	r24, Y+1	; 0x01
 696:	9a 81       	ldd	r25, Y+2	; 0x02
	
}
 698:	0f 90       	pop	r0
 69a:	0f 90       	pop	r0
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	08 95       	ret

000006a2 <main>:
#include "ObstacleGenerator.h"
#include "KeypadReadSM.h"
#include "Display.h"

int main(void)
{
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62
 6ae:	a8 97       	sbiw	r28, 0x28	; 40
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	f8 94       	cli
 6b4:	de bf       	out	0x3e, r29	; 62
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 6ba:	84 e2       	ldi	r24, 0x24	; 36
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	2f ef       	ldi	r18, 0xFF	; 255
 6c0:	fc 01       	movw	r30, r24
 6c2:	20 83       	st	Z, r18
 6c4:	85 e2       	ldi	r24, 0x25	; 37
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	fc 01       	movw	r30, r24
 6ca:	10 82       	st	Z, r1
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 6cc:	87 e2       	ldi	r24, 0x27	; 39
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	20 ef       	ldi	r18, 0xF0	; 240
 6d2:	fc 01       	movw	r30, r24
 6d4:	20 83       	st	Z, r18
 6d6:	88 e2       	ldi	r24, 0x28	; 40
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	2f e0       	ldi	r18, 0x0F	; 15
 6dc:	fc 01       	movw	r30, r24
 6de:	20 83       	st	Z, r18
	DDRD = 0xFF; PORTD = 0x00;
 6e0:	8a e2       	ldi	r24, 0x2A	; 42
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	2f ef       	ldi	r18, 0xFF	; 255
 6e6:	fc 01       	movw	r30, r24
 6e8:	20 83       	st	Z, r18
 6ea:	8b e2       	ldi	r24, 0x2B	; 43
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	fc 01       	movw	r30, r24
 6f0:	10 82       	st	Z, r1

	/**Set individual task period********************************/
	unsigned long int Tick1_calc	= 500;
 6f2:	84 ef       	ldi	r24, 0xF4	; 244
 6f4:	91 e0       	ldi	r25, 0x01	; 1
 6f6:	a0 e0       	ldi	r26, 0x00	; 0
 6f8:	b0 e0       	ldi	r27, 0x00	; 0
 6fa:	8b 83       	std	Y+3, r24	; 0x03
 6fc:	9c 83       	std	Y+4, r25	; 0x04
 6fe:	ad 83       	std	Y+5, r26	; 0x05
 700:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int Tick2_calc	= 500;
 702:	84 ef       	ldi	r24, 0xF4	; 244
 704:	91 e0       	ldi	r25, 0x01	; 1
 706:	a0 e0       	ldi	r26, 0x00	; 0
 708:	b0 e0       	ldi	r27, 0x00	; 0
 70a:	8f 83       	std	Y+7, r24	; 0x07
 70c:	98 87       	std	Y+8, r25	; 0x08
 70e:	a9 87       	std	Y+9, r26	; 0x09
 710:	ba 87       	std	Y+10, r27	; 0x0a
	
	/**Set individual task properties********************************/
	
	//Calculating GCD
	unsigned long int tempGCD		= findGCD(Tick1_calc, Tick2_calc);
 712:	2f 81       	ldd	r18, Y+7	; 0x07
 714:	38 85       	ldd	r19, Y+8	; 0x08
 716:	49 85       	ldd	r20, Y+9	; 0x09
 718:	5a 85       	ldd	r21, Y+10	; 0x0a
 71a:	8b 81       	ldd	r24, Y+3	; 0x03
 71c:	9c 81       	ldd	r25, Y+4	; 0x04
 71e:	ad 81       	ldd	r26, Y+5	; 0x05
 720:	be 81       	ldd	r27, Y+6	; 0x06
 722:	bc 01       	movw	r22, r24
 724:	cd 01       	movw	r24, r26
 726:	82 de       	rcall	.-764    	; 0x42c <findGCD>
 728:	dc 01       	movw	r26, r24
 72a:	cb 01       	movw	r24, r22
 72c:	8b 87       	std	Y+11, r24	; 0x0b
 72e:	9c 87       	std	Y+12, r25	; 0x0c
 730:	ad 87       	std	Y+13, r26	; 0x0d
 732:	be 87       	std	Y+14, r27	; 0x0e
	unsigned long int GCD			= tempGCD;
 734:	8b 85       	ldd	r24, Y+11	; 0x0b
 736:	9c 85       	ldd	r25, Y+12	; 0x0c
 738:	ad 85       	ldd	r26, Y+13	; 0x0d
 73a:	be 85       	ldd	r27, Y+14	; 0x0e
 73c:	8f 87       	std	Y+15, r24	; 0x0f
 73e:	98 8b       	std	Y+16, r25	; 0x10
 740:	a9 8b       	std	Y+17, r26	; 0x11
 742:	ba 8b       	std	Y+18, r27	; 0x12
	//Recalculate GCD periods for scheduler
	unsigned long int Tick1_Period	= Tick1_calc/GCD;
 744:	8b 81       	ldd	r24, Y+3	; 0x03
 746:	9c 81       	ldd	r25, Y+4	; 0x04
 748:	ad 81       	ldd	r26, Y+5	; 0x05
 74a:	be 81       	ldd	r27, Y+6	; 0x06
 74c:	2f 85       	ldd	r18, Y+15	; 0x0f
 74e:	38 89       	ldd	r19, Y+16	; 0x10
 750:	49 89       	ldd	r20, Y+17	; 0x11
 752:	5a 89       	ldd	r21, Y+18	; 0x12
 754:	bc 01       	movw	r22, r24
 756:	cd 01       	movw	r24, r26
 758:	2e d1       	rcall	.+604    	; 0x9b6 <__udivmodsi4>
 75a:	da 01       	movw	r26, r20
 75c:	c9 01       	movw	r24, r18
 75e:	8b 8b       	std	Y+19, r24	; 0x13
 760:	9c 8b       	std	Y+20, r25	; 0x14
 762:	ad 8b       	std	Y+21, r26	; 0x15
 764:	be 8b       	std	Y+22, r27	; 0x16
	unsigned long int Tick2_period	= Tick2_calc/GCD;	
 766:	8f 81       	ldd	r24, Y+7	; 0x07
 768:	98 85       	ldd	r25, Y+8	; 0x08
 76a:	a9 85       	ldd	r26, Y+9	; 0x09
 76c:	ba 85       	ldd	r27, Y+10	; 0x0a
 76e:	2f 85       	ldd	r18, Y+15	; 0x0f
 770:	38 89       	ldd	r19, Y+16	; 0x10
 772:	49 89       	ldd	r20, Y+17	; 0x11
 774:	5a 89       	ldd	r21, Y+18	; 0x12
 776:	bc 01       	movw	r22, r24
 778:	cd 01       	movw	r24, r26
 77a:	1d d1       	rcall	.+570    	; 0x9b6 <__udivmodsi4>
 77c:	da 01       	movw	r26, r20
 77e:	c9 01       	movw	r24, r18
 780:	8f 8b       	std	Y+23, r24	; 0x17
 782:	98 8f       	std	Y+24, r25	; 0x18
 784:	a9 8f       	std	Y+25, r26	; 0x19
 786:	ba 8f       	std	Y+26, r27	; 0x1a
	static task task1, task2;
	task *tasks[]					= {&task1 , &task2};
 788:	81 e3       	ldi	r24, 0x31	; 49
 78a:	91 e0       	ldi	r25, 0x01	; 1
 78c:	9e 8f       	std	Y+30, r25	; 0x1e
 78e:	8d 8f       	std	Y+29, r24	; 0x1d
 790:	8c e3       	ldi	r24, 0x3C	; 60
 792:	91 e0       	ldi	r25, 0x01	; 1
 794:	98 a3       	std	Y+32, r25	; 0x20
 796:	8f 8f       	std	Y+31, r24	; 0x1f
	const unsigned short numTasks	= sizeof(tasks)/sizeof(task*);
 798:	82 e0       	ldi	r24, 0x02	; 2
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	9c 8f       	std	Y+28, r25	; 0x1c
 79e:	8b 8f       	std	Y+27, r24	; 0x1b
	
	/****************************************************************/
	
	/**Set individual task properties**************/
	task1.state						= 0;
 7a0:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <task1.2051>
	task1.period					= Tick1_Period;
 7a4:	8b 89       	ldd	r24, Y+19	; 0x13
 7a6:	9c 89       	ldd	r25, Y+20	; 0x14
 7a8:	ad 89       	ldd	r26, Y+21	; 0x15
 7aa:	be 89       	ldd	r27, Y+22	; 0x16
 7ac:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <task1.2051+0x1>
 7b0:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <task1.2051+0x2>
 7b4:	a0 93 34 01 	sts	0x0134, r26	; 0x800134 <task1.2051+0x3>
 7b8:	b0 93 35 01 	sts	0x0135, r27	; 0x800135 <task1.2051+0x4>
	task1.elapsedTime				= Tick1_Period;
 7bc:	8b 89       	ldd	r24, Y+19	; 0x13
 7be:	9c 89       	ldd	r25, Y+20	; 0x14
 7c0:	ad 89       	ldd	r26, Y+21	; 0x15
 7c2:	be 89       	ldd	r27, Y+22	; 0x16
 7c4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <task1.2051+0x5>
 7c8:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <task1.2051+0x6>
 7cc:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <task1.2051+0x7>
 7d0:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <task1.2051+0x8>
	task1.TickFct					= &ObstacleGeneratorSM_Tick;
 7d4:	86 e9       	ldi	r24, 0x96	; 150
 7d6:	92 e0       	ldi	r25, 0x02	; 2
 7d8:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <task1.2051+0xa>
 7dc:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <task1.2051+0x9>
	
	// Task 2
	task2.state						= -1;//Task initial state.
 7e0:	8f ef       	ldi	r24, 0xFF	; 255
 7e2:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <task2.2052>
	task2.period					= Tick2_period;//Task Period.
 7e6:	8f 89       	ldd	r24, Y+23	; 0x17
 7e8:	98 8d       	ldd	r25, Y+24	; 0x18
 7ea:	a9 8d       	ldd	r26, Y+25	; 0x19
 7ec:	ba 8d       	ldd	r27, Y+26	; 0x1a
 7ee:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <task2.2052+0x1>
 7f2:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <task2.2052+0x2>
 7f6:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <task2.2052+0x3>
 7fa:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <task2.2052+0x4>
	task2.elapsedTime				= Tick2_period;//Task current elapsed time.
 7fe:	8f 89       	ldd	r24, Y+23	; 0x17
 800:	98 8d       	ldd	r25, Y+24	; 0x18
 802:	a9 8d       	ldd	r26, Y+25	; 0x19
 804:	ba 8d       	ldd	r27, Y+26	; 0x1a
 806:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <task2.2052+0x5>
 80a:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <task2.2052+0x6>
 80e:	a0 93 43 01 	sts	0x0143, r26	; 0x800143 <task2.2052+0x7>
 812:	b0 93 44 01 	sts	0x0144, r27	; 0x800144 <task2.2052+0x8>
	task2.TickFct					= &DisplaySM_Tick;//Function pointer for the tick.
 816:	8d e1       	ldi	r24, 0x1D	; 29
 818:	93 e0       	ldi	r25, 0x03	; 3
 81a:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <task2.2052+0xa>
 81e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <task2.2052+0x9>

	/**********************************************/
	
	
	TimerSet(GCD);
 822:	8f 85       	ldd	r24, Y+15	; 0x0f
 824:	98 89       	ldd	r25, Y+16	; 0x10
 826:	a9 89       	ldd	r26, Y+17	; 0x11
 828:	ba 89       	ldd	r27, Y+18	; 0x12
 82a:	bc 01       	movw	r22, r24
 82c:	cd 01       	movw	r24, r26
 82e:	31 dd       	rcall	.-1438   	; 0x292 <TimerSet>
	TimerOn();
 830:	5d dd       	rcall	.-1350   	; 0x2ec <TimerOn>
	
	LCD_init();
 832:	53 dc       	rcall	.-1882   	; 0xda <LCD_init>
	
	while(1) 
	{
		for(unsigned short i = 0; i < numTasks; i++)
 834:	1a 82       	std	Y+2, r1	; 0x02
 836:	19 82       	std	Y+1, r1	; 0x01
 838:	9b c0       	rjmp	.+310    	; 0x970 <main+0x2ce>
		{
			if(tasks[i] -> elapsedTime == tasks[i]-> period)
 83a:	89 81       	ldd	r24, Y+1	; 0x01
 83c:	9a 81       	ldd	r25, Y+2	; 0x02
 83e:	88 0f       	add	r24, r24
 840:	99 1f       	adc	r25, r25
 842:	9e 01       	movw	r18, r28
 844:	2f 5f       	subi	r18, 0xFF	; 255
 846:	3f 4f       	sbci	r19, 0xFF	; 255
 848:	82 0f       	add	r24, r18
 84a:	93 1f       	adc	r25, r19
 84c:	4c 96       	adiw	r24, 0x1c	; 28
 84e:	fc 01       	movw	r30, r24
 850:	80 81       	ld	r24, Z
 852:	91 81       	ldd	r25, Z+1	; 0x01
 854:	fc 01       	movw	r30, r24
 856:	25 81       	ldd	r18, Z+5	; 0x05
 858:	36 81       	ldd	r19, Z+6	; 0x06
 85a:	47 81       	ldd	r20, Z+7	; 0x07
 85c:	50 85       	ldd	r21, Z+8	; 0x08
 85e:	89 81       	ldd	r24, Y+1	; 0x01
 860:	9a 81       	ldd	r25, Y+2	; 0x02
 862:	88 0f       	add	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	be 01       	movw	r22, r28
 868:	6f 5f       	subi	r22, 0xFF	; 255
 86a:	7f 4f       	sbci	r23, 0xFF	; 255
 86c:	86 0f       	add	r24, r22
 86e:	97 1f       	adc	r25, r23
 870:	4c 96       	adiw	r24, 0x1c	; 28
 872:	fc 01       	movw	r30, r24
 874:	80 81       	ld	r24, Z
 876:	91 81       	ldd	r25, Z+1	; 0x01
 878:	fc 01       	movw	r30, r24
 87a:	81 81       	ldd	r24, Z+1	; 0x01
 87c:	92 81       	ldd	r25, Z+2	; 0x02
 87e:	a3 81       	ldd	r26, Z+3	; 0x03
 880:	b4 81       	ldd	r27, Z+4	; 0x04
 882:	28 17       	cp	r18, r24
 884:	39 07       	cpc	r19, r25
 886:	4a 07       	cpc	r20, r26
 888:	5b 07       	cpc	r21, r27
 88a:	09 f0       	breq	.+2      	; 0x88e <main+0x1ec>
 88c:	45 c0       	rjmp	.+138    	; 0x918 <main+0x276>
			{
				tasks[i] -> state		= tasks[i] -> TickFct(tasks[i] -> state);
 88e:	89 81       	ldd	r24, Y+1	; 0x01
 890:	9a 81       	ldd	r25, Y+2	; 0x02
 892:	88 0f       	add	r24, r24
 894:	99 1f       	adc	r25, r25
 896:	9e 01       	movw	r18, r28
 898:	2f 5f       	subi	r18, 0xFF	; 255
 89a:	3f 4f       	sbci	r19, 0xFF	; 255
 89c:	82 0f       	add	r24, r18
 89e:	93 1f       	adc	r25, r19
 8a0:	4c 96       	adiw	r24, 0x1c	; 28
 8a2:	fc 01       	movw	r30, r24
 8a4:	00 81       	ld	r16, Z
 8a6:	11 81       	ldd	r17, Z+1	; 0x01
 8a8:	89 81       	ldd	r24, Y+1	; 0x01
 8aa:	9a 81       	ldd	r25, Y+2	; 0x02
 8ac:	88 0f       	add	r24, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	9e 01       	movw	r18, r28
 8b2:	2f 5f       	subi	r18, 0xFF	; 255
 8b4:	3f 4f       	sbci	r19, 0xFF	; 255
 8b6:	82 0f       	add	r24, r18
 8b8:	93 1f       	adc	r25, r19
 8ba:	4c 96       	adiw	r24, 0x1c	; 28
 8bc:	fc 01       	movw	r30, r24
 8be:	80 81       	ld	r24, Z
 8c0:	91 81       	ldd	r25, Z+1	; 0x01
 8c2:	fc 01       	movw	r30, r24
 8c4:	21 85       	ldd	r18, Z+9	; 0x09
 8c6:	32 85       	ldd	r19, Z+10	; 0x0a
 8c8:	89 81       	ldd	r24, Y+1	; 0x01
 8ca:	9a 81       	ldd	r25, Y+2	; 0x02
 8cc:	88 0f       	add	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	ae 01       	movw	r20, r28
 8d2:	4f 5f       	subi	r20, 0xFF	; 255
 8d4:	5f 4f       	sbci	r21, 0xFF	; 255
 8d6:	84 0f       	add	r24, r20
 8d8:	95 1f       	adc	r25, r21
 8da:	4c 96       	adiw	r24, 0x1c	; 28
 8dc:	fc 01       	movw	r30, r24
 8de:	80 81       	ld	r24, Z
 8e0:	91 81       	ldd	r25, Z+1	; 0x01
 8e2:	fc 01       	movw	r30, r24
 8e4:	80 81       	ld	r24, Z
 8e6:	08 2e       	mov	r0, r24
 8e8:	00 0c       	add	r0, r0
 8ea:	99 0b       	sbc	r25, r25
 8ec:	f9 01       	movw	r30, r18
 8ee:	09 95       	icall
 8f0:	f8 01       	movw	r30, r16
 8f2:	80 83       	st	Z, r24
				tasks[i] -> elapsedTime = 0;
 8f4:	89 81       	ldd	r24, Y+1	; 0x01
 8f6:	9a 81       	ldd	r25, Y+2	; 0x02
 8f8:	88 0f       	add	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	9e 01       	movw	r18, r28
 8fe:	2f 5f       	subi	r18, 0xFF	; 255
 900:	3f 4f       	sbci	r19, 0xFF	; 255
 902:	82 0f       	add	r24, r18
 904:	93 1f       	adc	r25, r19
 906:	4c 96       	adiw	r24, 0x1c	; 28
 908:	fc 01       	movw	r30, r24
 90a:	80 81       	ld	r24, Z
 90c:	91 81       	ldd	r25, Z+1	; 0x01
 90e:	fc 01       	movw	r30, r24
 910:	15 82       	std	Z+5, r1	; 0x05
 912:	16 82       	std	Z+6, r1	; 0x06
 914:	17 82       	std	Z+7, r1	; 0x07
 916:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i] -> elapsedTime += 1;
 918:	89 81       	ldd	r24, Y+1	; 0x01
 91a:	9a 81       	ldd	r25, Y+2	; 0x02
 91c:	88 0f       	add	r24, r24
 91e:	99 1f       	adc	r25, r25
 920:	9e 01       	movw	r18, r28
 922:	2f 5f       	subi	r18, 0xFF	; 255
 924:	3f 4f       	sbci	r19, 0xFF	; 255
 926:	82 0f       	add	r24, r18
 928:	93 1f       	adc	r25, r19
 92a:	4c 96       	adiw	r24, 0x1c	; 28
 92c:	fc 01       	movw	r30, r24
 92e:	20 81       	ld	r18, Z
 930:	31 81       	ldd	r19, Z+1	; 0x01
 932:	89 81       	ldd	r24, Y+1	; 0x01
 934:	9a 81       	ldd	r25, Y+2	; 0x02
 936:	88 0f       	add	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	ae 01       	movw	r20, r28
 93c:	4f 5f       	subi	r20, 0xFF	; 255
 93e:	5f 4f       	sbci	r21, 0xFF	; 255
 940:	84 0f       	add	r24, r20
 942:	95 1f       	adc	r25, r21
 944:	4c 96       	adiw	r24, 0x1c	; 28
 946:	fc 01       	movw	r30, r24
 948:	80 81       	ld	r24, Z
 94a:	91 81       	ldd	r25, Z+1	; 0x01
 94c:	fc 01       	movw	r30, r24
 94e:	85 81       	ldd	r24, Z+5	; 0x05
 950:	96 81       	ldd	r25, Z+6	; 0x06
 952:	a7 81       	ldd	r26, Z+7	; 0x07
 954:	b0 85       	ldd	r27, Z+8	; 0x08
 956:	01 96       	adiw	r24, 0x01	; 1
 958:	a1 1d       	adc	r26, r1
 95a:	b1 1d       	adc	r27, r1
 95c:	f9 01       	movw	r30, r18
 95e:	85 83       	std	Z+5, r24	; 0x05
 960:	96 83       	std	Z+6, r25	; 0x06
 962:	a7 83       	std	Z+7, r26	; 0x07
 964:	b0 87       	std	Z+8, r27	; 0x08
	
	LCD_init();
	
	while(1) 
	{
		for(unsigned short i = 0; i < numTasks; i++)
 966:	89 81       	ldd	r24, Y+1	; 0x01
 968:	9a 81       	ldd	r25, Y+2	; 0x02
 96a:	01 96       	adiw	r24, 0x01	; 1
 96c:	9a 83       	std	Y+2, r25	; 0x02
 96e:	89 83       	std	Y+1, r24	; 0x01
 970:	29 81       	ldd	r18, Y+1	; 0x01
 972:	3a 81       	ldd	r19, Y+2	; 0x02
 974:	8b 8d       	ldd	r24, Y+27	; 0x1b
 976:	9c 8d       	ldd	r25, Y+28	; 0x1c
 978:	28 17       	cp	r18, r24
 97a:	39 07       	cpc	r19, r25
 97c:	08 f4       	brcc	.+2      	; 0x980 <main+0x2de>
 97e:	5d cf       	rjmp	.-326    	; 0x83a <main+0x198>
				tasks[i] -> state		= tasks[i] -> TickFct(tasks[i] -> state);
				tasks[i] -> elapsedTime = 0;
			}
			tasks[i] -> elapsedTime += 1;
		}
		while(!TimerFlag);
 980:	00 00       	nop
 982:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 986:	88 23       	and	r24, r24
 988:	e1 f3       	breq	.-8      	; 0x982 <main+0x2e0>
		TimerFlag = 0;
 98a:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <__data_end>
	}
 98e:	52 cf       	rjmp	.-348    	; 0x834 <main+0x192>

00000990 <__divmodhi4>:
 990:	97 fb       	bst	r25, 7
 992:	07 2e       	mov	r0, r23
 994:	16 f4       	brtc	.+4      	; 0x99a <__divmodhi4+0xa>
 996:	00 94       	com	r0
 998:	06 d0       	rcall	.+12     	; 0x9a6 <__divmodhi4_neg1>
 99a:	77 fd       	sbrc	r23, 7
 99c:	08 d0       	rcall	.+16     	; 0x9ae <__divmodhi4_neg2>
 99e:	2d d0       	rcall	.+90     	; 0x9fa <__udivmodhi4>
 9a0:	07 fc       	sbrc	r0, 7
 9a2:	05 d0       	rcall	.+10     	; 0x9ae <__divmodhi4_neg2>
 9a4:	3e f4       	brtc	.+14     	; 0x9b4 <__divmodhi4_exit>

000009a6 <__divmodhi4_neg1>:
 9a6:	90 95       	com	r25
 9a8:	81 95       	neg	r24
 9aa:	9f 4f       	sbci	r25, 0xFF	; 255
 9ac:	08 95       	ret

000009ae <__divmodhi4_neg2>:
 9ae:	70 95       	com	r23
 9b0:	61 95       	neg	r22
 9b2:	7f 4f       	sbci	r23, 0xFF	; 255

000009b4 <__divmodhi4_exit>:
 9b4:	08 95       	ret

000009b6 <__udivmodsi4>:
 9b6:	a1 e2       	ldi	r26, 0x21	; 33
 9b8:	1a 2e       	mov	r1, r26
 9ba:	aa 1b       	sub	r26, r26
 9bc:	bb 1b       	sub	r27, r27
 9be:	fd 01       	movw	r30, r26
 9c0:	0d c0       	rjmp	.+26     	; 0x9dc <__udivmodsi4_ep>

000009c2 <__udivmodsi4_loop>:
 9c2:	aa 1f       	adc	r26, r26
 9c4:	bb 1f       	adc	r27, r27
 9c6:	ee 1f       	adc	r30, r30
 9c8:	ff 1f       	adc	r31, r31
 9ca:	a2 17       	cp	r26, r18
 9cc:	b3 07       	cpc	r27, r19
 9ce:	e4 07       	cpc	r30, r20
 9d0:	f5 07       	cpc	r31, r21
 9d2:	20 f0       	brcs	.+8      	; 0x9dc <__udivmodsi4_ep>
 9d4:	a2 1b       	sub	r26, r18
 9d6:	b3 0b       	sbc	r27, r19
 9d8:	e4 0b       	sbc	r30, r20
 9da:	f5 0b       	sbc	r31, r21

000009dc <__udivmodsi4_ep>:
 9dc:	66 1f       	adc	r22, r22
 9de:	77 1f       	adc	r23, r23
 9e0:	88 1f       	adc	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	1a 94       	dec	r1
 9e6:	69 f7       	brne	.-38     	; 0x9c2 <__udivmodsi4_loop>
 9e8:	60 95       	com	r22
 9ea:	70 95       	com	r23
 9ec:	80 95       	com	r24
 9ee:	90 95       	com	r25
 9f0:	9b 01       	movw	r18, r22
 9f2:	ac 01       	movw	r20, r24
 9f4:	bd 01       	movw	r22, r26
 9f6:	cf 01       	movw	r24, r30
 9f8:	08 95       	ret

000009fa <__udivmodhi4>:
 9fa:	aa 1b       	sub	r26, r26
 9fc:	bb 1b       	sub	r27, r27
 9fe:	51 e1       	ldi	r21, 0x11	; 17
 a00:	07 c0       	rjmp	.+14     	; 0xa10 <__udivmodhi4_ep>

00000a02 <__udivmodhi4_loop>:
 a02:	aa 1f       	adc	r26, r26
 a04:	bb 1f       	adc	r27, r27
 a06:	a6 17       	cp	r26, r22
 a08:	b7 07       	cpc	r27, r23
 a0a:	10 f0       	brcs	.+4      	; 0xa10 <__udivmodhi4_ep>
 a0c:	a6 1b       	sub	r26, r22
 a0e:	b7 0b       	sbc	r27, r23

00000a10 <__udivmodhi4_ep>:
 a10:	88 1f       	adc	r24, r24
 a12:	99 1f       	adc	r25, r25
 a14:	5a 95       	dec	r21
 a16:	a9 f7       	brne	.-22     	; 0xa02 <__udivmodhi4_loop>
 a18:	80 95       	com	r24
 a1a:	90 95       	com	r25
 a1c:	bc 01       	movw	r22, r24
 a1e:	cd 01       	movw	r24, r26
 a20:	08 95       	ret

00000a22 <do_rand>:
 a22:	8f 92       	push	r8
 a24:	9f 92       	push	r9
 a26:	af 92       	push	r10
 a28:	bf 92       	push	r11
 a2a:	cf 92       	push	r12
 a2c:	df 92       	push	r13
 a2e:	ef 92       	push	r14
 a30:	ff 92       	push	r15
 a32:	cf 93       	push	r28
 a34:	df 93       	push	r29
 a36:	ec 01       	movw	r28, r24
 a38:	68 81       	ld	r22, Y
 a3a:	79 81       	ldd	r23, Y+1	; 0x01
 a3c:	8a 81       	ldd	r24, Y+2	; 0x02
 a3e:	9b 81       	ldd	r25, Y+3	; 0x03
 a40:	61 15       	cp	r22, r1
 a42:	71 05       	cpc	r23, r1
 a44:	81 05       	cpc	r24, r1
 a46:	91 05       	cpc	r25, r1
 a48:	21 f4       	brne	.+8      	; 0xa52 <do_rand+0x30>
 a4a:	64 e2       	ldi	r22, 0x24	; 36
 a4c:	79 ed       	ldi	r23, 0xD9	; 217
 a4e:	8b e5       	ldi	r24, 0x5B	; 91
 a50:	97 e0       	ldi	r25, 0x07	; 7
 a52:	2d e1       	ldi	r18, 0x1D	; 29
 a54:	33 ef       	ldi	r19, 0xF3	; 243
 a56:	41 e0       	ldi	r20, 0x01	; 1
 a58:	50 e0       	ldi	r21, 0x00	; 0
 a5a:	38 d0       	rcall	.+112    	; 0xacc <__divmodsi4>
 a5c:	49 01       	movw	r8, r18
 a5e:	5a 01       	movw	r10, r20
 a60:	9b 01       	movw	r18, r22
 a62:	ac 01       	movw	r20, r24
 a64:	a7 ea       	ldi	r26, 0xA7	; 167
 a66:	b1 e4       	ldi	r27, 0x41	; 65
 a68:	4d d0       	rcall	.+154    	; 0xb04 <__muluhisi3>
 a6a:	6b 01       	movw	r12, r22
 a6c:	7c 01       	movw	r14, r24
 a6e:	ac ee       	ldi	r26, 0xEC	; 236
 a70:	b4 ef       	ldi	r27, 0xF4	; 244
 a72:	a5 01       	movw	r20, r10
 a74:	94 01       	movw	r18, r8
 a76:	52 d0       	rcall	.+164    	; 0xb1c <__mulohisi3>
 a78:	dc 01       	movw	r26, r24
 a7a:	cb 01       	movw	r24, r22
 a7c:	8c 0d       	add	r24, r12
 a7e:	9d 1d       	adc	r25, r13
 a80:	ae 1d       	adc	r26, r14
 a82:	bf 1d       	adc	r27, r15
 a84:	b7 ff       	sbrs	r27, 7
 a86:	03 c0       	rjmp	.+6      	; 0xa8e <do_rand+0x6c>
 a88:	01 97       	sbiw	r24, 0x01	; 1
 a8a:	a1 09       	sbc	r26, r1
 a8c:	b0 48       	sbci	r27, 0x80	; 128
 a8e:	88 83       	st	Y, r24
 a90:	99 83       	std	Y+1, r25	; 0x01
 a92:	aa 83       	std	Y+2, r26	; 0x02
 a94:	bb 83       	std	Y+3, r27	; 0x03
 a96:	9f 77       	andi	r25, 0x7F	; 127
 a98:	df 91       	pop	r29
 a9a:	cf 91       	pop	r28
 a9c:	ff 90       	pop	r15
 a9e:	ef 90       	pop	r14
 aa0:	df 90       	pop	r13
 aa2:	cf 90       	pop	r12
 aa4:	bf 90       	pop	r11
 aa6:	af 90       	pop	r10
 aa8:	9f 90       	pop	r9
 aaa:	8f 90       	pop	r8
 aac:	08 95       	ret

00000aae <rand_r>:
 aae:	b9 cf       	rjmp	.-142    	; 0xa22 <do_rand>

00000ab0 <rand>:
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	91 e0       	ldi	r25, 0x01	; 1
 ab4:	b6 cf       	rjmp	.-148    	; 0xa22 <do_rand>

00000ab6 <srand>:
 ab6:	a0 e0       	ldi	r26, 0x00	; 0
 ab8:	b0 e0       	ldi	r27, 0x00	; 0
 aba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 abe:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 ac2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 ac6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 aca:	08 95       	ret

00000acc <__divmodsi4>:
 acc:	05 2e       	mov	r0, r21
 ace:	97 fb       	bst	r25, 7
 ad0:	16 f4       	brtc	.+4      	; 0xad6 <__divmodsi4+0xa>
 ad2:	00 94       	com	r0
 ad4:	0f d0       	rcall	.+30     	; 0xaf4 <__negsi2>
 ad6:	57 fd       	sbrc	r21, 7
 ad8:	05 d0       	rcall	.+10     	; 0xae4 <__divmodsi4_neg2>
 ada:	6d df       	rcall	.-294    	; 0x9b6 <__udivmodsi4>
 adc:	07 fc       	sbrc	r0, 7
 ade:	02 d0       	rcall	.+4      	; 0xae4 <__divmodsi4_neg2>
 ae0:	46 f4       	brtc	.+16     	; 0xaf2 <__divmodsi4_exit>
 ae2:	08 c0       	rjmp	.+16     	; 0xaf4 <__negsi2>

00000ae4 <__divmodsi4_neg2>:
 ae4:	50 95       	com	r21
 ae6:	40 95       	com	r20
 ae8:	30 95       	com	r19
 aea:	21 95       	neg	r18
 aec:	3f 4f       	sbci	r19, 0xFF	; 255
 aee:	4f 4f       	sbci	r20, 0xFF	; 255
 af0:	5f 4f       	sbci	r21, 0xFF	; 255

00000af2 <__divmodsi4_exit>:
 af2:	08 95       	ret

00000af4 <__negsi2>:
 af4:	90 95       	com	r25
 af6:	80 95       	com	r24
 af8:	70 95       	com	r23
 afa:	61 95       	neg	r22
 afc:	7f 4f       	sbci	r23, 0xFF	; 255
 afe:	8f 4f       	sbci	r24, 0xFF	; 255
 b00:	9f 4f       	sbci	r25, 0xFF	; 255
 b02:	08 95       	ret

00000b04 <__muluhisi3>:
 b04:	0f d0       	rcall	.+30     	; 0xb24 <__umulhisi3>
 b06:	a5 9f       	mul	r26, r21
 b08:	90 0d       	add	r25, r0
 b0a:	b4 9f       	mul	r27, r20
 b0c:	90 0d       	add	r25, r0
 b0e:	a4 9f       	mul	r26, r20
 b10:	80 0d       	add	r24, r0
 b12:	91 1d       	adc	r25, r1
 b14:	11 24       	eor	r1, r1
 b16:	08 95       	ret

00000b18 <__mulshisi3>:
 b18:	b7 ff       	sbrs	r27, 7
 b1a:	f4 cf       	rjmp	.-24     	; 0xb04 <__muluhisi3>

00000b1c <__mulohisi3>:
 b1c:	f3 df       	rcall	.-26     	; 0xb04 <__muluhisi3>
 b1e:	82 1b       	sub	r24, r18
 b20:	93 0b       	sbc	r25, r19
 b22:	08 95       	ret

00000b24 <__umulhisi3>:
 b24:	a2 9f       	mul	r26, r18
 b26:	b0 01       	movw	r22, r0
 b28:	b3 9f       	mul	r27, r19
 b2a:	c0 01       	movw	r24, r0
 b2c:	a3 9f       	mul	r26, r19
 b2e:	70 0d       	add	r23, r0
 b30:	81 1d       	adc	r24, r1
 b32:	11 24       	eor	r1, r1
 b34:	91 1d       	adc	r25, r1
 b36:	b2 9f       	mul	r27, r18
 b38:	70 0d       	add	r23, r0
 b3a:	81 1d       	adc	r24, r1
 b3c:	11 24       	eor	r1, r1
 b3e:	91 1d       	adc	r25, r1
 b40:	08 95       	ret

00000b42 <_exit>:
 b42:	f8 94       	cli

00000b44 <__stop_program>:
 b44:	ff cf       	rjmp	.-2      	; 0xb44 <__stop_program>
