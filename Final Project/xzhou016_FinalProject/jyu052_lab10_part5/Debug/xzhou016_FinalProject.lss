
xzhou016_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  000010c4  00001158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000038  00800158  00800158  000011b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000955  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001bf  00000000  00000000  00001c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c44  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  00002a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054d  00000000  00000000  00002e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000089b  00000000  00000000  000033c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003c64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	b4 c1       	rjmp	.+872    	; 0x39e <__vector_13>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 ec       	ldi	r30, 0xC4	; 196
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a8 35       	cpi	r26, 0x58	; 88
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a8 e5       	ldi	r26, 0x58	; 88
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 39       	cpi	r26, 0x90	; 144
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	44 d5       	rcall	.+2696   	; 0xb4c <main>
      c4:	fd c7       	rjmp	.+4090   	; 0x10c0 <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
		Q->front %= Q->capacity;		// Modulate according to queue capacity
		Q->num_objects--;				// Decrement number of objects
		return tmp;						// Return data
	}
	return '\0';						// Else return null to indicate empty
}
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	18 d0       	rcall	.+48     	; 0x104 <LCD_WriteCommand>
      d4:	df 91       	pop	r29
      d6:	cf 91       	pop	r28
      d8:	08 95       	ret

000000da <LCD_init>:
      da:	cf 93       	push	r28
      dc:	df 93       	push	r29
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
      e2:	84 e6       	ldi	r24, 0x64	; 100
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	a6 d0       	rcall	.+332    	; 0x234 <delay_ms>
      e8:	88 e3       	ldi	r24, 0x38	; 56
      ea:	0c d0       	rcall	.+24     	; 0x104 <LCD_WriteCommand>
      ec:	86 e0       	ldi	r24, 0x06	; 6
      ee:	0a d0       	rcall	.+20     	; 0x104 <LCD_WriteCommand>
      f0:	8f e0       	ldi	r24, 0x0F	; 15
      f2:	08 d0       	rcall	.+16     	; 0x104 <LCD_WriteCommand>
      f4:	81 e0       	ldi	r24, 0x01	; 1
      f6:	06 d0       	rcall	.+12     	; 0x104 <LCD_WriteCommand>
      f8:	8a e0       	ldi	r24, 0x0A	; 10
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	9b d0       	rcall	.+310    	; 0x234 <delay_ms>
      fe:	df 91       	pop	r29
     100:	cf 91       	pop	r28
     102:	08 95       	ret

00000104 <LCD_WriteCommand>:
     104:	cf 93       	push	r28
     106:	df 93       	push	r29
     108:	1f 92       	push	r1
     10a:	cd b7       	in	r28, 0x3d	; 61
     10c:	de b7       	in	r29, 0x3e	; 62
     10e:	89 83       	std	Y+1, r24	; 0x01
     110:	8b e2       	ldi	r24, 0x2B	; 43
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	2b e2       	ldi	r18, 0x2B	; 43
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	f9 01       	movw	r30, r18
     11a:	20 81       	ld	r18, Z
     11c:	2f 7b       	andi	r18, 0xBF	; 191
     11e:	fc 01       	movw	r30, r24
     120:	20 83       	st	Z, r18
     122:	85 e2       	ldi	r24, 0x25	; 37
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	29 81       	ldd	r18, Y+1	; 0x01
     128:	fc 01       	movw	r30, r24
     12a:	20 83       	st	Z, r18
     12c:	8b e2       	ldi	r24, 0x2B	; 43
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	2b e2       	ldi	r18, 0x2B	; 43
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	f9 01       	movw	r30, r18
     136:	20 81       	ld	r18, Z
     138:	20 68       	ori	r18, 0x80	; 128
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
     13e:	00 00       	nop
     140:	8b e2       	ldi	r24, 0x2B	; 43
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	2b e2       	ldi	r18, 0x2B	; 43
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	f9 01       	movw	r30, r18
     14a:	20 81       	ld	r18, Z
     14c:	2f 77       	andi	r18, 0x7F	; 127
     14e:	fc 01       	movw	r30, r24
     150:	20 83       	st	Z, r18
     152:	82 e0       	ldi	r24, 0x02	; 2
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	6e d0       	rcall	.+220    	; 0x234 <delay_ms>
     158:	0f 90       	pop	r0
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <LCD_WriteData>:
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	1f 92       	push	r1
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	89 83       	std	Y+1, r24	; 0x01
     16c:	8b e2       	ldi	r24, 0x2B	; 43
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	2b e2       	ldi	r18, 0x2B	; 43
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	f9 01       	movw	r30, r18
     176:	20 81       	ld	r18, Z
     178:	20 64       	ori	r18, 0x40	; 64
     17a:	fc 01       	movw	r30, r24
     17c:	20 83       	st	Z, r18
     17e:	85 e2       	ldi	r24, 0x25	; 37
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	29 81       	ldd	r18, Y+1	; 0x01
     184:	fc 01       	movw	r30, r24
     186:	20 83       	st	Z, r18
     188:	8b e2       	ldi	r24, 0x2B	; 43
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	2b e2       	ldi	r18, 0x2B	; 43
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	f9 01       	movw	r30, r18
     192:	20 81       	ld	r18, Z
     194:	20 68       	ori	r18, 0x80	; 128
     196:	fc 01       	movw	r30, r24
     198:	20 83       	st	Z, r18
     19a:	00 00       	nop
     19c:	8b e2       	ldi	r24, 0x2B	; 43
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	2b e2       	ldi	r18, 0x2B	; 43
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	f9 01       	movw	r30, r18
     1a6:	20 81       	ld	r18, Z
     1a8:	2f 77       	andi	r18, 0x7F	; 127
     1aa:	fc 01       	movw	r30, r24
     1ac:	20 83       	st	Z, r18
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	40 d0       	rcall	.+128    	; 0x234 <delay_ms>
     1b4:	0f 90       	pop	r0
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <LCD_DisplayString>:
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	00 d0       	rcall	.+0      	; 0x1c2 <LCD_DisplayString+0x6>
     1c2:	00 d0       	rcall	.+0      	; 0x1c4 <LCD_DisplayString+0x8>
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
     1c8:	8a 83       	std	Y+2, r24	; 0x02
     1ca:	7c 83       	std	Y+4, r23	; 0x04
     1cc:	6b 83       	std	Y+3, r22	; 0x03
     1ce:	8a 81       	ldd	r24, Y+2	; 0x02
     1d0:	89 83       	std	Y+1, r24	; 0x01
     1d2:	0f c0       	rjmp	.+30     	; 0x1f2 <LCD_DisplayString+0x36>
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	98 0f       	add	r25, r24
     1da:	99 83       	std	Y+1, r25	; 0x01
     1dc:	17 d0       	rcall	.+46     	; 0x20c <LCD_Cursor>
     1de:	8b 81       	ldd	r24, Y+3	; 0x03
     1e0:	9c 81       	ldd	r25, Y+4	; 0x04
     1e2:	9c 01       	movw	r18, r24
     1e4:	2f 5f       	subi	r18, 0xFF	; 255
     1e6:	3f 4f       	sbci	r19, 0xFF	; 255
     1e8:	3c 83       	std	Y+4, r19	; 0x04
     1ea:	2b 83       	std	Y+3, r18	; 0x03
     1ec:	fc 01       	movw	r30, r24
     1ee:	80 81       	ld	r24, Z
     1f0:	b7 df       	rcall	.-146    	; 0x160 <LCD_WriteData>
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	9c 81       	ldd	r25, Y+4	; 0x04
     1f6:	fc 01       	movw	r30, r24
     1f8:	80 81       	ld	r24, Z
     1fa:	88 23       	and	r24, r24
     1fc:	59 f7       	brne	.-42     	; 0x1d4 <LCD_DisplayString+0x18>
     1fe:	0f 90       	pop	r0
     200:	0f 90       	pop	r0
     202:	0f 90       	pop	r0
     204:	0f 90       	pop	r0
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	08 95       	ret

0000020c <LCD_Cursor>:
     20c:	cf 93       	push	r28
     20e:	df 93       	push	r29
     210:	1f 92       	push	r1
     212:	cd b7       	in	r28, 0x3d	; 61
     214:	de b7       	in	r29, 0x3e	; 62
     216:	89 83       	std	Y+1, r24	; 0x01
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	81 31       	cpi	r24, 0x11	; 17
     21c:	20 f4       	brcc	.+8      	; 0x226 <LCD_Cursor+0x1a>
     21e:	89 81       	ldd	r24, Y+1	; 0x01
     220:	81 58       	subi	r24, 0x81	; 129
     222:	70 df       	rcall	.-288    	; 0x104 <LCD_WriteCommand>
     224:	03 c0       	rjmp	.+6      	; 0x22c <LCD_Cursor+0x20>
     226:	89 81       	ldd	r24, Y+1	; 0x01
     228:	81 55       	subi	r24, 0x51	; 81
     22a:	6c df       	rcall	.-296    	; 0x104 <LCD_WriteCommand>
     22c:	0f 90       	pop	r0
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	08 95       	ret

00000234 <delay_ms>:
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	00 d0       	rcall	.+0      	; 0x23a <delay_ms+0x6>
     23a:	00 d0       	rcall	.+0      	; 0x23c <delay_ms+0x8>
     23c:	00 d0       	rcall	.+0      	; 0x23e <delay_ms+0xa>
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	9e 83       	std	Y+6, r25	; 0x06
     244:	8d 83       	std	Y+5, r24	; 0x05
     246:	1a 82       	std	Y+2, r1	; 0x02
     248:	19 82       	std	Y+1, r1	; 0x01
     24a:	13 c0       	rjmp	.+38     	; 0x272 <delay_ms+0x3e>
     24c:	1c 82       	std	Y+4, r1	; 0x04
     24e:	1b 82       	std	Y+3, r1	; 0x03
     250:	06 c0       	rjmp	.+12     	; 0x25e <delay_ms+0x2a>
     252:	00 00       	nop
     254:	8b 81       	ldd	r24, Y+3	; 0x03
     256:	9c 81       	ldd	r25, Y+4	; 0x04
     258:	01 96       	adiw	r24, 0x01	; 1
     25a:	9c 83       	std	Y+4, r25	; 0x04
     25c:	8b 83       	std	Y+3, r24	; 0x03
     25e:	8b 81       	ldd	r24, Y+3	; 0x03
     260:	9c 81       	ldd	r25, Y+4	; 0x04
     262:	87 30       	cpi	r24, 0x07	; 7
     264:	93 40       	sbci	r25, 0x03	; 3
     266:	ac f3       	brlt	.-22     	; 0x252 <delay_ms+0x1e>
     268:	89 81       	ldd	r24, Y+1	; 0x01
     26a:	9a 81       	ldd	r25, Y+2	; 0x02
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	9a 83       	std	Y+2, r25	; 0x02
     270:	89 83       	std	Y+1, r24	; 0x01
     272:	29 81       	ldd	r18, Y+1	; 0x01
     274:	3a 81       	ldd	r19, Y+2	; 0x02
     276:	8d 81       	ldd	r24, Y+5	; 0x05
     278:	9e 81       	ldd	r25, Y+6	; 0x06
     27a:	28 17       	cp	r18, r24
     27c:	39 07       	cpc	r19, r25
     27e:	34 f3       	brlt	.-52     	; 0x24c <delay_ms+0x18>
     280:	26 96       	adiw	r28, 0x06	; 6
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	08 95       	ret

00000292 <GetBit>:
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	00 d0       	rcall	.+0      	; 0x298 <GetBit+0x6>
     298:	cd b7       	in	r28, 0x3d	; 61
     29a:	de b7       	in	r29, 0x3e	; 62
     29c:	89 83       	std	Y+1, r24	; 0x01
     29e:	6a 83       	std	Y+2, r22	; 0x02
     2a0:	8a 81       	ldd	r24, Y+2	; 0x02
     2a2:	28 2f       	mov	r18, r24
     2a4:	30 e0       	ldi	r19, 0x00	; 0
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <GetBit+0x1e>
     2ac:	88 0f       	add	r24, r24
     2ae:	99 1f       	adc	r25, r25
     2b0:	2a 95       	dec	r18
     2b2:	e2 f7       	brpl	.-8      	; 0x2ac <GetBit+0x1a>
     2b4:	98 2f       	mov	r25, r24
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	89 23       	and	r24, r25
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	08 95       	ret

000002c4 <TimerSet>:
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	00 d0       	rcall	.+0      	; 0x2ca <TimerSet+0x6>
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <TimerSet+0x8>
     2cc:	cd b7       	in	r28, 0x3d	; 61
     2ce:	de b7       	in	r29, 0x3e	; 62
     2d0:	69 83       	std	Y+1, r22	; 0x01
     2d2:	7a 83       	std	Y+2, r23	; 0x02
     2d4:	8b 83       	std	Y+3, r24	; 0x03
     2d6:	9c 83       	std	Y+4, r25	; 0x04
     2d8:	89 81       	ldd	r24, Y+1	; 0x01
     2da:	9a 81       	ldd	r25, Y+2	; 0x02
     2dc:	ab 81       	ldd	r26, Y+3	; 0x03
     2de:	bc 81       	ldd	r27, Y+4	; 0x04
     2e0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M>
     2e4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x1>
     2e8:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <_avr_timer_M+0x2>
     2ec:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <_avr_timer_M+0x3>
     2f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     2f4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     2f8:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     2fc:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     300:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <_avr_timer_cntcurr>
     304:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <_avr_timer_cntcurr+0x1>
     308:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <_avr_timer_cntcurr+0x2>
     30c:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <_avr_timer_cntcurr+0x3>
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <TimerOn>:
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	81 e8       	ldi	r24, 0x81	; 129
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	2b e0       	ldi	r18, 0x0B	; 11
     32c:	fc 01       	movw	r30, r24
     32e:	20 83       	st	Z, r18
     330:	88 e8       	ldi	r24, 0x88	; 136
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	2d e7       	ldi	r18, 0x7D	; 125
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	fc 01       	movw	r30, r24
     33a:	31 83       	std	Z+1, r19	; 0x01
     33c:	20 83       	st	Z, r18
     33e:	8f e6       	ldi	r24, 0x6F	; 111
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	22 e0       	ldi	r18, 0x02	; 2
     344:	fc 01       	movw	r30, r24
     346:	20 83       	st	Z, r18
     348:	84 e8       	ldi	r24, 0x84	; 132
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	fc 01       	movw	r30, r24
     34e:	11 82       	std	Z+1, r1	; 0x01
     350:	10 82       	st	Z, r1
     352:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     356:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     35a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     35e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     362:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <_avr_timer_cntcurr>
     366:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <_avr_timer_cntcurr+0x1>
     36a:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <_avr_timer_cntcurr+0x2>
     36e:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <_avr_timer_cntcurr+0x3>
     372:	8f e5       	ldi	r24, 0x5F	; 95
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	2f e5       	ldi	r18, 0x5F	; 95
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	f9 01       	movw	r30, r18
     37c:	20 81       	ld	r18, Z
     37e:	20 68       	ori	r18, 0x80	; 128
     380:	fc 01       	movw	r30, r24
     382:	20 83       	st	Z, r18
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <TimerISR>:
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <__data_end>
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret

0000039e <__vector_13>:
     39e:	1f 92       	push	r1
     3a0:	0f 92       	push	r0
     3a2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     3a6:	0f 92       	push	r0
     3a8:	11 24       	eor	r1, r1
     3aa:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     3ae:	0f 92       	push	r0
     3b0:	2f 93       	push	r18
     3b2:	3f 93       	push	r19
     3b4:	4f 93       	push	r20
     3b6:	5f 93       	push	r21
     3b8:	6f 93       	push	r22
     3ba:	7f 93       	push	r23
     3bc:	8f 93       	push	r24
     3be:	9f 93       	push	r25
     3c0:	af 93       	push	r26
     3c2:	bf 93       	push	r27
     3c4:	ef 93       	push	r30
     3c6:	ff 93       	push	r31
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	cd b7       	in	r28, 0x3d	; 61
     3ce:	de b7       	in	r29, 0x3e	; 62
     3d0:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <_avr_timer_cntcurr>
     3d4:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <_avr_timer_cntcurr+0x1>
     3d8:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <_avr_timer_cntcurr+0x2>
     3dc:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <_avr_timer_cntcurr+0x3>
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	a1 09       	sbc	r26, r1
     3e4:	b1 09       	sbc	r27, r1
     3e6:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <_avr_timer_cntcurr>
     3ea:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <_avr_timer_cntcurr+0x1>
     3ee:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <_avr_timer_cntcurr+0x2>
     3f2:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <_avr_timer_cntcurr+0x3>
     3f6:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <_avr_timer_cntcurr>
     3fa:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <_avr_timer_cntcurr+0x1>
     3fe:	a0 91 5b 01 	lds	r26, 0x015B	; 0x80015b <_avr_timer_cntcurr+0x2>
     402:	b0 91 5c 01 	lds	r27, 0x015C	; 0x80015c <_avr_timer_cntcurr+0x3>
     406:	89 2b       	or	r24, r25
     408:	8a 2b       	or	r24, r26
     40a:	8b 2b       	or	r24, r27
     40c:	89 f4       	brne	.+34     	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
     40e:	bd df       	rcall	.-134    	; 0x38a <TimerISR>
     410:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
     414:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
     418:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
     41c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
     420:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <_avr_timer_cntcurr>
     424:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <_avr_timer_cntcurr+0x1>
     428:	a0 93 5b 01 	sts	0x015B, r26	; 0x80015b <_avr_timer_cntcurr+0x2>
     42c:	b0 93 5c 01 	sts	0x015C, r27	; 0x80015c <_avr_timer_cntcurr+0x3>
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	ff 91       	pop	r31
     436:	ef 91       	pop	r30
     438:	bf 91       	pop	r27
     43a:	af 91       	pop	r26
     43c:	9f 91       	pop	r25
     43e:	8f 91       	pop	r24
     440:	7f 91       	pop	r23
     442:	6f 91       	pop	r22
     444:	5f 91       	pop	r21
     446:	4f 91       	pop	r20
     448:	3f 91       	pop	r19
     44a:	2f 91       	pop	r18
     44c:	0f 90       	pop	r0
     44e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     452:	0f 90       	pop	r0
     454:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     458:	0f 90       	pop	r0
     45a:	1f 90       	pop	r1
     45c:	18 95       	reti

0000045e <findGCD>:
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	60 97       	sbiw	r28, 0x10	; 16
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	de bf       	out	0x3e, r29	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	cd bf       	out	0x3d, r28	; 61
     472:	6d 83       	std	Y+5, r22	; 0x05
     474:	7e 83       	std	Y+6, r23	; 0x06
     476:	8f 83       	std	Y+7, r24	; 0x07
     478:	98 87       	std	Y+8, r25	; 0x08
     47a:	29 87       	std	Y+9, r18	; 0x09
     47c:	3a 87       	std	Y+10, r19	; 0x0a
     47e:	4b 87       	std	Y+11, r20	; 0x0b
     480:	5c 87       	std	Y+12, r21	; 0x0c
     482:	8d 81       	ldd	r24, Y+5	; 0x05
     484:	9e 81       	ldd	r25, Y+6	; 0x06
     486:	af 81       	ldd	r26, Y+7	; 0x07
     488:	b8 85       	ldd	r27, Y+8	; 0x08
     48a:	29 85       	ldd	r18, Y+9	; 0x09
     48c:	3a 85       	ldd	r19, Y+10	; 0x0a
     48e:	4b 85       	ldd	r20, Y+11	; 0x0b
     490:	5c 85       	ldd	r21, Y+12	; 0x0c
     492:	bc 01       	movw	r22, r24
     494:	cd 01       	movw	r24, r26
     496:	4e d5       	rcall	.+2716   	; 0xf34 <__udivmodsi4>
     498:	dc 01       	movw	r26, r24
     49a:	cb 01       	movw	r24, r22
     49c:	89 83       	std	Y+1, r24	; 0x01
     49e:	9a 83       	std	Y+2, r25	; 0x02
     4a0:	ab 83       	std	Y+3, r26	; 0x03
     4a2:	bc 83       	std	Y+4, r27	; 0x04
     4a4:	89 81       	ldd	r24, Y+1	; 0x01
     4a6:	9a 81       	ldd	r25, Y+2	; 0x02
     4a8:	ab 81       	ldd	r26, Y+3	; 0x03
     4aa:	bc 81       	ldd	r27, Y+4	; 0x04
     4ac:	89 2b       	or	r24, r25
     4ae:	8a 2b       	or	r24, r26
     4b0:	8b 2b       	or	r24, r27
     4b2:	29 f4       	brne	.+10     	; 0x4be <findGCD+0x60>
     4b4:	89 85       	ldd	r24, Y+9	; 0x09
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	ab 85       	ldd	r26, Y+11	; 0x0b
     4ba:	bc 85       	ldd	r27, Y+12	; 0x0c
     4bc:	11 c0       	rjmp	.+34     	; 0x4e0 <findGCD+0x82>
     4be:	89 85       	ldd	r24, Y+9	; 0x09
     4c0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c2:	ab 85       	ldd	r26, Y+11	; 0x0b
     4c4:	bc 85       	ldd	r27, Y+12	; 0x0c
     4c6:	8d 83       	std	Y+5, r24	; 0x05
     4c8:	9e 83       	std	Y+6, r25	; 0x06
     4ca:	af 83       	std	Y+7, r26	; 0x07
     4cc:	b8 87       	std	Y+8, r27	; 0x08
     4ce:	89 81       	ldd	r24, Y+1	; 0x01
     4d0:	9a 81       	ldd	r25, Y+2	; 0x02
     4d2:	ab 81       	ldd	r26, Y+3	; 0x03
     4d4:	bc 81       	ldd	r27, Y+4	; 0x04
     4d6:	89 87       	std	Y+9, r24	; 0x09
     4d8:	9a 87       	std	Y+10, r25	; 0x0a
     4da:	ab 87       	std	Y+11, r26	; 0x0b
     4dc:	bc 87       	std	Y+12, r27	; 0x0c
     4de:	d1 cf       	rjmp	.-94     	; 0x482 <findGCD+0x24>
     4e0:	bc 01       	movw	r22, r24
     4e2:	cd 01       	movw	r24, r26
     4e4:	60 96       	adiw	r28, 0x10	; 16
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <GetKeypadKey>:
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	88 e2       	ldi	r24, 0x28	; 40
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	2f ee       	ldi	r18, 0xEF	; 239
     504:	fc 01       	movw	r30, r24
     506:	20 83       	st	Z, r18
     508:	00 00       	nop
     50a:	86 e2       	ldi	r24, 0x26	; 38
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	fc 01       	movw	r30, r24
     510:	80 81       	ld	r24, Z
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	be de       	rcall	.-644    	; 0x292 <GetBit>
     516:	88 23       	and	r24, r24
     518:	11 f4       	brne	.+4      	; 0x51e <GetKeypadKey+0x28>
     51a:	81 e3       	ldi	r24, 0x31	; 49
     51c:	a9 c0       	rjmp	.+338    	; 0x670 <GetKeypadKey+0x17a>
     51e:	86 e2       	ldi	r24, 0x26	; 38
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	fc 01       	movw	r30, r24
     524:	80 81       	ld	r24, Z
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	b4 de       	rcall	.-664    	; 0x292 <GetBit>
     52a:	88 23       	and	r24, r24
     52c:	11 f4       	brne	.+4      	; 0x532 <GetKeypadKey+0x3c>
     52e:	82 e3       	ldi	r24, 0x32	; 50
     530:	9f c0       	rjmp	.+318    	; 0x670 <GetKeypadKey+0x17a>
     532:	86 e2       	ldi	r24, 0x26	; 38
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	fc 01       	movw	r30, r24
     538:	80 81       	ld	r24, Z
     53a:	62 e0       	ldi	r22, 0x02	; 2
     53c:	aa de       	rcall	.-684    	; 0x292 <GetBit>
     53e:	88 23       	and	r24, r24
     540:	11 f4       	brne	.+4      	; 0x546 <GetKeypadKey+0x50>
     542:	83 e3       	ldi	r24, 0x33	; 51
     544:	95 c0       	rjmp	.+298    	; 0x670 <GetKeypadKey+0x17a>
     546:	86 e2       	ldi	r24, 0x26	; 38
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	fc 01       	movw	r30, r24
     54c:	80 81       	ld	r24, Z
     54e:	63 e0       	ldi	r22, 0x03	; 3
     550:	a0 de       	rcall	.-704    	; 0x292 <GetBit>
     552:	88 23       	and	r24, r24
     554:	11 f4       	brne	.+4      	; 0x55a <GetKeypadKey+0x64>
     556:	81 e4       	ldi	r24, 0x41	; 65
     558:	8b c0       	rjmp	.+278    	; 0x670 <GetKeypadKey+0x17a>
     55a:	88 e2       	ldi	r24, 0x28	; 40
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	2f ed       	ldi	r18, 0xDF	; 223
     560:	fc 01       	movw	r30, r24
     562:	20 83       	st	Z, r18
     564:	00 00       	nop
     566:	86 e2       	ldi	r24, 0x26	; 38
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	fc 01       	movw	r30, r24
     56c:	80 81       	ld	r24, Z
     56e:	60 e0       	ldi	r22, 0x00	; 0
     570:	90 de       	rcall	.-736    	; 0x292 <GetBit>
     572:	88 23       	and	r24, r24
     574:	11 f4       	brne	.+4      	; 0x57a <GetKeypadKey+0x84>
     576:	84 e3       	ldi	r24, 0x34	; 52
     578:	7b c0       	rjmp	.+246    	; 0x670 <GetKeypadKey+0x17a>
     57a:	86 e2       	ldi	r24, 0x26	; 38
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	fc 01       	movw	r30, r24
     580:	80 81       	ld	r24, Z
     582:	61 e0       	ldi	r22, 0x01	; 1
     584:	86 de       	rcall	.-756    	; 0x292 <GetBit>
     586:	88 23       	and	r24, r24
     588:	11 f4       	brne	.+4      	; 0x58e <GetKeypadKey+0x98>
     58a:	85 e3       	ldi	r24, 0x35	; 53
     58c:	71 c0       	rjmp	.+226    	; 0x670 <GetKeypadKey+0x17a>
     58e:	86 e2       	ldi	r24, 0x26	; 38
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	fc 01       	movw	r30, r24
     594:	80 81       	ld	r24, Z
     596:	62 e0       	ldi	r22, 0x02	; 2
     598:	7c de       	rcall	.-776    	; 0x292 <GetBit>
     59a:	88 23       	and	r24, r24
     59c:	11 f4       	brne	.+4      	; 0x5a2 <GetKeypadKey+0xac>
     59e:	86 e3       	ldi	r24, 0x36	; 54
     5a0:	67 c0       	rjmp	.+206    	; 0x670 <GetKeypadKey+0x17a>
     5a2:	86 e2       	ldi	r24, 0x26	; 38
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	fc 01       	movw	r30, r24
     5a8:	80 81       	ld	r24, Z
     5aa:	63 e0       	ldi	r22, 0x03	; 3
     5ac:	72 de       	rcall	.-796    	; 0x292 <GetBit>
     5ae:	88 23       	and	r24, r24
     5b0:	11 f4       	brne	.+4      	; 0x5b6 <GetKeypadKey+0xc0>
     5b2:	82 e4       	ldi	r24, 0x42	; 66
     5b4:	5d c0       	rjmp	.+186    	; 0x670 <GetKeypadKey+0x17a>
     5b6:	88 e2       	ldi	r24, 0x28	; 40
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	2f eb       	ldi	r18, 0xBF	; 191
     5bc:	fc 01       	movw	r30, r24
     5be:	20 83       	st	Z, r18
     5c0:	00 00       	nop
     5c2:	86 e2       	ldi	r24, 0x26	; 38
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	fc 01       	movw	r30, r24
     5c8:	80 81       	ld	r24, Z
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	62 de       	rcall	.-828    	; 0x292 <GetBit>
     5ce:	88 23       	and	r24, r24
     5d0:	11 f4       	brne	.+4      	; 0x5d6 <GetKeypadKey+0xe0>
     5d2:	87 e3       	ldi	r24, 0x37	; 55
     5d4:	4d c0       	rjmp	.+154    	; 0x670 <GetKeypadKey+0x17a>
     5d6:	86 e2       	ldi	r24, 0x26	; 38
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	fc 01       	movw	r30, r24
     5dc:	80 81       	ld	r24, Z
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	58 de       	rcall	.-848    	; 0x292 <GetBit>
     5e2:	88 23       	and	r24, r24
     5e4:	11 f4       	brne	.+4      	; 0x5ea <GetKeypadKey+0xf4>
     5e6:	88 e3       	ldi	r24, 0x38	; 56
     5e8:	43 c0       	rjmp	.+134    	; 0x670 <GetKeypadKey+0x17a>
     5ea:	86 e2       	ldi	r24, 0x26	; 38
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	fc 01       	movw	r30, r24
     5f0:	80 81       	ld	r24, Z
     5f2:	62 e0       	ldi	r22, 0x02	; 2
     5f4:	4e de       	rcall	.-868    	; 0x292 <GetBit>
     5f6:	88 23       	and	r24, r24
     5f8:	11 f4       	brne	.+4      	; 0x5fe <GetKeypadKey+0x108>
     5fa:	89 e3       	ldi	r24, 0x39	; 57
     5fc:	39 c0       	rjmp	.+114    	; 0x670 <GetKeypadKey+0x17a>
     5fe:	86 e2       	ldi	r24, 0x26	; 38
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	fc 01       	movw	r30, r24
     604:	80 81       	ld	r24, Z
     606:	63 e0       	ldi	r22, 0x03	; 3
     608:	44 de       	rcall	.-888    	; 0x292 <GetBit>
     60a:	88 23       	and	r24, r24
     60c:	11 f4       	brne	.+4      	; 0x612 <GetKeypadKey+0x11c>
     60e:	83 e4       	ldi	r24, 0x43	; 67
     610:	2f c0       	rjmp	.+94     	; 0x670 <GetKeypadKey+0x17a>
     612:	88 e2       	ldi	r24, 0x28	; 40
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	2f e7       	ldi	r18, 0x7F	; 127
     618:	fc 01       	movw	r30, r24
     61a:	20 83       	st	Z, r18
     61c:	00 00       	nop
     61e:	86 e2       	ldi	r24, 0x26	; 38
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	fc 01       	movw	r30, r24
     624:	80 81       	ld	r24, Z
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	34 de       	rcall	.-920    	; 0x292 <GetBit>
     62a:	88 23       	and	r24, r24
     62c:	11 f4       	brne	.+4      	; 0x632 <GetKeypadKey+0x13c>
     62e:	8a e2       	ldi	r24, 0x2A	; 42
     630:	1f c0       	rjmp	.+62     	; 0x670 <GetKeypadKey+0x17a>
     632:	86 e2       	ldi	r24, 0x26	; 38
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	fc 01       	movw	r30, r24
     638:	80 81       	ld	r24, Z
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	2a de       	rcall	.-940    	; 0x292 <GetBit>
     63e:	88 23       	and	r24, r24
     640:	11 f4       	brne	.+4      	; 0x646 <GetKeypadKey+0x150>
     642:	80 e3       	ldi	r24, 0x30	; 48
     644:	15 c0       	rjmp	.+42     	; 0x670 <GetKeypadKey+0x17a>
     646:	86 e2       	ldi	r24, 0x26	; 38
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	fc 01       	movw	r30, r24
     64c:	80 81       	ld	r24, Z
     64e:	62 e0       	ldi	r22, 0x02	; 2
     650:	20 de       	rcall	.-960    	; 0x292 <GetBit>
     652:	88 23       	and	r24, r24
     654:	11 f4       	brne	.+4      	; 0x65a <GetKeypadKey+0x164>
     656:	83 e2       	ldi	r24, 0x23	; 35
     658:	0b c0       	rjmp	.+22     	; 0x670 <GetKeypadKey+0x17a>
     65a:	86 e2       	ldi	r24, 0x26	; 38
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	fc 01       	movw	r30, r24
     660:	80 81       	ld	r24, Z
     662:	63 e0       	ldi	r22, 0x03	; 3
     664:	16 de       	rcall	.-980    	; 0x292 <GetBit>
     666:	88 23       	and	r24, r24
     668:	11 f4       	brne	.+4      	; 0x66e <GetKeypadKey+0x178>
     66a:	84 e4       	ldi	r24, 0x44	; 68
     66c:	01 c0       	rjmp	.+2      	; 0x670 <GetKeypadKey+0x17a>
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <arrayShift>:

#ifndef OBSTACLEGENERATOR_H_
#define OBSTACLEGENERATOR_H_

void arrayShift(unsigned char shift)
{
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	00 d0       	rcall	.+0      	; 0x67c <arrayShift+0x6>
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char temp;
	for (unsigned char i = shift ; i > 0; i--)
     682:	8a 81       	ldd	r24, Y+2	; 0x02
     684:	89 83       	std	Y+1, r24	; 0x01
     686:	23 c0       	rjmp	.+70     	; 0x6ce <arrayShift+0x58>
	{
		row1[i] = row1[i - 1];
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	88 2f       	mov	r24, r24
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	29 81       	ldd	r18, Y+1	; 0x01
     690:	22 2f       	mov	r18, r18
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	21 50       	subi	r18, 0x01	; 1
     696:	31 09       	sbc	r19, r1
     698:	28 5f       	subi	r18, 0xF8	; 248
     69a:	3e 4f       	sbci	r19, 0xFE	; 254
     69c:	f9 01       	movw	r30, r18
     69e:	20 81       	ld	r18, Z
     6a0:	88 5f       	subi	r24, 0xF8	; 248
     6a2:	9e 4f       	sbci	r25, 0xFE	; 254
     6a4:	fc 01       	movw	r30, r24
     6a6:	20 83       	st	Z, r18
		row2[i] = row2[i - 1 ];
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
     6aa:	88 2f       	mov	r24, r24
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	29 81       	ldd	r18, Y+1	; 0x01
     6b0:	22 2f       	mov	r18, r18
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	21 50       	subi	r18, 0x01	; 1
     6b6:	31 09       	sbc	r19, r1
     6b8:	27 5e       	subi	r18, 0xE7	; 231
     6ba:	3e 4f       	sbci	r19, 0xFE	; 254
     6bc:	f9 01       	movw	r30, r18
     6be:	20 81       	ld	r18, Z
     6c0:	87 5e       	subi	r24, 0xE7	; 231
     6c2:	9e 4f       	sbci	r25, 0xFE	; 254
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18
#define OBSTACLEGENERATOR_H_

void arrayShift(unsigned char shift)
{
	unsigned char temp;
	for (unsigned char i = shift ; i > 0; i--)
     6c8:	89 81       	ldd	r24, Y+1	; 0x01
     6ca:	81 50       	subi	r24, 0x01	; 1
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	88 23       	and	r24, r24
     6d2:	d1 f6       	brne	.-76     	; 0x688 <arrayShift+0x12>
	{
		row1[i] = row1[i - 1];
		row2[i] = row2[i - 1 ];
	}
}
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <clearArray>:

void clearArray(unsigned char arraySize)
{
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	00 d0       	rcall	.+0      	; 0x6e4 <clearArray+0x6>
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	8a 83       	std	Y+2, r24	; 0x02
	for (unsigned char i = 0 ; i <= arraySize; i++)
     6ea:	19 82       	std	Y+1, r1	; 0x01
     6ec:	11 c0       	rjmp	.+34     	; 0x710 <clearArray+0x32>
	{
		row1[i] = '\0';
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	88 2f       	mov	r24, r24
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	88 5f       	subi	r24, 0xF8	; 248
     6f6:	9e 4f       	sbci	r25, 0xFE	; 254
     6f8:	fc 01       	movw	r30, r24
     6fa:	10 82       	st	Z, r1
		row2[i] = '\0';
     6fc:	89 81       	ldd	r24, Y+1	; 0x01
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	87 5e       	subi	r24, 0xE7	; 231
     704:	9e 4f       	sbci	r25, 0xFE	; 254
     706:	fc 01       	movw	r30, r24
     708:	10 82       	st	Z, r1
	}
}

void clearArray(unsigned char arraySize)
{
	for (unsigned char i = 0 ; i <= arraySize; i++)
     70a:	89 81       	ldd	r24, Y+1	; 0x01
     70c:	8f 5f       	subi	r24, 0xFF	; 255
     70e:	89 83       	std	Y+1, r24	; 0x01
     710:	99 81       	ldd	r25, Y+1	; 0x01
     712:	8a 81       	ldd	r24, Y+2	; 0x02
     714:	89 17       	cp	r24, r25
     716:	58 f7       	brcc	.-42     	; 0x6ee <clearArray+0x10>
	{
		row1[i] = '\0';
		row2[i] = '\0';
	}
}
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <ObstacleGeneratorSM_Tick>:

enum ObstacleGeneratorSM {OGSM_start, OGSM_generate} ObstacleGeneratorSM;
int ObstacleGeneratorSM_Tick(int state)
{
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	cd b7       	in	r28, 0x3d	; 61
     728:	de b7       	in	r29, 0x3e	; 62
     72a:	2a 97       	sbiw	r28, 0x0a	; 10
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	9a 83       	std	Y+2, r25	; 0x02
     738:	89 83       	std	Y+1, r24	; 0x01
	switch(state) //state transition
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	9a 81       	ldd	r25, Y+2	; 0x02
     73e:	00 97       	sbiw	r24, 0x00	; 0
     740:	19 f0       	breq	.+6      	; 0x748 <ObstacleGeneratorSM_Tick+0x26>
     742:	01 97       	sbiw	r24, 0x01	; 1
     744:	c1 f0       	breq	.+48     	; 0x776 <ObstacleGeneratorSM_Tick+0x54>
     746:	14 c0       	rjmp	.+40     	; 0x770 <ObstacleGeneratorSM_Tick+0x4e>
	{
		//keypad_value = GetKeypadKey();
		case OGSM_start: 
			str_index				= 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <str_index>
			object_generate_prob	= 20;
     74e:	84 e1       	ldi	r24, 0x14	; 20
     750:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <object_generate_prob>
			if (keypad_value == '1' || keypad_value == '0')
     754:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <keypad_value>
     758:	81 33       	cpi	r24, 0x31	; 49
     75a:	21 f0       	breq	.+8      	; 0x764 <ObstacleGeneratorSM_Tick+0x42>
     75c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <keypad_value>
     760:	80 33       	cpi	r24, 0x30	; 48
     762:	29 f4       	brne	.+10     	; 0x76e <ObstacleGeneratorSM_Tick+0x4c>
			{
				state = OGSM_generate;
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	9a 83       	std	Y+2, r25	; 0x02
     76a:	89 83       	std	Y+1, r24	; 0x01
			}
			
		break;
     76c:	05 c0       	rjmp	.+10     	; 0x778 <ObstacleGeneratorSM_Tick+0x56>
     76e:	04 c0       	rjmp	.+8      	; 0x778 <ObstacleGeneratorSM_Tick+0x56>
		
		case OGSM_generate:break;
		
		default: 
			state = OGSM_start;
     770:	1a 82       	std	Y+2, r1	; 0x02
     772:	19 82       	std	Y+1, r1	; 0x01
		break;
     774:	01 c0       	rjmp	.+2      	; 0x778 <ObstacleGeneratorSM_Tick+0x56>
				state = OGSM_generate;
			}
			
		break;
		
		case OGSM_generate:break;
     776:	00 00       	nop
		default: 
			state = OGSM_start;
		break;
	}
	
	switch(state) //state actions
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	9a 81       	ldd	r25, Y+2	; 0x02
     77c:	00 97       	sbiw	r24, 0x00	; 0
     77e:	09 f4       	brne	.+2      	; 0x782 <ObstacleGeneratorSM_Tick+0x60>
     780:	5a c0       	rjmp	.+180    	; 0x836 <ObstacleGeneratorSM_Tick+0x114>
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	09 f0       	breq	.+2      	; 0x788 <ObstacleGeneratorSM_Tick+0x66>
     786:	58 c0       	rjmp	.+176    	; 0x838 <ObstacleGeneratorSM_Tick+0x116>
		case OGSM_start: 
		break;
		
		case OGSM_generate: 
			//shift data >> 1
			arrayShift(str_index);
     788:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <str_index>
     78c:	74 df       	rcall	.-280    	; 0x676 <arrayShift>
			//generate an obstacle then push into first index
			if ((rand() % object_generate_prob) == 1)
     78e:	4f d4       	rcall	.+2206   	; 0x102e <rand>
     790:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <object_generate_prob>
     794:	22 2f       	mov	r18, r18
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	b9 01       	movw	r22, r18
     79a:	b9 d3       	rcall	.+1906   	; 0xf0e <__divmodhi4>
     79c:	01 97       	sbiw	r24, 0x01	; 1
     79e:	21 f4       	brne	.+8      	; 0x7a8 <ObstacleGeneratorSM_Tick+0x86>
			{
				row1[0] = '#';
     7a0:	83 e2       	ldi	r24, 0x23	; 35
     7a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
     7a6:	10 c0       	rjmp	.+32     	; 0x7c8 <ObstacleGeneratorSM_Tick+0xa6>
			}
			else if ((rand() % object_generate_prob) == 1)
     7a8:	42 d4       	rcall	.+2180   	; 0x102e <rand>
     7aa:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <object_generate_prob>
     7ae:	22 2f       	mov	r18, r18
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	b9 01       	movw	r22, r18
     7b4:	ac d3       	rcall	.+1880   	; 0xf0e <__divmodhi4>
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	21 f4       	brne	.+8      	; 0x7c2 <ObstacleGeneratorSM_Tick+0xa0>
			{
				row1[0] = '*';
     7ba:	8a e2       	ldi	r24, 0x2A	; 42
     7bc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
     7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <ObstacleGeneratorSM_Tick+0xa6>
			}
			else
				row1[0] = ' ';
     7c2:	80 e2       	ldi	r24, 0x20	; 32
     7c4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
					
			if ((rand() % object_generate_prob) == 1)
     7c8:	32 d4       	rcall	.+2148   	; 0x102e <rand>
     7ca:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <object_generate_prob>
     7ce:	22 2f       	mov	r18, r18
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	b9 01       	movw	r22, r18
     7d4:	9c d3       	rcall	.+1848   	; 0xf0e <__divmodhi4>
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	21 f4       	brne	.+8      	; 0x7e2 <ObstacleGeneratorSM_Tick+0xc0>
			{
				row2[0] = '#';
     7da:	83 e2       	ldi	r24, 0x23	; 35
     7dc:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <row2>
     7e0:	10 c0       	rjmp	.+32     	; 0x802 <ObstacleGeneratorSM_Tick+0xe0>
			}
			else if ((rand() % object_generate_prob) == 1)
     7e2:	25 d4       	rcall	.+2122   	; 0x102e <rand>
     7e4:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <object_generate_prob>
     7e8:	22 2f       	mov	r18, r18
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	b9 01       	movw	r22, r18
     7ee:	8f d3       	rcall	.+1822   	; 0xf0e <__divmodhi4>
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	21 f4       	brne	.+8      	; 0x7fc <ObstacleGeneratorSM_Tick+0xda>
			{
				row2[0] = '*';
     7f4:	8a e2       	ldi	r24, 0x2A	; 42
     7f6:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <row2>
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <ObstacleGeneratorSM_Tick+0xe0>
			}
			else
				row2[0] = ' ';
     7fc:	80 e2       	ldi	r24, 0x20	; 32
     7fe:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <row2>
			
			//memcpy(display_string, row1, str_index );
			//memcpy(display_string, row2, str_index + 1);	
			
			//set the last bit to '\0' to complete string
			if ((row1[16] != '\0' || row2[16] != '\0') && str_index >= 16)
     802:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <row1+0x10>
     806:	88 23       	and	r24, r24
     808:	21 f4       	brne	.+8      	; 0x812 <ObstacleGeneratorSM_Tick+0xf0>
     80a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <row2+0x10>
     80e:	88 23       	and	r24, r24
     810:	61 f0       	breq	.+24     	; 0x82a <ObstacleGeneratorSM_Tick+0x108>
     812:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <str_index>
     816:	80 31       	cpi	r24, 0x10	; 16
     818:	40 f0       	brcs	.+16     	; 0x82a <ObstacleGeneratorSM_Tick+0x108>
			{
				row1[16] = '\0'; row2[16] = '\0';
     81a:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <row1+0x10>
     81e:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <row2+0x10>
				str_index = 16;
     822:	80 e1       	ldi	r24, 0x10	; 16
     824:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <str_index>
			}else str_index++;
		break;
     828:	07 c0       	rjmp	.+14     	; 0x838 <ObstacleGeneratorSM_Tick+0x116>
			//set the last bit to '\0' to complete string
			if ((row1[16] != '\0' || row2[16] != '\0') && str_index >= 16)
			{
				row1[16] = '\0'; row2[16] = '\0';
				str_index = 16;
			}else str_index++;
     82a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <str_index>
     82e:	8f 5f       	subi	r24, 0xFF	; 255
     830:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <str_index>
		break;
     834:	01 c0       	rjmp	.+2      	; 0x838 <ObstacleGeneratorSM_Tick+0x116>
	}
	
	switch(state) //state actions
	{
		case OGSM_start: 
		break;
     836:	00 00       	nop
				str_index = 16;
			}else str_index++;
		break;
	}
	
	return state;
     838:	89 81       	ldd	r24, Y+1	; 0x01
     83a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     83c:	2a 96       	adiw	r28, 0x0a	; 10
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <DisplaySM_Tick>:
unsigned char deathAni;

//display global variables
enum displaySM{display_start,display_wait, display_scroll, display_deathAnimation_X, display_dead} displaySM;
int DisplaySM_Tick(int state)
{
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	00 d0       	rcall	.+0      	; 0x854 <DisplaySM_Tick+0x6>
     854:	cd b7       	in	r28, 0x3d	; 61
     856:	de b7       	in	r29, 0x3e	; 62
     858:	9a 83       	std	Y+2, r25	; 0x02
     85a:	89 83       	std	Y+1, r24	; 0x01
	keypad_value = GetKeypadKey();
     85c:	4c de       	rcall	.-872    	; 0x4f6 <GetKeypadKey>
     85e:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <keypad_value>
	
	//unsigned char back = 0;
	switch(state) //state transition
     862:	89 81       	ldd	r24, Y+1	; 0x01
     864:	9a 81       	ldd	r25, Y+2	; 0x02
     866:	82 30       	cpi	r24, 0x02	; 2
     868:	91 05       	cpc	r25, r1
     86a:	31 f1       	breq	.+76     	; 0x8b8 <DisplaySM_Tick+0x6a>
     86c:	83 30       	cpi	r24, 0x03	; 3
     86e:	91 05       	cpc	r25, r1
     870:	2c f4       	brge	.+10     	; 0x87c <DisplaySM_Tick+0x2e>
     872:	00 97       	sbiw	r24, 0x00	; 0
     874:	49 f0       	breq	.+18     	; 0x888 <DisplaySM_Tick+0x3a>
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	a9 f0       	breq	.+42     	; 0x8a4 <DisplaySM_Tick+0x56>
     87a:	47 c0       	rjmp	.+142    	; 0x90a <DisplaySM_Tick+0xbc>
     87c:	83 30       	cpi	r24, 0x03	; 3
     87e:	91 05       	cpc	r25, r1
     880:	49 f1       	breq	.+82     	; 0x8d4 <DisplaySM_Tick+0x86>
     882:	04 97       	sbiw	r24, 0x04	; 4
     884:	d1 f1       	breq	.+116    	; 0x8fa <DisplaySM_Tick+0xac>
     886:	41 c0       	rjmp	.+130    	; 0x90a <DisplaySM_Tick+0xbc>
	{
		case display_start:
			playerIcon						= 0xDB;
     888:	8b ed       	ldi	r24, 0xDB	; 219
     88a:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <playerIcon>
			task3.state						= 0;//Task initial state.
     88e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <task3>
			task4.state						= 0;//Task initial state.
     892:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <task4>
			deathAni						= 0;
     896:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <deathAni>
			 
			state =  display_wait;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	9a 83       	std	Y+2, r25	; 0x02
     8a0:	89 83       	std	Y+1, r24	; 0x01
		break;
     8a2:	36 c0       	rjmp	.+108    	; 0x910 <DisplaySM_Tick+0xc2>
		
		case display_wait:
			if (keypad_value == '1')
     8a4:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <keypad_value>
     8a8:	81 33       	cpi	r24, 0x31	; 49
     8aa:	29 f4       	brne	.+10     	; 0x8b6 <DisplaySM_Tick+0x68>
			{
				state = display_scroll;
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	9a 83       	std	Y+2, r25	; 0x02
     8b2:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     8b4:	2d c0       	rjmp	.+90     	; 0x910 <DisplaySM_Tick+0xc2>
     8b6:	2c c0       	rjmp	.+88     	; 0x910 <DisplaySM_Tick+0xc2>
		
		case display_scroll:
			if (isHit == 0)
     8b8:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <isHit>
     8bc:	88 23       	and	r24, r24
     8be:	29 f4       	brne	.+10     	; 0x8ca <DisplaySM_Tick+0x7c>
			{
				state = display_scroll;
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	9a 83       	std	Y+2, r25	; 0x02
     8c6:	89 83       	std	Y+1, r24	; 0x01
// 				state = display_start;
// 			}
			
			else 
				state = display_deathAnimation_X;
		break;
     8c8:	23 c0       	rjmp	.+70     	; 0x910 <DisplaySM_Tick+0xc2>
// 			{
// 				state = display_start;
// 			}
			
			else 
				state = display_deathAnimation_X;
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	9a 83       	std	Y+2, r25	; 0x02
     8d0:	89 83       	std	Y+1, r24	; 0x01
		break;
     8d2:	1e c0       	rjmp	.+60     	; 0x910 <DisplaySM_Tick+0xc2>
		
		case display_deathAnimation_X:
			if (deathAni < 5)
     8d4:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <deathAni>
     8d8:	85 30       	cpi	r24, 0x05	; 5
     8da:	50 f4       	brcc	.+20     	; 0x8f0 <DisplaySM_Tick+0xa2>
			{
				state = display_deathAnimation_X;
     8dc:	83 e0       	ldi	r24, 0x03	; 3
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	9a 83       	std	Y+2, r25	; 0x02
     8e2:	89 83       	std	Y+1, r24	; 0x01
				deathAni++;
     8e4:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <deathAni>
     8e8:	8f 5f       	subi	r24, 0xFF	; 255
     8ea:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <deathAni>
			}else
				state = display_dead;
		break;
     8ee:	10 c0       	rjmp	.+32     	; 0x910 <DisplaySM_Tick+0xc2>
			if (deathAni < 5)
			{
				state = display_deathAnimation_X;
				deathAni++;
			}else
				state = display_dead;
     8f0:	84 e0       	ldi	r24, 0x04	; 4
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	9a 83       	std	Y+2, r25	; 0x02
     8f6:	89 83       	std	Y+1, r24	; 0x01
		break;
     8f8:	0b c0       	rjmp	.+22     	; 0x910 <DisplaySM_Tick+0xc2>
		
		case display_dead:
			if (keypad_value == '1')
     8fa:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <keypad_value>
     8fe:	81 33       	cpi	r24, 0x31	; 49
     900:	19 f4       	brne	.+6      	; 0x908 <DisplaySM_Tick+0xba>
			{
				state = display_start;
     902:	1a 82       	std	Y+2, r1	; 0x02
     904:	19 82       	std	Y+1, r1	; 0x01
			}
		break;
     906:	04 c0       	rjmp	.+8      	; 0x910 <DisplaySM_Tick+0xc2>
     908:	03 c0       	rjmp	.+6      	; 0x910 <DisplaySM_Tick+0xc2>
		
		default:
			state = display_start;
     90a:	1a 82       	std	Y+2, r1	; 0x02
     90c:	19 82       	std	Y+1, r1	; 0x01
		break;
     90e:	00 00       	nop
	}
	
	
	switch(state) //state action
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	9a 81       	ldd	r25, Y+2	; 0x02
     914:	82 30       	cpi	r24, 0x02	; 2
     916:	91 05       	cpc	r25, r1
     918:	b1 f0       	breq	.+44     	; 0x946 <DisplaySM_Tick+0xf8>
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	91 05       	cpc	r25, r1
     91e:	34 f4       	brge	.+12     	; 0x92c <DisplaySM_Tick+0xde>
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	09 f4       	brne	.+2      	; 0x926 <DisplaySM_Tick+0xd8>
     924:	44 c0       	rjmp	.+136    	; 0x9ae <DisplaySM_Tick+0x160>
     926:	01 97       	sbiw	r24, 0x01	; 1
     928:	41 f0       	breq	.+16     	; 0x93a <DisplaySM_Tick+0xec>
			LCD_ClearScreen();
			LCD_DisplayString(1, " YOU ARE DEAD:( ");
			clearArray(16);
		break;
		
		default: break;
     92a:	42 c0       	rjmp	.+132    	; 0x9b0 <DisplaySM_Tick+0x162>
			state = display_start;
		break;
	}
	
	
	switch(state) //state action
     92c:	83 30       	cpi	r24, 0x03	; 3
     92e:	91 05       	cpc	r25, r1
     930:	d1 f0       	breq	.+52     	; 0x966 <DisplaySM_Tick+0x118>
     932:	04 97       	sbiw	r24, 0x04	; 4
     934:	09 f4       	brne	.+2      	; 0x938 <DisplaySM_Tick+0xea>
     936:	33 c0       	rjmp	.+102    	; 0x99e <DisplaySM_Tick+0x150>
			LCD_ClearScreen();
			LCD_DisplayString(1, " YOU ARE DEAD:( ");
			clearArray(16);
		break;
		
		default: break;
     938:	3b c0       	rjmp	.+118    	; 0x9b0 <DisplaySM_Tick+0x162>
	{
		case display_start:
		break;
		
		case display_wait:
			LCD_ClearScreen();
     93a:	c6 db       	rcall	.-2164   	; 0xc8 <LCD_ClearScreen>
			LCD_DisplayString(1, "   LCD_RACER!   ");
     93c:	66 e3       	ldi	r22, 0x36	; 54
     93e:	71 e0       	ldi	r23, 0x01	; 1
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	3c dc       	rcall	.-1928   	; 0x1bc <LCD_DisplayString>
		break;
     944:	35 c0       	rjmp	.+106    	; 0x9b0 <DisplaySM_Tick+0x162>
		
		case display_scroll:
			LCD_ClearScreen();
     946:	c0 db       	rcall	.-2176   	; 0xc8 <LCD_ClearScreen>
			LCD_DisplayString(1, row1);
     948:	68 e0       	ldi	r22, 0x08	; 8
     94a:	71 e0       	ldi	r23, 0x01	; 1
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	36 dc       	rcall	.-1940   	; 0x1bc <LCD_DisplayString>
			LCD_DisplayString(17, row2);
     950:	69 e1       	ldi	r22, 0x19	; 25
     952:	71 e0       	ldi	r23, 0x01	; 1
     954:	81 e1       	ldi	r24, 0x11	; 17
     956:	32 dc       	rcall	.-1948   	; 0x1bc <LCD_DisplayString>
			LCD_Cursor(playerPosition);
     958:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <playerPosition>
     95c:	57 dc       	rcall	.-1874   	; 0x20c <LCD_Cursor>
			//LCD_WriteData(x);
			LCD_WriteData(playerIcon);
     95e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <playerIcon>
     962:	fe db       	rcall	.-2052   	; 0x160 <LCD_WriteData>
		break;
     964:	25 c0       	rjmp	.+74     	; 0x9b0 <DisplaySM_Tick+0x162>
		
		case display_deathAnimation_X:
			task1.state = 0;//Task initial state.
     966:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <task1>
			keypad_value = 'l';
     96a:	8c e6       	ldi	r24, 0x6C	; 108
     96c:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <keypad_value>
			LCD_ClearScreen();
     970:	ab db       	rcall	.-2218   	; 0xc8 <LCD_ClearScreen>
			LCD_DisplayString(1, row1);
     972:	68 e0       	ldi	r22, 0x08	; 8
     974:	71 e0       	ldi	r23, 0x01	; 1
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	21 dc       	rcall	.-1982   	; 0x1bc <LCD_DisplayString>
			LCD_DisplayString(17, row2);
     97a:	69 e1       	ldi	r22, 0x19	; 25
     97c:	71 e0       	ldi	r23, 0x01	; 1
     97e:	81 e1       	ldi	r24, 0x11	; 17
     980:	1d dc       	rcall	.-1990   	; 0x1bc <LCD_DisplayString>
			LCD_Cursor(playerPosition);
     982:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <playerPosition>
     986:	42 dc       	rcall	.-1916   	; 0x20c <LCD_Cursor>
			if ((deathAni % 2) == 0)
     988:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <deathAni>
     98c:	81 70       	andi	r24, 0x01	; 1
     98e:	88 23       	and	r24, r24
     990:	19 f4       	brne	.+6      	; 0x998 <DisplaySM_Tick+0x14a>
			{
				LCD_WriteData('X');
     992:	88 e5       	ldi	r24, 0x58	; 88
     994:	e5 db       	rcall	.-2102   	; 0x160 <LCD_WriteData>
			else
			{
				LCD_WriteData(0xDB);
			}
			
		break;
     996:	0c c0       	rjmp	.+24     	; 0x9b0 <DisplaySM_Tick+0x162>
			{
				LCD_WriteData('X');
			} 
			else
			{
				LCD_WriteData(0xDB);
     998:	8b ed       	ldi	r24, 0xDB	; 219
     99a:	e2 db       	rcall	.-2108   	; 0x160 <LCD_WriteData>
			}
			
		break;
     99c:	09 c0       	rjmp	.+18     	; 0x9b0 <DisplaySM_Tick+0x162>
		
		case display_dead:
			LCD_ClearScreen();
     99e:	94 db       	rcall	.-2264   	; 0xc8 <LCD_ClearScreen>
			LCD_DisplayString(1, " YOU ARE DEAD:( ");
     9a0:	67 e4       	ldi	r22, 0x47	; 71
     9a2:	71 e0       	ldi	r23, 0x01	; 1
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	0a dc       	rcall	.-2028   	; 0x1bc <LCD_DisplayString>
			clearArray(16);
     9a8:	80 e1       	ldi	r24, 0x10	; 16
     9aa:	99 de       	rcall	.-718    	; 0x6de <clearArray>
		break;
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <DisplaySM_Tick+0x162>
	
	
	switch(state) //state action
	{
		case display_start:
		break;
     9ae:	00 00       	nop
		break;
		
		default: break;
	}
	
	return state;
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	9a 81       	ldd	r25, Y+2	; 0x02
	
}
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <Movement_Tick>:
#define MOVEMENT_H_

enum MovementSM {M_start, M_wait, M_move, M_moveRelease} MovementSM;
	
int Movement_Tick(int state)
{
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <Movement_Tick+0x6>
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	9a 83       	std	Y+2, r25	; 0x02
     9ca:	89 83       	std	Y+1, r24	; 0x01
	keypad_value = GetKeypadKey();
     9cc:	94 dd       	rcall	.-1240   	; 0x4f6 <GetKeypadKey>
     9ce:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <keypad_value>
	switch(state)
     9d2:	89 81       	ldd	r24, Y+1	; 0x01
     9d4:	9a 81       	ldd	r25, Y+2	; 0x02
     9d6:	81 30       	cpi	r24, 0x01	; 1
     9d8:	91 05       	cpc	r25, r1
     9da:	a1 f0       	breq	.+40     	; 0xa04 <Movement_Tick+0x46>
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	91 05       	cpc	r25, r1
     9e0:	1c f4       	brge	.+6      	; 0x9e8 <Movement_Tick+0x2a>
     9e2:	89 2b       	or	r24, r25
     9e4:	39 f0       	breq	.+14     	; 0x9f4 <Movement_Tick+0x36>
     9e6:	27 c0       	rjmp	.+78     	; 0xa36 <Movement_Tick+0x78>
     9e8:	82 30       	cpi	r24, 0x02	; 2
     9ea:	91 05       	cpc	r25, r1
     9ec:	a9 f0       	breq	.+42     	; 0xa18 <Movement_Tick+0x5a>
     9ee:	03 97       	sbiw	r24, 0x03	; 3
     9f0:	c1 f0       	breq	.+48     	; 0xa22 <Movement_Tick+0x64>
     9f2:	21 c0       	rjmp	.+66     	; 0xa36 <Movement_Tick+0x78>
	{
		case M_start:
			playerPosition			= 16;
     9f4:	80 e1       	ldi	r24, 0x10	; 16
     9f6:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <playerPosition>
			state					= M_wait;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	9a 83       	std	Y+2, r25	; 0x02
     a00:	89 83       	std	Y+1, r24	; 0x01
		break;
     a02:	1c c0       	rjmp	.+56     	; 0xa3c <Movement_Tick+0x7e>
		
		case M_wait:
			 if (keypad_value != '\0')
     a04:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <keypad_value>
     a08:	88 23       	and	r24, r24
     a0a:	29 f0       	breq	.+10     	; 0xa16 <Movement_Tick+0x58>
			{
				state = M_move;
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	9a 83       	std	Y+2, r25	; 0x02
     a12:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     a14:	13 c0       	rjmp	.+38     	; 0xa3c <Movement_Tick+0x7e>
     a16:	12 c0       	rjmp	.+36     	; 0xa3c <Movement_Tick+0x7e>
		
		case M_move:
			state = M_moveRelease;
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	9a 83       	std	Y+2, r25	; 0x02
     a1e:	89 83       	std	Y+1, r24	; 0x01
		break;
     a20:	0d c0       	rjmp	.+26     	; 0xa3c <Movement_Tick+0x7e>
		
		case M_moveRelease:
			if (keypad_value == '\0')
     a22:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <keypad_value>
     a26:	88 23       	and	r24, r24
     a28:	29 f4       	brne	.+10     	; 0xa34 <Movement_Tick+0x76>
			{
				state = M_wait;
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	9a 83       	std	Y+2, r25	; 0x02
     a30:	89 83       	std	Y+1, r24	; 0x01
			}
		break;
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <Movement_Tick+0x7e>
     a34:	03 c0       	rjmp	.+6      	; 0xa3c <Movement_Tick+0x7e>
		
		default: 
			state = M_start;
     a36:	1a 82       	std	Y+2, r1	; 0x02
     a38:	19 82       	std	Y+1, r1	; 0x01
		break;
     a3a:	00 00       	nop
	}
	
	switch(state)
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	9a 81       	ldd	r25, Y+2	; 0x02
     a40:	81 30       	cpi	r24, 0x01	; 1
     a42:	91 05       	cpc	r25, r1
     a44:	21 f1       	breq	.+72     	; 0xa8e <Movement_Tick+0xd0>
     a46:	82 30       	cpi	r24, 0x02	; 2
     a48:	91 05       	cpc	r25, r1
     a4a:	1c f4       	brge	.+6      	; 0xa52 <Movement_Tick+0x94>
     a4c:	89 2b       	or	r24, r25
     a4e:	09 f1       	breq	.+66     	; 0xa92 <Movement_Tick+0xd4>
			}
		break;
		
		case M_moveRelease: break;
		
		default: break;
     a50:	23 c0       	rjmp	.+70     	; 0xa98 <Movement_Tick+0xda>
		default: 
			state = M_start;
		break;
	}
	
	switch(state)
     a52:	82 30       	cpi	r24, 0x02	; 2
     a54:	91 05       	cpc	r25, r1
     a56:	19 f0       	breq	.+6      	; 0xa5e <Movement_Tick+0xa0>
     a58:	03 97       	sbiw	r24, 0x03	; 3
     a5a:	e9 f0       	breq	.+58     	; 0xa96 <Movement_Tick+0xd8>
			}
		break;
		
		case M_moveRelease: break;
		
		default: break;
     a5c:	1d c0       	rjmp	.+58     	; 0xa98 <Movement_Tick+0xda>
		case M_start: break;
		
		case M_wait: break;
		
		case M_move:
			if (playerPosition == 16 && keypad_value == 'C')
     a5e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <playerPosition>
     a62:	80 31       	cpi	r24, 0x10	; 16
     a64:	39 f4       	brne	.+14     	; 0xa74 <Movement_Tick+0xb6>
     a66:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <keypad_value>
     a6a:	83 34       	cpi	r24, 0x43	; 67
     a6c:	19 f4       	brne	.+6      	; 0xa74 <Movement_Tick+0xb6>
			{
				playerPosition = 32;
     a6e:	80 e2       	ldi	r24, 0x20	; 32
     a70:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <playerPosition>
			} 
			if (playerPosition == 32 && keypad_value == 'B')
     a74:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <playerPosition>
     a78:	80 32       	cpi	r24, 0x20	; 32
     a7a:	41 f4       	brne	.+16     	; 0xa8c <Movement_Tick+0xce>
     a7c:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <keypad_value>
     a80:	82 34       	cpi	r24, 0x42	; 66
     a82:	21 f4       	brne	.+8      	; 0xa8c <Movement_Tick+0xce>
			{
				playerPosition = 16;
     a84:	80 e1       	ldi	r24, 0x10	; 16
     a86:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <playerPosition>
			}
		break;
     a8a:	06 c0       	rjmp	.+12     	; 0xa98 <Movement_Tick+0xda>
     a8c:	05 c0       	rjmp	.+10     	; 0xa98 <Movement_Tick+0xda>
	
	switch(state)
	{
		case M_start: break;
		
		case M_wait: break;
     a8e:	00 00       	nop
     a90:	03 c0       	rjmp	.+6      	; 0xa98 <Movement_Tick+0xda>
		break;
	}
	
	switch(state)
	{
		case M_start: break;
     a92:	00 00       	nop
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <Movement_Tick+0xda>
			{
				playerPosition = 16;
			}
		break;
		
		case M_moveRelease: break;
     a96:	00 00       	nop
		
		default: break;
	}
	
	return state;
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <Collision_Tick>:
#define COLLISIONDETECTION_H_

enum CollisionSM {C_start, C_detect} CollisionSM;

int Collision_Tick(int state) 
{
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	00 d0       	rcall	.+0      	; 0xaac <Collision_Tick+0x6>
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	9a 83       	std	Y+2, r25	; 0x02
     ab2:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	9a 81       	ldd	r25, Y+2	; 0x02
     ab8:	00 97       	sbiw	r24, 0x00	; 0
     aba:	19 f0       	breq	.+6      	; 0xac2 <Collision_Tick+0x1c>
     abc:	01 97       	sbiw	r24, 0x01	; 1
     abe:	41 f0       	breq	.+16     	; 0xad0 <Collision_Tick+0x2a>
     ac0:	0c c0       	rjmp	.+24     	; 0xada <Collision_Tick+0x34>
	{
		case C_start:
			isHit					= 0;		
     ac2:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <isHit>
			state = C_detect;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	9a 83       	std	Y+2, r25	; 0x02
     acc:	89 83       	std	Y+1, r24	; 0x01
		break;
     ace:	08 c0       	rjmp	.+16     	; 0xae0 <Collision_Tick+0x3a>
		
		case C_detect:
			state = C_detect;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	9a 83       	std	Y+2, r25	; 0x02
     ad6:	89 83       	std	Y+1, r24	; 0x01
		break;
     ad8:	03 c0       	rjmp	.+6      	; 0xae0 <Collision_Tick+0x3a>
		
		default: 
			state = C_start;
     ada:	1a 82       	std	Y+2, r1	; 0x02
     adc:	19 82       	std	Y+1, r1	; 0x01
		break;
     ade:	00 00       	nop
		
	}
	
	switch(state)
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	9a 81       	ldd	r25, Y+2	; 0x02
     ae4:	00 97       	sbiw	r24, 0x00	; 0
     ae6:	51 f1       	breq	.+84     	; 0xb3c <Collision_Tick+0x96>
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	09 f0       	breq	.+2      	; 0xaee <Collision_Tick+0x48>
				playerIcon = 'X';
			}

			break;	
			
		default:break;
     aec:	28 c0       	rjmp	.+80     	; 0xb3e <Collision_Tick+0x98>
	{
		case C_start:
		break;
			
		case C_detect:
			if (playerPosition == 16 && (row1[15] != 32 && row1[15] != 0))
     aee:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <playerPosition>
     af2:	80 31       	cpi	r24, 0x10	; 16
     af4:	79 f4       	brne	.+30     	; 0xb14 <Collision_Tick+0x6e>
     af6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <row1+0xf>
     afa:	80 32       	cpi	r24, 0x20	; 32
     afc:	59 f0       	breq	.+22     	; 0xb14 <Collision_Tick+0x6e>
     afe:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <row1+0xf>
     b02:	88 23       	and	r24, r24
     b04:	39 f0       	breq	.+14     	; 0xb14 <Collision_Tick+0x6e>
			{
				isHit = 1;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <isHit>
				playerIcon = 'X';
     b0c:	88 e5       	ldi	r24, 0x58	; 88
     b0e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <playerIcon>
     b12:	13 c0       	rjmp	.+38     	; 0xb3a <Collision_Tick+0x94>
			} 
			else if (playerPosition == 32 && (row2[15] != 32 && row2[15] != 0))
     b14:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <playerPosition>
     b18:	80 32       	cpi	r24, 0x20	; 32
     b1a:	79 f4       	brne	.+30     	; 0xb3a <Collision_Tick+0x94>
     b1c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <row2+0xf>
     b20:	80 32       	cpi	r24, 0x20	; 32
     b22:	59 f0       	breq	.+22     	; 0xb3a <Collision_Tick+0x94>
     b24:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <row2+0xf>
     b28:	88 23       	and	r24, r24
     b2a:	39 f0       	breq	.+14     	; 0xb3a <Collision_Tick+0x94>
			{
				isHit = 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <isHit>
				playerIcon = 'X';
     b32:	88 e5       	ldi	r24, 0x58	; 88
     b34:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <playerIcon>
			}

			break;	
     b38:	02 c0       	rjmp	.+4      	; 0xb3e <Collision_Tick+0x98>
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <Collision_Tick+0x98>
	}
	
	switch(state)
	{
		case C_start:
		break;
     b3c:	00 00       	nop
			break;	
			
		default:break;
	}
	
	return state;
     b3e:	89 81       	ldd	r24, Y+1	; 0x01
     b40:	9a 81       	ldd	r25, Y+2	; 0x02
}
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <main>:
#include "Display.h"
#include "Movement.h"
#include "CollisionDetection.h"

int main(void)
{
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	cd b7       	in	r28, 0x3d	; 61
     b56:	de b7       	in	r29, 0x3e	; 62
     b58:	ec 97       	sbiw	r28, 0x3c	; 60
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	de bf       	out	0x3e, r29	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
     b64:	84 e2       	ldi	r24, 0x24	; 36
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	2f ef       	ldi	r18, 0xFF	; 255
     b6a:	fc 01       	movw	r30, r24
     b6c:	20 83       	st	Z, r18
     b6e:	85 e2       	ldi	r24, 0x25	; 37
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	fc 01       	movw	r30, r24
     b74:	10 82       	st	Z, r1
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
     b76:	87 e2       	ldi	r24, 0x27	; 39
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	20 ef       	ldi	r18, 0xF0	; 240
     b7c:	fc 01       	movw	r30, r24
     b7e:	20 83       	st	Z, r18
     b80:	88 e2       	ldi	r24, 0x28	; 40
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	2f e0       	ldi	r18, 0x0F	; 15
     b86:	fc 01       	movw	r30, r24
     b88:	20 83       	st	Z, r18
	DDRD = 0xFF; PORTD = 0x00;
     b8a:	8a e2       	ldi	r24, 0x2A	; 42
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	2f ef       	ldi	r18, 0xFF	; 255
     b90:	fc 01       	movw	r30, r24
     b92:	20 83       	st	Z, r18
     b94:	8b e2       	ldi	r24, 0x2B	; 43
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	fc 01       	movw	r30, r24
     b9a:	10 82       	st	Z, r1

	/**Set individual task period********************************/
	unsigned long int ObstacleGenerator_calc	= 500;
     b9c:	84 ef       	ldi	r24, 0xF4	; 244
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	a0 e0       	ldi	r26, 0x00	; 0
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	8b 83       	std	Y+3, r24	; 0x03
     ba6:	9c 83       	std	Y+4, r25	; 0x04
     ba8:	ad 83       	std	Y+5, r26	; 0x05
     baa:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int Display_calc				= 500;
     bac:	84 ef       	ldi	r24, 0xF4	; 244
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	a0 e0       	ldi	r26, 0x00	; 0
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	8f 83       	std	Y+7, r24	; 0x07
     bb6:	98 87       	std	Y+8, r25	; 0x08
     bb8:	a9 87       	std	Y+9, r26	; 0x09
     bba:	ba 87       	std	Y+10, r27	; 0x0a
	unsigned long int Movement_calc				= 10;
     bbc:	8a e0       	ldi	r24, 0x0A	; 10
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	8b 87       	std	Y+11, r24	; 0x0b
     bc6:	9c 87       	std	Y+12, r25	; 0x0c
     bc8:	ad 87       	std	Y+13, r26	; 0x0d
     bca:	be 87       	std	Y+14, r27	; 0x0e
	unsigned long int Collision_calc			= 100;
     bcc:	84 e6       	ldi	r24, 0x64	; 100
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	8f 87       	std	Y+15, r24	; 0x0f
     bd6:	98 8b       	std	Y+16, r25	; 0x10
     bd8:	a9 8b       	std	Y+17, r26	; 0x11
     bda:	ba 8b       	std	Y+18, r27	; 0x12
	
		
	/**Set individual task properties********************************/
	
	//Calculating GCD
	unsigned long int tempGCD		= findGCD(ObstacleGenerator_calc, Display_calc);
     bdc:	2f 81       	ldd	r18, Y+7	; 0x07
     bde:	38 85       	ldd	r19, Y+8	; 0x08
     be0:	49 85       	ldd	r20, Y+9	; 0x09
     be2:	5a 85       	ldd	r21, Y+10	; 0x0a
     be4:	8b 81       	ldd	r24, Y+3	; 0x03
     be6:	9c 81       	ldd	r25, Y+4	; 0x04
     be8:	ad 81       	ldd	r26, Y+5	; 0x05
     bea:	be 81       	ldd	r27, Y+6	; 0x06
     bec:	bc 01       	movw	r22, r24
     bee:	cd 01       	movw	r24, r26
     bf0:	36 dc       	rcall	.-1940   	; 0x45e <findGCD>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	8b 8b       	std	Y+19, r24	; 0x13
     bf8:	9c 8b       	std	Y+20, r25	; 0x14
     bfa:	ad 8b       	std	Y+21, r26	; 0x15
     bfc:	be 8b       	std	Y+22, r27	; 0x16
					  tempGCD		= findGCD(tempGCD, Movement_calc);
     bfe:	2b 85       	ldd	r18, Y+11	; 0x0b
     c00:	3c 85       	ldd	r19, Y+12	; 0x0c
     c02:	4d 85       	ldd	r20, Y+13	; 0x0d
     c04:	5e 85       	ldd	r21, Y+14	; 0x0e
     c06:	8b 89       	ldd	r24, Y+19	; 0x13
     c08:	9c 89       	ldd	r25, Y+20	; 0x14
     c0a:	ad 89       	ldd	r26, Y+21	; 0x15
     c0c:	be 89       	ldd	r27, Y+22	; 0x16
     c0e:	bc 01       	movw	r22, r24
     c10:	cd 01       	movw	r24, r26
     c12:	25 dc       	rcall	.-1974   	; 0x45e <findGCD>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	8b 8b       	std	Y+19, r24	; 0x13
     c1a:	9c 8b       	std	Y+20, r25	; 0x14
     c1c:	ad 8b       	std	Y+21, r26	; 0x15
     c1e:	be 8b       	std	Y+22, r27	; 0x16
					  tempGCD		= findGCD(tempGCD, Collision_calc);
     c20:	2f 85       	ldd	r18, Y+15	; 0x0f
     c22:	38 89       	ldd	r19, Y+16	; 0x10
     c24:	49 89       	ldd	r20, Y+17	; 0x11
     c26:	5a 89       	ldd	r21, Y+18	; 0x12
     c28:	8b 89       	ldd	r24, Y+19	; 0x13
     c2a:	9c 89       	ldd	r25, Y+20	; 0x14
     c2c:	ad 89       	ldd	r26, Y+21	; 0x15
     c2e:	be 89       	ldd	r27, Y+22	; 0x16
     c30:	bc 01       	movw	r22, r24
     c32:	cd 01       	movw	r24, r26
     c34:	14 dc       	rcall	.-2008   	; 0x45e <findGCD>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	8b 8b       	std	Y+19, r24	; 0x13
     c3c:	9c 8b       	std	Y+20, r25	; 0x14
     c3e:	ad 8b       	std	Y+21, r26	; 0x15
     c40:	be 8b       	std	Y+22, r27	; 0x16
	unsigned long int GCD			= tempGCD;
     c42:	8b 89       	ldd	r24, Y+19	; 0x13
     c44:	9c 89       	ldd	r25, Y+20	; 0x14
     c46:	ad 89       	ldd	r26, Y+21	; 0x15
     c48:	be 89       	ldd	r27, Y+22	; 0x16
     c4a:	8f 8b       	std	Y+23, r24	; 0x17
     c4c:	98 8f       	std	Y+24, r25	; 0x18
     c4e:	a9 8f       	std	Y+25, r26	; 0x19
     c50:	ba 8f       	std	Y+26, r27	; 0x1a
	//Recalculate GCD periods for scheduler
	unsigned long int Tick1_Period	= ObstacleGenerator_calc/GCD,
     c52:	8b 81       	ldd	r24, Y+3	; 0x03
     c54:	9c 81       	ldd	r25, Y+4	; 0x04
     c56:	ad 81       	ldd	r26, Y+5	; 0x05
     c58:	be 81       	ldd	r27, Y+6	; 0x06
     c5a:	2f 89       	ldd	r18, Y+23	; 0x17
     c5c:	38 8d       	ldd	r19, Y+24	; 0x18
     c5e:	49 8d       	ldd	r20, Y+25	; 0x19
     c60:	5a 8d       	ldd	r21, Y+26	; 0x1a
     c62:	bc 01       	movw	r22, r24
     c64:	cd 01       	movw	r24, r26
     c66:	66 d1       	rcall	.+716    	; 0xf34 <__udivmodsi4>
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8b 8f       	std	Y+27, r24	; 0x1b
     c6e:	9c 8f       	std	Y+28, r25	; 0x1c
     c70:	ad 8f       	std	Y+29, r26	; 0x1d
     c72:	be 8f       	std	Y+30, r27	; 0x1e
					  Tick2_period	= Display_calc/GCD,
     c74:	8f 81       	ldd	r24, Y+7	; 0x07
     c76:	98 85       	ldd	r25, Y+8	; 0x08
     c78:	a9 85       	ldd	r26, Y+9	; 0x09
     c7a:	ba 85       	ldd	r27, Y+10	; 0x0a
     c7c:	2f 89       	ldd	r18, Y+23	; 0x17
     c7e:	38 8d       	ldd	r19, Y+24	; 0x18
     c80:	49 8d       	ldd	r20, Y+25	; 0x19
     c82:	5a 8d       	ldd	r21, Y+26	; 0x1a
     c84:	bc 01       	movw	r22, r24
     c86:	cd 01       	movw	r24, r26
     c88:	55 d1       	rcall	.+682    	; 0xf34 <__udivmodsi4>
     c8a:	da 01       	movw	r26, r20
     c8c:	c9 01       	movw	r24, r18
     c8e:	8f 8f       	std	Y+31, r24	; 0x1f
     c90:	98 a3       	std	Y+32, r25	; 0x20
     c92:	a9 a3       	std	Y+33, r26	; 0x21
     c94:	ba a3       	std	Y+34, r27	; 0x22
					  Tick3_period	= Movement_calc/GCD,
     c96:	8b 85       	ldd	r24, Y+11	; 0x0b
     c98:	9c 85       	ldd	r25, Y+12	; 0x0c
     c9a:	ad 85       	ldd	r26, Y+13	; 0x0d
     c9c:	be 85       	ldd	r27, Y+14	; 0x0e
     c9e:	2f 89       	ldd	r18, Y+23	; 0x17
     ca0:	38 8d       	ldd	r19, Y+24	; 0x18
     ca2:	49 8d       	ldd	r20, Y+25	; 0x19
     ca4:	5a 8d       	ldd	r21, Y+26	; 0x1a
     ca6:	bc 01       	movw	r22, r24
     ca8:	cd 01       	movw	r24, r26
     caa:	44 d1       	rcall	.+648    	; 0xf34 <__udivmodsi4>
     cac:	da 01       	movw	r26, r20
     cae:	c9 01       	movw	r24, r18
     cb0:	8b a3       	std	Y+35, r24	; 0x23
     cb2:	9c a3       	std	Y+36, r25	; 0x24
     cb4:	ad a3       	std	Y+37, r26	; 0x25
     cb6:	be a3       	std	Y+38, r27	; 0x26
					  Tick4_period	= Collision_calc/GCD;
     cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cba:	98 89       	ldd	r25, Y+16	; 0x10
     cbc:	a9 89       	ldd	r26, Y+17	; 0x11
     cbe:	ba 89       	ldd	r27, Y+18	; 0x12
     cc0:	2f 89       	ldd	r18, Y+23	; 0x17
     cc2:	38 8d       	ldd	r19, Y+24	; 0x18
     cc4:	49 8d       	ldd	r20, Y+25	; 0x19
     cc6:	5a 8d       	ldd	r21, Y+26	; 0x1a
     cc8:	bc 01       	movw	r22, r24
     cca:	cd 01       	movw	r24, r26
     ccc:	33 d1       	rcall	.+614    	; 0xf34 <__udivmodsi4>
     cce:	da 01       	movw	r26, r20
     cd0:	c9 01       	movw	r24, r18
     cd2:	8f a3       	std	Y+39, r24	; 0x27
     cd4:	98 a7       	std	Y+40, r25	; 0x28
     cd6:	a9 a7       	std	Y+41, r26	; 0x29
     cd8:	ba a7       	std	Y+42, r27	; 0x2a
	const unsigned short numTasks	= sizeof(tasks)/sizeof(task*);
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	9c a7       	std	Y+44, r25	; 0x2c
     ce0:	8b a7       	std	Y+43, r24	; 0x2b
	
	/****************************************************************/
	
	/**Set individual task properties**************/
	task1.state						= 0;
     ce2:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <task1>
	task1.period					= Tick1_Period;
     ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cea:	ad 8d       	ldd	r26, Y+29	; 0x1d
     cec:	be 8d       	ldd	r27, Y+30	; 0x1e
     cee:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <task1+0x1>
     cf2:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <task1+0x2>
     cf6:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <task1+0x3>
     cfa:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <task1+0x4>
	task1.elapsedTime				= Tick1_Period;
     cfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d00:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d02:	ad 8d       	ldd	r26, Y+29	; 0x1d
     d04:	be 8d       	ldd	r27, Y+30	; 0x1e
     d06:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <task1+0x5>
     d0a:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <task1+0x6>
     d0e:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <task1+0x7>
     d12:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <task1+0x8>
	task1.TickFct					= &ObstacleGeneratorSM_Tick;
     d16:	81 e9       	ldi	r24, 0x91	; 145
     d18:	93 e0       	ldi	r25, 0x03	; 3
     d1a:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <task1+0xa>
     d1e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <task1+0x9>
	
	// Task 2
	task2.state						= 0;//Task initial state.
     d22:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <task2>
	task2.period					= Tick2_period;//Task Period.
     d26:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d28:	98 a1       	ldd	r25, Y+32	; 0x20
     d2a:	a9 a1       	ldd	r26, Y+33	; 0x21
     d2c:	ba a1       	ldd	r27, Y+34	; 0x22
     d2e:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <task2+0x1>
     d32:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <task2+0x2>
     d36:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <task2+0x3>
     d3a:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <task2+0x4>
	task2.elapsedTime				= Tick2_period;//Task current elapsed time.
     d3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d40:	98 a1       	ldd	r25, Y+32	; 0x20
     d42:	a9 a1       	ldd	r26, Y+33	; 0x21
     d44:	ba a1       	ldd	r27, Y+34	; 0x22
     d46:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <task2+0x5>
     d4a:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <task2+0x6>
     d4e:	a0 93 71 01 	sts	0x0171, r26	; 0x800171 <task2+0x7>
     d52:	b0 93 72 01 	sts	0x0172, r27	; 0x800172 <task2+0x8>
	task2.TickFct					= &DisplaySM_Tick;//Function pointer for the tick.
     d56:	87 e2       	ldi	r24, 0x27	; 39
     d58:	94 e0       	ldi	r25, 0x04	; 4
     d5a:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <task2+0xa>
     d5e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <task2+0x9>
	
	//Task 3
	task3.state						= 0;//Task initial state.
     d62:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <task3>
	task3.period					= Tick3_period;//Task Period.
     d66:	8b a1       	ldd	r24, Y+35	; 0x23
     d68:	9c a1       	ldd	r25, Y+36	; 0x24
     d6a:	ad a1       	ldd	r26, Y+37	; 0x25
     d6c:	be a1       	ldd	r27, Y+38	; 0x26
     d6e:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <task3+0x1>
     d72:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <task3+0x2>
     d76:	a0 93 78 01 	sts	0x0178, r26	; 0x800178 <task3+0x3>
     d7a:	b0 93 79 01 	sts	0x0179, r27	; 0x800179 <task3+0x4>
	task3.elapsedTime				= Tick3_period;//Task current elapsed time.
     d7e:	8b a1       	ldd	r24, Y+35	; 0x23
     d80:	9c a1       	ldd	r25, Y+36	; 0x24
     d82:	ad a1       	ldd	r26, Y+37	; 0x25
     d84:	be a1       	ldd	r27, Y+38	; 0x26
     d86:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <task3+0x5>
     d8a:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <task3+0x6>
     d8e:	a0 93 7c 01 	sts	0x017C, r26	; 0x80017c <task3+0x7>
     d92:	b0 93 7d 01 	sts	0x017D, r27	; 0x80017d <task3+0x8>
	task3.TickFct					= &Movement_Tick;//Function pointer for the tick.
     d96:	8f ed       	ldi	r24, 0xDF	; 223
     d98:	94 e0       	ldi	r25, 0x04	; 4
     d9a:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <task3+0xa>
     d9e:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <task3+0x9>
	
	//Task 4
	task4.state						= 0;//Task initial state.
     da2:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <task4>
	task4.period					= Tick4_period;//Task Period.
     da6:	8f a1       	ldd	r24, Y+39	; 0x27
     da8:	98 a5       	ldd	r25, Y+40	; 0x28
     daa:	a9 a5       	ldd	r26, Y+41	; 0x29
     dac:	ba a5       	ldd	r27, Y+42	; 0x2a
     dae:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <task4+0x1>
     db2:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <task4+0x2>
     db6:	a0 93 83 01 	sts	0x0183, r26	; 0x800183 <task4+0x3>
     dba:	b0 93 84 01 	sts	0x0184, r27	; 0x800184 <task4+0x4>
	task4.elapsedTime				= Tick4_period;//Task current elapsed time.
     dbe:	8f a1       	ldd	r24, Y+39	; 0x27
     dc0:	98 a5       	ldd	r25, Y+40	; 0x28
     dc2:	a9 a5       	ldd	r26, Y+41	; 0x29
     dc4:	ba a5       	ldd	r27, Y+42	; 0x2a
     dc6:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <task4+0x5>
     dca:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <task4+0x6>
     dce:	a0 93 87 01 	sts	0x0187, r26	; 0x800187 <task4+0x7>
     dd2:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <task4+0x8>
	task4.TickFct					= &Collision_Tick;//Function pointer for the tick.
     dd6:	83 e5       	ldi	r24, 0x53	; 83
     dd8:	95 e0       	ldi	r25, 0x05	; 5
     dda:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <task4+0xa>
     dde:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <task4+0x9>

	/**********************************************/
	
	
	TimerSet(GCD);
     de2:	8f 89       	ldd	r24, Y+23	; 0x17
     de4:	98 8d       	ldd	r25, Y+24	; 0x18
     de6:	a9 8d       	ldd	r26, Y+25	; 0x19
     de8:	ba 8d       	ldd	r27, Y+26	; 0x1a
     dea:	bc 01       	movw	r22, r24
     dec:	cd 01       	movw	r24, r26
     dee:	6a da       	rcall	.-2860   	; 0x2c4 <TimerSet>
	TimerOn();
     df0:	96 da       	rcall	.-2772   	; 0x31e <TimerOn>
	
	LCD_init();
     df2:	73 d9       	rcall	.-3354   	; 0xda <LCD_init>
	
	while(1) 
	{
		for(unsigned short i = 0; i < numTasks; i++)
     df4:	1a 82       	std	Y+2, r1	; 0x02
     df6:	19 82       	std	Y+1, r1	; 0x01
     df8:	7a c0       	rjmp	.+244    	; 0xeee <main+0x3a2>
		{
			//keypad_value = GetKeypadKey();
			if(tasks[i] -> elapsedTime == tasks[i]-> period)
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	82 5d       	subi	r24, 0xD2	; 210
     e04:	9e 4f       	sbci	r25, 0xFE	; 254
     e06:	fc 01       	movw	r30, r24
     e08:	80 81       	ld	r24, Z
     e0a:	91 81       	ldd	r25, Z+1	; 0x01
     e0c:	fc 01       	movw	r30, r24
     e0e:	25 81       	ldd	r18, Z+5	; 0x05
     e10:	36 81       	ldd	r19, Z+6	; 0x06
     e12:	47 81       	ldd	r20, Z+7	; 0x07
     e14:	50 85       	ldd	r21, Z+8	; 0x08
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	9a 81       	ldd	r25, Y+2	; 0x02
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	82 5d       	subi	r24, 0xD2	; 210
     e20:	9e 4f       	sbci	r25, 0xFE	; 254
     e22:	fc 01       	movw	r30, r24
     e24:	80 81       	ld	r24, Z
     e26:	91 81       	ldd	r25, Z+1	; 0x01
     e28:	fc 01       	movw	r30, r24
     e2a:	81 81       	ldd	r24, Z+1	; 0x01
     e2c:	92 81       	ldd	r25, Z+2	; 0x02
     e2e:	a3 81       	ldd	r26, Z+3	; 0x03
     e30:	b4 81       	ldd	r27, Z+4	; 0x04
     e32:	28 17       	cp	r18, r24
     e34:	39 07       	cpc	r19, r25
     e36:	4a 07       	cpc	r20, r26
     e38:	5b 07       	cpc	r21, r27
     e3a:	a9 f5       	brne	.+106    	; 0xea6 <main+0x35a>
			{
				
				tasks[i] -> state		= tasks[i] -> TickFct(tasks[i] -> state);
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	82 5d       	subi	r24, 0xD2	; 210
     e46:	9e 4f       	sbci	r25, 0xFE	; 254
     e48:	fc 01       	movw	r30, r24
     e4a:	00 81       	ld	r16, Z
     e4c:	11 81       	ldd	r17, Z+1	; 0x01
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	9a 81       	ldd	r25, Y+2	; 0x02
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	82 5d       	subi	r24, 0xD2	; 210
     e58:	9e 4f       	sbci	r25, 0xFE	; 254
     e5a:	fc 01       	movw	r30, r24
     e5c:	80 81       	ld	r24, Z
     e5e:	91 81       	ldd	r25, Z+1	; 0x01
     e60:	fc 01       	movw	r30, r24
     e62:	21 85       	ldd	r18, Z+9	; 0x09
     e64:	32 85       	ldd	r19, Z+10	; 0x0a
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	82 5d       	subi	r24, 0xD2	; 210
     e70:	9e 4f       	sbci	r25, 0xFE	; 254
     e72:	fc 01       	movw	r30, r24
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	fc 01       	movw	r30, r24
     e7a:	80 81       	ld	r24, Z
     e7c:	08 2e       	mov	r0, r24
     e7e:	00 0c       	add	r0, r0
     e80:	99 0b       	sbc	r25, r25
     e82:	f9 01       	movw	r30, r18
     e84:	09 95       	icall
     e86:	f8 01       	movw	r30, r16
     e88:	80 83       	st	Z, r24
				tasks[i] -> elapsedTime = 0;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	82 5d       	subi	r24, 0xD2	; 210
     e94:	9e 4f       	sbci	r25, 0xFE	; 254
     e96:	fc 01       	movw	r30, r24
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	fc 01       	movw	r30, r24
     e9e:	15 82       	std	Z+5, r1	; 0x05
     ea0:	16 82       	std	Z+6, r1	; 0x06
     ea2:	17 82       	std	Z+7, r1	; 0x07
     ea4:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i] -> elapsedTime += 1;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	9a 81       	ldd	r25, Y+2	; 0x02
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	82 5d       	subi	r24, 0xD2	; 210
     eb0:	9e 4f       	sbci	r25, 0xFE	; 254
     eb2:	fc 01       	movw	r30, r24
     eb4:	20 81       	ld	r18, Z
     eb6:	31 81       	ldd	r19, Z+1	; 0x01
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	9a 81       	ldd	r25, Y+2	; 0x02
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	82 5d       	subi	r24, 0xD2	; 210
     ec2:	9e 4f       	sbci	r25, 0xFE	; 254
     ec4:	fc 01       	movw	r30, r24
     ec6:	80 81       	ld	r24, Z
     ec8:	91 81       	ldd	r25, Z+1	; 0x01
     eca:	fc 01       	movw	r30, r24
     ecc:	85 81       	ldd	r24, Z+5	; 0x05
     ece:	96 81       	ldd	r25, Z+6	; 0x06
     ed0:	a7 81       	ldd	r26, Z+7	; 0x07
     ed2:	b0 85       	ldd	r27, Z+8	; 0x08
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	a1 1d       	adc	r26, r1
     ed8:	b1 1d       	adc	r27, r1
     eda:	f9 01       	movw	r30, r18
     edc:	85 83       	std	Z+5, r24	; 0x05
     ede:	96 83       	std	Z+6, r25	; 0x06
     ee0:	a7 83       	std	Z+7, r26	; 0x07
     ee2:	b0 87       	std	Z+8, r27	; 0x08
	
	LCD_init();
	
	while(1) 
	{
		for(unsigned short i = 0; i < numTasks; i++)
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	9a 83       	std	Y+2, r25	; 0x02
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	29 81       	ldd	r18, Y+1	; 0x01
     ef0:	3a 81       	ldd	r19, Y+2	; 0x02
     ef2:	8b a5       	ldd	r24, Y+43	; 0x2b
     ef4:	9c a5       	ldd	r25, Y+44	; 0x2c
     ef6:	28 17       	cp	r18, r24
     ef8:	39 07       	cpc	r19, r25
     efa:	08 f4       	brcc	.+2      	; 0xefe <main+0x3b2>
     efc:	7e cf       	rjmp	.-260    	; 0xdfa <main+0x2ae>
				tasks[i] -> state		= tasks[i] -> TickFct(tasks[i] -> state);
				tasks[i] -> elapsedTime = 0;
			}
			tasks[i] -> elapsedTime += 1;
		}
		while(!TimerFlag);
     efe:	00 00       	nop
     f00:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
     f04:	88 23       	and	r24, r24
     f06:	e1 f3       	breq	.-8      	; 0xf00 <main+0x3b4>
		TimerFlag = 0;
     f08:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <__data_end>
	}
     f0c:	73 cf       	rjmp	.-282    	; 0xdf4 <main+0x2a8>

00000f0e <__divmodhi4>:
     f0e:	97 fb       	bst	r25, 7
     f10:	07 2e       	mov	r0, r23
     f12:	16 f4       	brtc	.+4      	; 0xf18 <__divmodhi4+0xa>
     f14:	00 94       	com	r0
     f16:	06 d0       	rcall	.+12     	; 0xf24 <__divmodhi4_neg1>
     f18:	77 fd       	sbrc	r23, 7
     f1a:	08 d0       	rcall	.+16     	; 0xf2c <__divmodhi4_neg2>
     f1c:	2d d0       	rcall	.+90     	; 0xf78 <__udivmodhi4>
     f1e:	07 fc       	sbrc	r0, 7
     f20:	05 d0       	rcall	.+10     	; 0xf2c <__divmodhi4_neg2>
     f22:	3e f4       	brtc	.+14     	; 0xf32 <__divmodhi4_exit>

00000f24 <__divmodhi4_neg1>:
     f24:	90 95       	com	r25
     f26:	81 95       	neg	r24
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	08 95       	ret

00000f2c <__divmodhi4_neg2>:
     f2c:	70 95       	com	r23
     f2e:	61 95       	neg	r22
     f30:	7f 4f       	sbci	r23, 0xFF	; 255

00000f32 <__divmodhi4_exit>:
     f32:	08 95       	ret

00000f34 <__udivmodsi4>:
     f34:	a1 e2       	ldi	r26, 0x21	; 33
     f36:	1a 2e       	mov	r1, r26
     f38:	aa 1b       	sub	r26, r26
     f3a:	bb 1b       	sub	r27, r27
     f3c:	fd 01       	movw	r30, r26
     f3e:	0d c0       	rjmp	.+26     	; 0xf5a <__udivmodsi4_ep>

00000f40 <__udivmodsi4_loop>:
     f40:	aa 1f       	adc	r26, r26
     f42:	bb 1f       	adc	r27, r27
     f44:	ee 1f       	adc	r30, r30
     f46:	ff 1f       	adc	r31, r31
     f48:	a2 17       	cp	r26, r18
     f4a:	b3 07       	cpc	r27, r19
     f4c:	e4 07       	cpc	r30, r20
     f4e:	f5 07       	cpc	r31, r21
     f50:	20 f0       	brcs	.+8      	; 0xf5a <__udivmodsi4_ep>
     f52:	a2 1b       	sub	r26, r18
     f54:	b3 0b       	sbc	r27, r19
     f56:	e4 0b       	sbc	r30, r20
     f58:	f5 0b       	sbc	r31, r21

00000f5a <__udivmodsi4_ep>:
     f5a:	66 1f       	adc	r22, r22
     f5c:	77 1f       	adc	r23, r23
     f5e:	88 1f       	adc	r24, r24
     f60:	99 1f       	adc	r25, r25
     f62:	1a 94       	dec	r1
     f64:	69 f7       	brne	.-38     	; 0xf40 <__udivmodsi4_loop>
     f66:	60 95       	com	r22
     f68:	70 95       	com	r23
     f6a:	80 95       	com	r24
     f6c:	90 95       	com	r25
     f6e:	9b 01       	movw	r18, r22
     f70:	ac 01       	movw	r20, r24
     f72:	bd 01       	movw	r22, r26
     f74:	cf 01       	movw	r24, r30
     f76:	08 95       	ret

00000f78 <__udivmodhi4>:
     f78:	aa 1b       	sub	r26, r26
     f7a:	bb 1b       	sub	r27, r27
     f7c:	51 e1       	ldi	r21, 0x11	; 17
     f7e:	07 c0       	rjmp	.+14     	; 0xf8e <__udivmodhi4_ep>

00000f80 <__udivmodhi4_loop>:
     f80:	aa 1f       	adc	r26, r26
     f82:	bb 1f       	adc	r27, r27
     f84:	a6 17       	cp	r26, r22
     f86:	b7 07       	cpc	r27, r23
     f88:	10 f0       	brcs	.+4      	; 0xf8e <__udivmodhi4_ep>
     f8a:	a6 1b       	sub	r26, r22
     f8c:	b7 0b       	sbc	r27, r23

00000f8e <__udivmodhi4_ep>:
     f8e:	88 1f       	adc	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	5a 95       	dec	r21
     f94:	a9 f7       	brne	.-22     	; 0xf80 <__udivmodhi4_loop>
     f96:	80 95       	com	r24
     f98:	90 95       	com	r25
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	08 95       	ret

00000fa0 <do_rand>:
     fa0:	8f 92       	push	r8
     fa2:	9f 92       	push	r9
     fa4:	af 92       	push	r10
     fa6:	bf 92       	push	r11
     fa8:	cf 92       	push	r12
     faa:	df 92       	push	r13
     fac:	ef 92       	push	r14
     fae:	ff 92       	push	r15
     fb0:	cf 93       	push	r28
     fb2:	df 93       	push	r29
     fb4:	ec 01       	movw	r28, r24
     fb6:	68 81       	ld	r22, Y
     fb8:	79 81       	ldd	r23, Y+1	; 0x01
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	61 15       	cp	r22, r1
     fc0:	71 05       	cpc	r23, r1
     fc2:	81 05       	cpc	r24, r1
     fc4:	91 05       	cpc	r25, r1
     fc6:	21 f4       	brne	.+8      	; 0xfd0 <do_rand+0x30>
     fc8:	64 e2       	ldi	r22, 0x24	; 36
     fca:	79 ed       	ldi	r23, 0xD9	; 217
     fcc:	8b e5       	ldi	r24, 0x5B	; 91
     fce:	97 e0       	ldi	r25, 0x07	; 7
     fd0:	2d e1       	ldi	r18, 0x1D	; 29
     fd2:	33 ef       	ldi	r19, 0xF3	; 243
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	38 d0       	rcall	.+112    	; 0x104a <__divmodsi4>
     fda:	49 01       	movw	r8, r18
     fdc:	5a 01       	movw	r10, r20
     fde:	9b 01       	movw	r18, r22
     fe0:	ac 01       	movw	r20, r24
     fe2:	a7 ea       	ldi	r26, 0xA7	; 167
     fe4:	b1 e4       	ldi	r27, 0x41	; 65
     fe6:	4d d0       	rcall	.+154    	; 0x1082 <__muluhisi3>
     fe8:	6b 01       	movw	r12, r22
     fea:	7c 01       	movw	r14, r24
     fec:	ac ee       	ldi	r26, 0xEC	; 236
     fee:	b4 ef       	ldi	r27, 0xF4	; 244
     ff0:	a5 01       	movw	r20, r10
     ff2:	94 01       	movw	r18, r8
     ff4:	52 d0       	rcall	.+164    	; 0x109a <__mulohisi3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	8c 0d       	add	r24, r12
     ffc:	9d 1d       	adc	r25, r13
     ffe:	ae 1d       	adc	r26, r14
    1000:	bf 1d       	adc	r27, r15
    1002:	b7 ff       	sbrs	r27, 7
    1004:	03 c0       	rjmp	.+6      	; 0x100c <do_rand+0x6c>
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	a1 09       	sbc	r26, r1
    100a:	b0 48       	sbci	r27, 0x80	; 128
    100c:	88 83       	st	Y, r24
    100e:	99 83       	std	Y+1, r25	; 0x01
    1010:	aa 83       	std	Y+2, r26	; 0x02
    1012:	bb 83       	std	Y+3, r27	; 0x03
    1014:	9f 77       	andi	r25, 0x7F	; 127
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	ff 90       	pop	r15
    101c:	ef 90       	pop	r14
    101e:	df 90       	pop	r13
    1020:	cf 90       	pop	r12
    1022:	bf 90       	pop	r11
    1024:	af 90       	pop	r10
    1026:	9f 90       	pop	r9
    1028:	8f 90       	pop	r8
    102a:	08 95       	ret

0000102c <rand_r>:
    102c:	b9 cf       	rjmp	.-142    	; 0xfa0 <do_rand>

0000102e <rand>:
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	b6 cf       	rjmp	.-148    	; 0xfa0 <do_rand>

00001034 <srand>:
    1034:	a0 e0       	ldi	r26, 0x00	; 0
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    103c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1040:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    1044:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    1048:	08 95       	ret

0000104a <__divmodsi4>:
    104a:	05 2e       	mov	r0, r21
    104c:	97 fb       	bst	r25, 7
    104e:	16 f4       	brtc	.+4      	; 0x1054 <__divmodsi4+0xa>
    1050:	00 94       	com	r0
    1052:	0f d0       	rcall	.+30     	; 0x1072 <__negsi2>
    1054:	57 fd       	sbrc	r21, 7
    1056:	05 d0       	rcall	.+10     	; 0x1062 <__divmodsi4_neg2>
    1058:	6d df       	rcall	.-294    	; 0xf34 <__udivmodsi4>
    105a:	07 fc       	sbrc	r0, 7
    105c:	02 d0       	rcall	.+4      	; 0x1062 <__divmodsi4_neg2>
    105e:	46 f4       	brtc	.+16     	; 0x1070 <__divmodsi4_exit>
    1060:	08 c0       	rjmp	.+16     	; 0x1072 <__negsi2>

00001062 <__divmodsi4_neg2>:
    1062:	50 95       	com	r21
    1064:	40 95       	com	r20
    1066:	30 95       	com	r19
    1068:	21 95       	neg	r18
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	4f 4f       	sbci	r20, 0xFF	; 255
    106e:	5f 4f       	sbci	r21, 0xFF	; 255

00001070 <__divmodsi4_exit>:
    1070:	08 95       	ret

00001072 <__negsi2>:
    1072:	90 95       	com	r25
    1074:	80 95       	com	r24
    1076:	70 95       	com	r23
    1078:	61 95       	neg	r22
    107a:	7f 4f       	sbci	r23, 0xFF	; 255
    107c:	8f 4f       	sbci	r24, 0xFF	; 255
    107e:	9f 4f       	sbci	r25, 0xFF	; 255
    1080:	08 95       	ret

00001082 <__muluhisi3>:
    1082:	0f d0       	rcall	.+30     	; 0x10a2 <__umulhisi3>
    1084:	a5 9f       	mul	r26, r21
    1086:	90 0d       	add	r25, r0
    1088:	b4 9f       	mul	r27, r20
    108a:	90 0d       	add	r25, r0
    108c:	a4 9f       	mul	r26, r20
    108e:	80 0d       	add	r24, r0
    1090:	91 1d       	adc	r25, r1
    1092:	11 24       	eor	r1, r1
    1094:	08 95       	ret

00001096 <__mulshisi3>:
    1096:	b7 ff       	sbrs	r27, 7
    1098:	f4 cf       	rjmp	.-24     	; 0x1082 <__muluhisi3>

0000109a <__mulohisi3>:
    109a:	f3 df       	rcall	.-26     	; 0x1082 <__muluhisi3>
    109c:	82 1b       	sub	r24, r18
    109e:	93 0b       	sbc	r25, r19
    10a0:	08 95       	ret

000010a2 <__umulhisi3>:
    10a2:	a2 9f       	mul	r26, r18
    10a4:	b0 01       	movw	r22, r0
    10a6:	b3 9f       	mul	r27, r19
    10a8:	c0 01       	movw	r24, r0
    10aa:	a3 9f       	mul	r26, r19
    10ac:	70 0d       	add	r23, r0
    10ae:	81 1d       	adc	r24, r1
    10b0:	11 24       	eor	r1, r1
    10b2:	91 1d       	adc	r25, r1
    10b4:	b2 9f       	mul	r27, r18
    10b6:	70 0d       	add	r23, r0
    10b8:	81 1d       	adc	r24, r1
    10ba:	11 24       	eor	r1, r1
    10bc:	91 1d       	adc	r25, r1
    10be:	08 95       	ret

000010c0 <_exit>:
    10c0:	f8 94       	cli

000010c2 <__stop_program>:
    10c2:	ff cf       	rjmp	.-2      	; 0x10c2 <__stop_program>
