
xzhou016_FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000b2a  00000bbe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080012a  0080012a  00000be8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000082d  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e2  00000000  00000000  0000156d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ea  00000000  00000000  0000174f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  0000213c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000470  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c2  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003112  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	9b c1       	rjmp	.+822    	; 0x36c <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 34       	cpi	r26, 0x45	; 69
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	cc d2       	rcall	.+1432   	; 0x65c <main>
  c4:	30 c5       	rjmp	.+2656   	; 0xb26 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
		case keypad_release:	break;
		
		default:				break;
	}
	return state;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	18 d0       	rcall	.+48     	; 0x104 <LCD_WriteCommand>
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <LCD_init>:
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	84 e6       	ldi	r24, 0x64	; 100
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	a6 d0       	rcall	.+332    	; 0x234 <delay_ms>
  e8:	88 e3       	ldi	r24, 0x38	; 56
  ea:	0c d0       	rcall	.+24     	; 0x104 <LCD_WriteCommand>
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	0a d0       	rcall	.+20     	; 0x104 <LCD_WriteCommand>
  f0:	8f e0       	ldi	r24, 0x0F	; 15
  f2:	08 d0       	rcall	.+16     	; 0x104 <LCD_WriteCommand>
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	06 d0       	rcall	.+12     	; 0x104 <LCD_WriteCommand>
  f8:	8a e0       	ldi	r24, 0x0A	; 10
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	9b d0       	rcall	.+310    	; 0x234 <delay_ms>
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <LCD_WriteCommand>:
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	89 83       	std	Y+1, r24	; 0x01
 110:	8b e2       	ldi	r24, 0x2B	; 43
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2b e2       	ldi	r18, 0x2B	; 43
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	20 81       	ld	r18, Z
 11c:	2f 7b       	andi	r18, 0xBF	; 191
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	29 81       	ldd	r18, Y+1	; 0x01
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
 12c:	8b e2       	ldi	r24, 0x2B	; 43
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2b e2       	ldi	r18, 0x2B	; 43
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	20 68       	ori	r18, 0x80	; 128
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
 13e:	00 00       	nop
 140:	8b e2       	ldi	r24, 0x2B	; 43
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	2b e2       	ldi	r18, 0x2B	; 43
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	f9 01       	movw	r30, r18
 14a:	20 81       	ld	r18, Z
 14c:	2f 77       	andi	r18, 0x7F	; 127
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	6e d0       	rcall	.+220    	; 0x234 <delay_ms>
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <LCD_WriteData>:
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	1f 92       	push	r1
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	89 83       	std	Y+1, r24	; 0x01
 16c:	8b e2       	ldi	r24, 0x2B	; 43
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	2b e2       	ldi	r18, 0x2B	; 43
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	f9 01       	movw	r30, r18
 176:	20 81       	ld	r18, Z
 178:	20 64       	ori	r18, 0x40	; 64
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
 17e:	85 e2       	ldi	r24, 0x25	; 37
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	29 81       	ldd	r18, Y+1	; 0x01
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
 188:	8b e2       	ldi	r24, 0x2B	; 43
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	2b e2       	ldi	r18, 0x2B	; 43
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	20 68       	ori	r18, 0x80	; 128
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
 19a:	00 00       	nop
 19c:	8b e2       	ldi	r24, 0x2B	; 43
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	2b e2       	ldi	r18, 0x2B	; 43
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	f9 01       	movw	r30, r18
 1a6:	20 81       	ld	r18, Z
 1a8:	2f 77       	andi	r18, 0x7F	; 127
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	40 d0       	rcall	.+128    	; 0x234 <delay_ms>
 1b4:	0f 90       	pop	r0
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <LCD_DisplayString>:
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <LCD_DisplayString+0x6>
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <LCD_DisplayString+0x8>
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	8a 83       	std	Y+2, r24	; 0x02
 1ca:	7c 83       	std	Y+4, r23	; 0x04
 1cc:	6b 83       	std	Y+3, r22	; 0x03
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	89 83       	std	Y+1, r24	; 0x01
 1d2:	0f c0       	rjmp	.+30     	; 0x1f2 <LCD_DisplayString+0x36>
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	98 0f       	add	r25, r24
 1da:	99 83       	std	Y+1, r25	; 0x01
 1dc:	17 d0       	rcall	.+46     	; 0x20c <LCD_Cursor>
 1de:	8b 81       	ldd	r24, Y+3	; 0x03
 1e0:	9c 81       	ldd	r25, Y+4	; 0x04
 1e2:	9c 01       	movw	r18, r24
 1e4:	2f 5f       	subi	r18, 0xFF	; 255
 1e6:	3f 4f       	sbci	r19, 0xFF	; 255
 1e8:	3c 83       	std	Y+4, r19	; 0x04
 1ea:	2b 83       	std	Y+3, r18	; 0x03
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	b7 df       	rcall	.-146    	; 0x160 <LCD_WriteData>
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	9c 81       	ldd	r25, Y+4	; 0x04
 1f6:	fc 01       	movw	r30, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	88 23       	and	r24, r24
 1fc:	59 f7       	brne	.-42     	; 0x1d4 <LCD_DisplayString+0x18>
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <LCD_Cursor>:
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	1f 92       	push	r1
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	89 83       	std	Y+1, r24	; 0x01
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	81 31       	cpi	r24, 0x11	; 17
 21c:	20 f4       	brcc	.+8      	; 0x226 <LCD_Cursor+0x1a>
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	81 58       	subi	r24, 0x81	; 129
 222:	70 df       	rcall	.-288    	; 0x104 <LCD_WriteCommand>
 224:	03 c0       	rjmp	.+6      	; 0x22c <LCD_Cursor+0x20>
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	81 55       	subi	r24, 0x51	; 81
 22a:	6c df       	rcall	.-296    	; 0x104 <LCD_WriteCommand>
 22c:	0f 90       	pop	r0
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <delay_ms>:
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	00 d0       	rcall	.+0      	; 0x23a <delay_ms+0x6>
 23a:	00 d0       	rcall	.+0      	; 0x23c <delay_ms+0x8>
 23c:	00 d0       	rcall	.+0      	; 0x23e <delay_ms+0xa>
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	9e 83       	std	Y+6, r25	; 0x06
 244:	8d 83       	std	Y+5, r24	; 0x05
 246:	1a 82       	std	Y+2, r1	; 0x02
 248:	19 82       	std	Y+1, r1	; 0x01
 24a:	13 c0       	rjmp	.+38     	; 0x272 <delay_ms+0x3e>
 24c:	1c 82       	std	Y+4, r1	; 0x04
 24e:	1b 82       	std	Y+3, r1	; 0x03
 250:	06 c0       	rjmp	.+12     	; 0x25e <delay_ms+0x2a>
 252:	00 00       	nop
 254:	8b 81       	ldd	r24, Y+3	; 0x03
 256:	9c 81       	ldd	r25, Y+4	; 0x04
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	9c 83       	std	Y+4, r25	; 0x04
 25c:	8b 83       	std	Y+3, r24	; 0x03
 25e:	8b 81       	ldd	r24, Y+3	; 0x03
 260:	9c 81       	ldd	r25, Y+4	; 0x04
 262:	87 30       	cpi	r24, 0x07	; 7
 264:	93 40       	sbci	r25, 0x03	; 3
 266:	ac f3       	brlt	.-22     	; 0x252 <delay_ms+0x1e>
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	9a 81       	ldd	r25, Y+2	; 0x02
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	9a 83       	std	Y+2, r25	; 0x02
 270:	89 83       	std	Y+1, r24	; 0x01
 272:	29 81       	ldd	r18, Y+1	; 0x01
 274:	3a 81       	ldd	r19, Y+2	; 0x02
 276:	8d 81       	ldd	r24, Y+5	; 0x05
 278:	9e 81       	ldd	r25, Y+6	; 0x06
 27a:	28 17       	cp	r18, r24
 27c:	39 07       	cpc	r19, r25
 27e:	34 f3       	brlt	.-52     	; 0x24c <delay_ms+0x18>
 280:	26 96       	adiw	r28, 0x06	; 6
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <TimerSet>:
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	00 d0       	rcall	.+0      	; 0x298 <TimerSet+0x6>
 298:	00 d0       	rcall	.+0      	; 0x29a <TimerSet+0x8>
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	69 83       	std	Y+1, r22	; 0x01
 2a0:	7a 83       	std	Y+2, r23	; 0x02
 2a2:	8b 83       	std	Y+3, r24	; 0x03
 2a4:	9c 83       	std	Y+4, r25	; 0x04
 2a6:	89 81       	ldd	r24, Y+1	; 0x01
 2a8:	9a 81       	ldd	r25, Y+2	; 0x02
 2aa:	ab 81       	ldd	r26, Y+3	; 0x03
 2ac:	bc 81       	ldd	r27, Y+4	; 0x04
 2ae:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M>
 2b2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x1>
 2b6:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <_avr_timer_M+0x2>
 2ba:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <_avr_timer_M+0x3>
 2be:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 2c2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 2c6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 2ca:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 2ce:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 2d2:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 2d6:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 2da:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	08 95       	ret

000002ec <TimerOn>:
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
 2f4:	81 e8       	ldi	r24, 0x81	; 129
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	2b e0       	ldi	r18, 0x0B	; 11
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
 2fe:	88 e8       	ldi	r24, 0x88	; 136
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	2d e7       	ldi	r18, 0x7D	; 125
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	31 83       	std	Z+1, r19	; 0x01
 30a:	20 83       	st	Z, r18
 30c:	8f e6       	ldi	r24, 0x6F	; 111
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	22 e0       	ldi	r18, 0x02	; 2
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
 316:	84 e8       	ldi	r24, 0x84	; 132
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	fc 01       	movw	r30, r24
 31c:	11 82       	std	Z+1, r1	; 0x01
 31e:	10 82       	st	Z, r1
 320:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 324:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 328:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 32c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 330:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 334:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 338:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 33c:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
 340:	8f e5       	ldi	r24, 0x5F	; 95
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	2f e5       	ldi	r18, 0x5F	; 95
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	f9 01       	movw	r30, r18
 34a:	20 81       	ld	r18, Z
 34c:	20 68       	ori	r18, 0x80	; 128
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <TimerISR>:
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <__vector_13>:
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 37c:	0f 92       	push	r0
 37e:	2f 93       	push	r18
 380:	3f 93       	push	r19
 382:	4f 93       	push	r20
 384:	5f 93       	push	r21
 386:	6f 93       	push	r22
 388:	7f 93       	push	r23
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	af 93       	push	r26
 390:	bf 93       	push	r27
 392:	ef 93       	push	r30
 394:	ff 93       	push	r31
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
 39e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_avr_timer_cntcurr>
 3a2:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <_avr_timer_cntcurr+0x1>
 3a6:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <_avr_timer_cntcurr+0x2>
 3aa:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <_avr_timer_cntcurr+0x3>
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	a1 09       	sbc	r26, r1
 3b2:	b1 09       	sbc	r27, r1
 3b4:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 3b8:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 3bc:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 3c0:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
 3c4:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_avr_timer_cntcurr>
 3c8:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <_avr_timer_cntcurr+0x1>
 3cc:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <_avr_timer_cntcurr+0x2>
 3d0:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <_avr_timer_cntcurr+0x3>
 3d4:	89 2b       	or	r24, r25
 3d6:	8a 2b       	or	r24, r26
 3d8:	8b 2b       	or	r24, r27
 3da:	89 f4       	brne	.+34     	; 0x3fe <__vector_13+0x92>
 3dc:	bd df       	rcall	.-134    	; 0x358 <TimerISR>
 3de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 3e2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 3e6:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 3ea:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 3ee:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 3f2:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 3f6:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 3fa:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	ff 91       	pop	r31
 404:	ef 91       	pop	r30
 406:	bf 91       	pop	r27
 408:	af 91       	pop	r26
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	7f 91       	pop	r23
 410:	6f 91       	pop	r22
 412:	5f 91       	pop	r21
 414:	4f 91       	pop	r20
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 420:	0f 90       	pop	r0
 422:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 426:	0f 90       	pop	r0
 428:	1f 90       	pop	r1
 42a:	18 95       	reti

0000042c <findGCD>:
 42c:	cf 93       	push	r28
 42e:	df 93       	push	r29
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
 434:	60 97       	sbiw	r28, 0x10	; 16
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	f8 94       	cli
 43a:	de bf       	out	0x3e, r29	; 62
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	cd bf       	out	0x3d, r28	; 61
 440:	6d 83       	std	Y+5, r22	; 0x05
 442:	7e 83       	std	Y+6, r23	; 0x06
 444:	8f 83       	std	Y+7, r24	; 0x07
 446:	98 87       	std	Y+8, r25	; 0x08
 448:	29 87       	std	Y+9, r18	; 0x09
 44a:	3a 87       	std	Y+10, r19	; 0x0a
 44c:	4b 87       	std	Y+11, r20	; 0x0b
 44e:	5c 87       	std	Y+12, r21	; 0x0c
 450:	8d 81       	ldd	r24, Y+5	; 0x05
 452:	9e 81       	ldd	r25, Y+6	; 0x06
 454:	af 81       	ldd	r26, Y+7	; 0x07
 456:	b8 85       	ldd	r27, Y+8	; 0x08
 458:	29 85       	ldd	r18, Y+9	; 0x09
 45a:	3a 85       	ldd	r19, Y+10	; 0x0a
 45c:	4b 85       	ldd	r20, Y+11	; 0x0b
 45e:	5c 85       	ldd	r21, Y+12	; 0x0c
 460:	bc 01       	movw	r22, r24
 462:	cd 01       	movw	r24, r26
 464:	80 d2       	rcall	.+1280   	; 0x966 <__udivmodsi4>
 466:	dc 01       	movw	r26, r24
 468:	cb 01       	movw	r24, r22
 46a:	89 83       	std	Y+1, r24	; 0x01
 46c:	9a 83       	std	Y+2, r25	; 0x02
 46e:	ab 83       	std	Y+3, r26	; 0x03
 470:	bc 83       	std	Y+4, r27	; 0x04
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	9a 81       	ldd	r25, Y+2	; 0x02
 476:	ab 81       	ldd	r26, Y+3	; 0x03
 478:	bc 81       	ldd	r27, Y+4	; 0x04
 47a:	89 2b       	or	r24, r25
 47c:	8a 2b       	or	r24, r26
 47e:	8b 2b       	or	r24, r27
 480:	29 f4       	brne	.+10     	; 0x48c <findGCD+0x60>
 482:	89 85       	ldd	r24, Y+9	; 0x09
 484:	9a 85       	ldd	r25, Y+10	; 0x0a
 486:	ab 85       	ldd	r26, Y+11	; 0x0b
 488:	bc 85       	ldd	r27, Y+12	; 0x0c
 48a:	11 c0       	rjmp	.+34     	; 0x4ae <findGCD+0x82>
 48c:	89 85       	ldd	r24, Y+9	; 0x09
 48e:	9a 85       	ldd	r25, Y+10	; 0x0a
 490:	ab 85       	ldd	r26, Y+11	; 0x0b
 492:	bc 85       	ldd	r27, Y+12	; 0x0c
 494:	8d 83       	std	Y+5, r24	; 0x05
 496:	9e 83       	std	Y+6, r25	; 0x06
 498:	af 83       	std	Y+7, r26	; 0x07
 49a:	b8 87       	std	Y+8, r27	; 0x08
 49c:	89 81       	ldd	r24, Y+1	; 0x01
 49e:	9a 81       	ldd	r25, Y+2	; 0x02
 4a0:	ab 81       	ldd	r26, Y+3	; 0x03
 4a2:	bc 81       	ldd	r27, Y+4	; 0x04
 4a4:	89 87       	std	Y+9, r24	; 0x09
 4a6:	9a 87       	std	Y+10, r25	; 0x0a
 4a8:	ab 87       	std	Y+11, r26	; 0x0b
 4aa:	bc 87       	std	Y+12, r27	; 0x0c
 4ac:	d1 cf       	rjmp	.-94     	; 0x450 <findGCD+0x24>
 4ae:	bc 01       	movw	r22, r24
 4b0:	cd 01       	movw	r24, r26
 4b2:	60 96       	adiw	r28, 0x10	; 16
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	08 95       	ret

000004c4 <ObstacleGeneratorSM_Tick>:
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 4cc:	2a 97       	sbiw	r28, 0x0a	; 10
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	f8 94       	cli
 4d2:	de bf       	out	0x3e, r29	; 62
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	cd bf       	out	0x3d, r28	; 61
 4d8:	9a 83       	std	Y+2, r25	; 0x02
 4da:	89 83       	std	Y+1, r24	; 0x01
 4dc:	89 81       	ldd	r24, Y+1	; 0x01
 4de:	9a 81       	ldd	r25, Y+2	; 0x02
 4e0:	00 97       	sbiw	r24, 0x00	; 0
 4e2:	19 f0       	breq	.+6      	; 0x4ea <ObstacleGeneratorSM_Tick+0x26>
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	49 f0       	breq	.+18     	; 0x4fa <ObstacleGeneratorSM_Tick+0x36>
 4e8:	05 c0       	rjmp	.+10     	; 0x4f4 <ObstacleGeneratorSM_Tick+0x30>
 4ea:	81 e0       	ldi	r24, 0x01	; 1
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	9a 83       	std	Y+2, r25	; 0x02
 4f0:	89 83       	std	Y+1, r24	; 0x01
 4f2:	04 c0       	rjmp	.+8      	; 0x4fc <ObstacleGeneratorSM_Tick+0x38>
 4f4:	1a 82       	std	Y+2, r1	; 0x02
 4f6:	19 82       	std	Y+1, r1	; 0x01
 4f8:	01 c0       	rjmp	.+2      	; 0x4fc <ObstacleGeneratorSM_Tick+0x38>
 4fa:	00 00       	nop
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
 4fe:	9a 81       	ldd	r25, Y+2	; 0x02
 500:	00 97       	sbiw	r24, 0x00	; 0
 502:	09 f4       	brne	.+2      	; 0x506 <ObstacleGeneratorSM_Tick+0x42>
 504:	6b c0       	rjmp	.+214    	; 0x5dc <ObstacleGeneratorSM_Tick+0x118>
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	09 f0       	breq	.+2      	; 0x50c <ObstacleGeneratorSM_Tick+0x48>
 50a:	69 c0       	rjmp	.+210    	; 0x5de <ObstacleGeneratorSM_Tick+0x11a>
 50c:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <str_index>
 510:	88 2f       	mov	r24, r24
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	ac 01       	movw	r20, r24
 516:	68 e0       	ldi	r22, 0x08	; 8
 518:	71 e0       	ldi	r23, 0x01	; 1
 51a:	89 e0       	ldi	r24, 0x09	; 9
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	ae d2       	rcall	.+1372   	; 0xa7c <memmove>
 520:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <str_index>
 524:	88 2f       	mov	r24, r24
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	ac 01       	movw	r20, r24
 52a:	68 e1       	ldi	r22, 0x18	; 24
 52c:	71 e0       	ldi	r23, 0x01	; 1
 52e:	89 e1       	ldi	r24, 0x19	; 25
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	a4 d2       	rcall	.+1352   	; 0xa7c <memmove>
 534:	95 d2       	rcall	.+1322   	; 0xa60 <rand>
 536:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <object_generate_prob>
 53a:	22 2f       	mov	r18, r18
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	b9 01       	movw	r22, r18
 540:	ff d1       	rcall	.+1022   	; 0x940 <__divmodhi4>
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	21 f4       	brne	.+8      	; 0x54e <ObstacleGeneratorSM_Tick+0x8a>
 546:	83 e2       	ldi	r24, 0x23	; 35
 548:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
 54c:	10 c0       	rjmp	.+32     	; 0x56e <ObstacleGeneratorSM_Tick+0xaa>
 54e:	88 d2       	rcall	.+1296   	; 0xa60 <rand>
 550:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <object_generate_prob>
 554:	22 2f       	mov	r18, r18
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	b9 01       	movw	r22, r18
 55a:	f2 d1       	rcall	.+996    	; 0x940 <__divmodhi4>
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	21 f4       	brne	.+8      	; 0x568 <ObstacleGeneratorSM_Tick+0xa4>
 560:	8a e2       	ldi	r24, 0x2A	; 42
 562:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
 566:	03 c0       	rjmp	.+6      	; 0x56e <ObstacleGeneratorSM_Tick+0xaa>
 568:	80 e2       	ldi	r24, 0x20	; 32
 56a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
 56e:	78 d2       	rcall	.+1264   	; 0xa60 <rand>
 570:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <object_generate_prob>
 574:	22 2f       	mov	r18, r18
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	b9 01       	movw	r22, r18
 57a:	e2 d1       	rcall	.+964    	; 0x940 <__divmodhi4>
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	21 f4       	brne	.+8      	; 0x588 <ObstacleGeneratorSM_Tick+0xc4>
 580:	83 e2       	ldi	r24, 0x23	; 35
 582:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <row2>
 586:	10 c0       	rjmp	.+32     	; 0x5a8 <ObstacleGeneratorSM_Tick+0xe4>
 588:	6b d2       	rcall	.+1238   	; 0xa60 <rand>
 58a:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <object_generate_prob>
 58e:	22 2f       	mov	r18, r18
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	b9 01       	movw	r22, r18
 594:	d5 d1       	rcall	.+938    	; 0x940 <__divmodhi4>
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	21 f4       	brne	.+8      	; 0x5a2 <ObstacleGeneratorSM_Tick+0xde>
 59a:	8a e2       	ldi	r24, 0x2A	; 42
 59c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <row2>
 5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <ObstacleGeneratorSM_Tick+0xe4>
 5a2:	80 e2       	ldi	r24, 0x20	; 32
 5a4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <row2>
 5a8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <row1+0xf>
 5ac:	88 23       	and	r24, r24
 5ae:	21 f4       	brne	.+8      	; 0x5b8 <ObstacleGeneratorSM_Tick+0xf4>
 5b0:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <row2+0xf>
 5b4:	88 23       	and	r24, r24
 5b6:	61 f0       	breq	.+24     	; 0x5d0 <ObstacleGeneratorSM_Tick+0x10c>
 5b8:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <str_index>
 5bc:	80 31       	cpi	r24, 0x10	; 16
 5be:	40 f0       	brcs	.+16     	; 0x5d0 <ObstacleGeneratorSM_Tick+0x10c>
 5c0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <row1+0xf>
 5c4:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <row2+0xf>
 5c8:	80 e1       	ldi	r24, 0x10	; 16
 5ca:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <str_index>
 5ce:	07 c0       	rjmp	.+14     	; 0x5de <ObstacleGeneratorSM_Tick+0x11a>
 5d0:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <str_index>
 5d4:	8f 5f       	subi	r24, 0xFF	; 255
 5d6:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <str_index>
 5da:	01 c0       	rjmp	.+2      	; 0x5de <ObstacleGeneratorSM_Tick+0x11a>
 5dc:	00 00       	nop
 5de:	89 81       	ldd	r24, Y+1	; 0x01
 5e0:	9a 81       	ldd	r25, Y+2	; 0x02
 5e2:	2a 96       	adiw	r28, 0x0a	; 10
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	f8 94       	cli
 5e8:	de bf       	out	0x3e, r29	; 62
 5ea:	0f be       	out	0x3f, r0	; 63
 5ec:	cd bf       	out	0x3d, r28	; 61
 5ee:	df 91       	pop	r29
 5f0:	cf 91       	pop	r28
 5f2:	08 95       	ret

000005f4 <DisplaySM_Tick>:

unsigned char display_index = 0;

enum displaySM{display_start, display_scroll} displaySM;
int DisplaySM_Tick(int state)
{
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	00 d0       	rcall	.+0      	; 0x5fa <DisplaySM_Tick+0x6>
 5fa:	cd b7       	in	r28, 0x3d	; 61
 5fc:	de b7       	in	r29, 0x3e	; 62
 5fe:	9a 83       	std	Y+2, r25	; 0x02
 600:	89 83       	std	Y+1, r24	; 0x01
	
	
	//unsigned char back = 0;
	switch(state) //state transition
 602:	89 81       	ldd	r24, Y+1	; 0x01
 604:	9a 81       	ldd	r25, Y+2	; 0x02
 606:	00 97       	sbiw	r24, 0x00	; 0
 608:	19 f0       	breq	.+6      	; 0x610 <DisplaySM_Tick+0x1c>
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	31 f0       	breq	.+12     	; 0x61a <DisplaySM_Tick+0x26>
 60e:	0a c0       	rjmp	.+20     	; 0x624 <DisplaySM_Tick+0x30>
	{
		case display_start:
			state =  display_scroll;
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	9a 83       	std	Y+2, r25	; 0x02
 616:	89 83       	std	Y+1, r24	; 0x01
		break;
 618:	08 c0       	rjmp	.+16     	; 0x62a <DisplaySM_Tick+0x36>
		
		
		case display_scroll:
			state = display_scroll;
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	9a 83       	std	Y+2, r25	; 0x02
 620:	89 83       	std	Y+1, r24	; 0x01
		break;
 622:	03 c0       	rjmp	.+6      	; 0x62a <DisplaySM_Tick+0x36>
		
		default:
			state = display_start;
 624:	1a 82       	std	Y+2, r1	; 0x02
 626:	19 82       	std	Y+1, r1	; 0x01
		break;
 628:	00 00       	nop
	}
	
	
	switch(state) //state action
 62a:	89 81       	ldd	r24, Y+1	; 0x01
 62c:	9a 81       	ldd	r25, Y+2	; 0x02
 62e:	00 97       	sbiw	r24, 0x00	; 0
 630:	69 f0       	breq	.+26     	; 0x64c <DisplaySM_Tick+0x58>
 632:	01 97       	sbiw	r24, 0x01	; 1
 634:	09 f0       	breq	.+2      	; 0x638 <DisplaySM_Tick+0x44>
			LCD_ClearScreen();
			LCD_DisplayString(1, row1);
			LCD_DisplayString(17, row2);
		break;
		
		default: break;
 636:	0b c0       	rjmp	.+22     	; 0x64e <DisplaySM_Tick+0x5a>
	{
		case display_start:
		break;
		
		case display_scroll:
			LCD_ClearScreen();
 638:	47 dd       	rcall	.-1394   	; 0xc8 <LCD_ClearScreen>
			LCD_DisplayString(1, row1);
 63a:	68 e0       	ldi	r22, 0x08	; 8
 63c:	71 e0       	ldi	r23, 0x01	; 1
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	bd dd       	rcall	.-1158   	; 0x1bc <LCD_DisplayString>
			LCD_DisplayString(17, row2);
 642:	68 e1       	ldi	r22, 0x18	; 24
 644:	71 e0       	ldi	r23, 0x01	; 1
 646:	81 e1       	ldi	r24, 0x11	; 17
 648:	b9 dd       	rcall	.-1166   	; 0x1bc <LCD_DisplayString>
		break;
 64a:	01 c0       	rjmp	.+2      	; 0x64e <DisplaySM_Tick+0x5a>
	
	
	switch(state) //state action
	{
		case display_start:
		break;
 64c:	00 00       	nop
		break;
		
		default: break;
	}
	
	return state;
 64e:	89 81       	ldd	r24, Y+1	; 0x01
 650:	9a 81       	ldd	r25, Y+2	; 0x02
	
}
 652:	0f 90       	pop	r0
 654:	0f 90       	pop	r0
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	08 95       	ret

0000065c <main>:
#include "ObstacleGenerator.h"
#include "KeypadReadSM.h"
#include "Display.h"

int main(void)
{
 65c:	0f 93       	push	r16
 65e:	1f 93       	push	r17
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	cd b7       	in	r28, 0x3d	; 61
 666:	de b7       	in	r29, 0x3e	; 62
 668:	a8 97       	sbiw	r28, 0x28	; 40
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	f8 94       	cli
 66e:	de bf       	out	0x3e, r29	; 62
 670:	0f be       	out	0x3f, r0	; 63
 672:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 674:	84 e2       	ldi	r24, 0x24	; 36
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	2f ef       	ldi	r18, 0xFF	; 255
 67a:	fc 01       	movw	r30, r24
 67c:	20 83       	st	Z, r18
 67e:	85 e2       	ldi	r24, 0x25	; 37
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	fc 01       	movw	r30, r24
 684:	10 82       	st	Z, r1
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 686:	87 e2       	ldi	r24, 0x27	; 39
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	20 ef       	ldi	r18, 0xF0	; 240
 68c:	fc 01       	movw	r30, r24
 68e:	20 83       	st	Z, r18
 690:	88 e2       	ldi	r24, 0x28	; 40
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	2f e0       	ldi	r18, 0x0F	; 15
 696:	fc 01       	movw	r30, r24
 698:	20 83       	st	Z, r18
	DDRD = 0xFF; PORTD = 0x00;
 69a:	8a e2       	ldi	r24, 0x2A	; 42
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	2f ef       	ldi	r18, 0xFF	; 255
 6a0:	fc 01       	movw	r30, r24
 6a2:	20 83       	st	Z, r18
 6a4:	8b e2       	ldi	r24, 0x2B	; 43
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	fc 01       	movw	r30, r24
 6aa:	10 82       	st	Z, r1

	/**Set individual task period********************************/
	unsigned long int Tick1_calc	= 500;
 6ac:	84 ef       	ldi	r24, 0xF4	; 244
 6ae:	91 e0       	ldi	r25, 0x01	; 1
 6b0:	a0 e0       	ldi	r26, 0x00	; 0
 6b2:	b0 e0       	ldi	r27, 0x00	; 0
 6b4:	8b 83       	std	Y+3, r24	; 0x03
 6b6:	9c 83       	std	Y+4, r25	; 0x04
 6b8:	ad 83       	std	Y+5, r26	; 0x05
 6ba:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int Tick2_calc	= 500;
 6bc:	84 ef       	ldi	r24, 0xF4	; 244
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	a0 e0       	ldi	r26, 0x00	; 0
 6c2:	b0 e0       	ldi	r27, 0x00	; 0
 6c4:	8f 83       	std	Y+7, r24	; 0x07
 6c6:	98 87       	std	Y+8, r25	; 0x08
 6c8:	a9 87       	std	Y+9, r26	; 0x09
 6ca:	ba 87       	std	Y+10, r27	; 0x0a
	
	/**Set individual task properties********************************/
	
	//Calculating GCD
	unsigned long int tempGCD		= findGCD(Tick1_calc, Tick2_calc);
 6cc:	2f 81       	ldd	r18, Y+7	; 0x07
 6ce:	38 85       	ldd	r19, Y+8	; 0x08
 6d0:	49 85       	ldd	r20, Y+9	; 0x09
 6d2:	5a 85       	ldd	r21, Y+10	; 0x0a
 6d4:	8b 81       	ldd	r24, Y+3	; 0x03
 6d6:	9c 81       	ldd	r25, Y+4	; 0x04
 6d8:	ad 81       	ldd	r26, Y+5	; 0x05
 6da:	be 81       	ldd	r27, Y+6	; 0x06
 6dc:	bc 01       	movw	r22, r24
 6de:	cd 01       	movw	r24, r26
 6e0:	a5 de       	rcall	.-694    	; 0x42c <findGCD>
 6e2:	dc 01       	movw	r26, r24
 6e4:	cb 01       	movw	r24, r22
 6e6:	8b 87       	std	Y+11, r24	; 0x0b
 6e8:	9c 87       	std	Y+12, r25	; 0x0c
 6ea:	ad 87       	std	Y+13, r26	; 0x0d
 6ec:	be 87       	std	Y+14, r27	; 0x0e
	unsigned long int GCD			= tempGCD;
 6ee:	8b 85       	ldd	r24, Y+11	; 0x0b
 6f0:	9c 85       	ldd	r25, Y+12	; 0x0c
 6f2:	ad 85       	ldd	r26, Y+13	; 0x0d
 6f4:	be 85       	ldd	r27, Y+14	; 0x0e
 6f6:	8f 87       	std	Y+15, r24	; 0x0f
 6f8:	98 8b       	std	Y+16, r25	; 0x10
 6fa:	a9 8b       	std	Y+17, r26	; 0x11
 6fc:	ba 8b       	std	Y+18, r27	; 0x12
	//Recalculate GCD periods for scheduler
	unsigned long int Tick1_Period	= Tick1_calc/GCD;
 6fe:	8b 81       	ldd	r24, Y+3	; 0x03
 700:	9c 81       	ldd	r25, Y+4	; 0x04
 702:	ad 81       	ldd	r26, Y+5	; 0x05
 704:	be 81       	ldd	r27, Y+6	; 0x06
 706:	2f 85       	ldd	r18, Y+15	; 0x0f
 708:	38 89       	ldd	r19, Y+16	; 0x10
 70a:	49 89       	ldd	r20, Y+17	; 0x11
 70c:	5a 89       	ldd	r21, Y+18	; 0x12
 70e:	bc 01       	movw	r22, r24
 710:	cd 01       	movw	r24, r26
 712:	29 d1       	rcall	.+594    	; 0x966 <__udivmodsi4>
 714:	da 01       	movw	r26, r20
 716:	c9 01       	movw	r24, r18
 718:	8b 8b       	std	Y+19, r24	; 0x13
 71a:	9c 8b       	std	Y+20, r25	; 0x14
 71c:	ad 8b       	std	Y+21, r26	; 0x15
 71e:	be 8b       	std	Y+22, r27	; 0x16
	unsigned long int Tick2_period	= Tick2_calc/GCD;	
 720:	8f 81       	ldd	r24, Y+7	; 0x07
 722:	98 85       	ldd	r25, Y+8	; 0x08
 724:	a9 85       	ldd	r26, Y+9	; 0x09
 726:	ba 85       	ldd	r27, Y+10	; 0x0a
 728:	2f 85       	ldd	r18, Y+15	; 0x0f
 72a:	38 89       	ldd	r19, Y+16	; 0x10
 72c:	49 89       	ldd	r20, Y+17	; 0x11
 72e:	5a 89       	ldd	r21, Y+18	; 0x12
 730:	bc 01       	movw	r22, r24
 732:	cd 01       	movw	r24, r26
 734:	18 d1       	rcall	.+560    	; 0x966 <__udivmodsi4>
 736:	da 01       	movw	r26, r20
 738:	c9 01       	movw	r24, r18
 73a:	8f 8b       	std	Y+23, r24	; 0x17
 73c:	98 8f       	std	Y+24, r25	; 0x18
 73e:	a9 8f       	std	Y+25, r26	; 0x19
 740:	ba 8f       	std	Y+26, r27	; 0x1a
	static task task1, task2;
	task *tasks[]					= {&task1 , &task2};
 742:	8f e2       	ldi	r24, 0x2F	; 47
 744:	91 e0       	ldi	r25, 0x01	; 1
 746:	9e 8f       	std	Y+30, r25	; 0x1e
 748:	8d 8f       	std	Y+29, r24	; 0x1d
 74a:	8a e3       	ldi	r24, 0x3A	; 58
 74c:	91 e0       	ldi	r25, 0x01	; 1
 74e:	98 a3       	std	Y+32, r25	; 0x20
 750:	8f 8f       	std	Y+31, r24	; 0x1f
	const unsigned short numTasks	= sizeof(tasks)/sizeof(task*);
 752:	82 e0       	ldi	r24, 0x02	; 2
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	9c 8f       	std	Y+28, r25	; 0x1c
 758:	8b 8f       	std	Y+27, r24	; 0x1b
	
	/****************************************************************/
	
	/**Set individual task properties**************/
	task1.state						= 0;
 75a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <task1.2045>
	task1.period					= Tick1_Period;
 75e:	8b 89       	ldd	r24, Y+19	; 0x13
 760:	9c 89       	ldd	r25, Y+20	; 0x14
 762:	ad 89       	ldd	r26, Y+21	; 0x15
 764:	be 89       	ldd	r27, Y+22	; 0x16
 766:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <task1.2045+0x1>
 76a:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <task1.2045+0x2>
 76e:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <task1.2045+0x3>
 772:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <task1.2045+0x4>
	task1.elapsedTime				= Tick1_Period;
 776:	8b 89       	ldd	r24, Y+19	; 0x13
 778:	9c 89       	ldd	r25, Y+20	; 0x14
 77a:	ad 89       	ldd	r26, Y+21	; 0x15
 77c:	be 89       	ldd	r27, Y+22	; 0x16
 77e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <task1.2045+0x5>
 782:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <task1.2045+0x6>
 786:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <task1.2045+0x7>
 78a:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <task1.2045+0x8>
	task1.TickFct					= &ObstacleGeneratorSM_Tick;
 78e:	82 e6       	ldi	r24, 0x62	; 98
 790:	92 e0       	ldi	r25, 0x02	; 2
 792:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <task1.2045+0xa>
 796:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <task1.2045+0x9>
	
	// Task 2
	task2.state						= -1;//Task initial state.
 79a:	8f ef       	ldi	r24, 0xFF	; 255
 79c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <task2.2046>
	task2.period					= Tick2_period;//Task Period.
 7a0:	8f 89       	ldd	r24, Y+23	; 0x17
 7a2:	98 8d       	ldd	r25, Y+24	; 0x18
 7a4:	a9 8d       	ldd	r26, Y+25	; 0x19
 7a6:	ba 8d       	ldd	r27, Y+26	; 0x1a
 7a8:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <task2.2046+0x1>
 7ac:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <task2.2046+0x2>
 7b0:	a0 93 3d 01 	sts	0x013D, r26	; 0x80013d <task2.2046+0x3>
 7b4:	b0 93 3e 01 	sts	0x013E, r27	; 0x80013e <task2.2046+0x4>
	task2.elapsedTime				= Tick2_period;//Task current elapsed time.
 7b8:	8f 89       	ldd	r24, Y+23	; 0x17
 7ba:	98 8d       	ldd	r25, Y+24	; 0x18
 7bc:	a9 8d       	ldd	r26, Y+25	; 0x19
 7be:	ba 8d       	ldd	r27, Y+26	; 0x1a
 7c0:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <task2.2046+0x5>
 7c4:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <task2.2046+0x6>
 7c8:	a0 93 41 01 	sts	0x0141, r26	; 0x800141 <task2.2046+0x7>
 7cc:	b0 93 42 01 	sts	0x0142, r27	; 0x800142 <task2.2046+0x8>
	task2.TickFct					= &DisplaySM_Tick;//Function pointer for the tick.
 7d0:	8a ef       	ldi	r24, 0xFA	; 250
 7d2:	92 e0       	ldi	r25, 0x02	; 2
 7d4:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <task2.2046+0xa>
 7d8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <task2.2046+0x9>

	/**********************************************/
	
	
	TimerSet(GCD);
 7dc:	8f 85       	ldd	r24, Y+15	; 0x0f
 7de:	98 89       	ldd	r25, Y+16	; 0x10
 7e0:	a9 89       	ldd	r26, Y+17	; 0x11
 7e2:	ba 89       	ldd	r27, Y+18	; 0x12
 7e4:	bc 01       	movw	r22, r24
 7e6:	cd 01       	movw	r24, r26
 7e8:	54 dd       	rcall	.-1368   	; 0x292 <TimerSet>
	TimerOn();
 7ea:	80 dd       	rcall	.-1280   	; 0x2ec <TimerOn>
	
	LCD_init();
 7ec:	76 dc       	rcall	.-1812   	; 0xda <LCD_init>
	
	while(1) 
	{
		for(unsigned short i = 0; i < numTasks; i++)
 7ee:	1a 82       	std	Y+2, r1	; 0x02
 7f0:	19 82       	std	Y+1, r1	; 0x01
 7f2:	9b c0       	rjmp	.+310    	; 0x92a <main+0x2ce>
		{
			if(tasks[i] -> elapsedTime == tasks[i]-> period)
 7f4:	89 81       	ldd	r24, Y+1	; 0x01
 7f6:	9a 81       	ldd	r25, Y+2	; 0x02
 7f8:	88 0f       	add	r24, r24
 7fa:	99 1f       	adc	r25, r25
 7fc:	9e 01       	movw	r18, r28
 7fe:	2f 5f       	subi	r18, 0xFF	; 255
 800:	3f 4f       	sbci	r19, 0xFF	; 255
 802:	82 0f       	add	r24, r18
 804:	93 1f       	adc	r25, r19
 806:	4c 96       	adiw	r24, 0x1c	; 28
 808:	fc 01       	movw	r30, r24
 80a:	80 81       	ld	r24, Z
 80c:	91 81       	ldd	r25, Z+1	; 0x01
 80e:	fc 01       	movw	r30, r24
 810:	25 81       	ldd	r18, Z+5	; 0x05
 812:	36 81       	ldd	r19, Z+6	; 0x06
 814:	47 81       	ldd	r20, Z+7	; 0x07
 816:	50 85       	ldd	r21, Z+8	; 0x08
 818:	89 81       	ldd	r24, Y+1	; 0x01
 81a:	9a 81       	ldd	r25, Y+2	; 0x02
 81c:	88 0f       	add	r24, r24
 81e:	99 1f       	adc	r25, r25
 820:	be 01       	movw	r22, r28
 822:	6f 5f       	subi	r22, 0xFF	; 255
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	86 0f       	add	r24, r22
 828:	97 1f       	adc	r25, r23
 82a:	4c 96       	adiw	r24, 0x1c	; 28
 82c:	fc 01       	movw	r30, r24
 82e:	80 81       	ld	r24, Z
 830:	91 81       	ldd	r25, Z+1	; 0x01
 832:	fc 01       	movw	r30, r24
 834:	81 81       	ldd	r24, Z+1	; 0x01
 836:	92 81       	ldd	r25, Z+2	; 0x02
 838:	a3 81       	ldd	r26, Z+3	; 0x03
 83a:	b4 81       	ldd	r27, Z+4	; 0x04
 83c:	28 17       	cp	r18, r24
 83e:	39 07       	cpc	r19, r25
 840:	4a 07       	cpc	r20, r26
 842:	5b 07       	cpc	r21, r27
 844:	09 f0       	breq	.+2      	; 0x848 <main+0x1ec>
 846:	45 c0       	rjmp	.+138    	; 0x8d2 <main+0x276>
			{
				tasks[i] -> state		= tasks[i] -> TickFct(tasks[i] -> state);
 848:	89 81       	ldd	r24, Y+1	; 0x01
 84a:	9a 81       	ldd	r25, Y+2	; 0x02
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	9e 01       	movw	r18, r28
 852:	2f 5f       	subi	r18, 0xFF	; 255
 854:	3f 4f       	sbci	r19, 0xFF	; 255
 856:	82 0f       	add	r24, r18
 858:	93 1f       	adc	r25, r19
 85a:	4c 96       	adiw	r24, 0x1c	; 28
 85c:	fc 01       	movw	r30, r24
 85e:	00 81       	ld	r16, Z
 860:	11 81       	ldd	r17, Z+1	; 0x01
 862:	89 81       	ldd	r24, Y+1	; 0x01
 864:	9a 81       	ldd	r25, Y+2	; 0x02
 866:	88 0f       	add	r24, r24
 868:	99 1f       	adc	r25, r25
 86a:	9e 01       	movw	r18, r28
 86c:	2f 5f       	subi	r18, 0xFF	; 255
 86e:	3f 4f       	sbci	r19, 0xFF	; 255
 870:	82 0f       	add	r24, r18
 872:	93 1f       	adc	r25, r19
 874:	4c 96       	adiw	r24, 0x1c	; 28
 876:	fc 01       	movw	r30, r24
 878:	80 81       	ld	r24, Z
 87a:	91 81       	ldd	r25, Z+1	; 0x01
 87c:	fc 01       	movw	r30, r24
 87e:	21 85       	ldd	r18, Z+9	; 0x09
 880:	32 85       	ldd	r19, Z+10	; 0x0a
 882:	89 81       	ldd	r24, Y+1	; 0x01
 884:	9a 81       	ldd	r25, Y+2	; 0x02
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	ae 01       	movw	r20, r28
 88c:	4f 5f       	subi	r20, 0xFF	; 255
 88e:	5f 4f       	sbci	r21, 0xFF	; 255
 890:	84 0f       	add	r24, r20
 892:	95 1f       	adc	r25, r21
 894:	4c 96       	adiw	r24, 0x1c	; 28
 896:	fc 01       	movw	r30, r24
 898:	80 81       	ld	r24, Z
 89a:	91 81       	ldd	r25, Z+1	; 0x01
 89c:	fc 01       	movw	r30, r24
 89e:	80 81       	ld	r24, Z
 8a0:	08 2e       	mov	r0, r24
 8a2:	00 0c       	add	r0, r0
 8a4:	99 0b       	sbc	r25, r25
 8a6:	f9 01       	movw	r30, r18
 8a8:	09 95       	icall
 8aa:	f8 01       	movw	r30, r16
 8ac:	80 83       	st	Z, r24
				tasks[i] -> elapsedTime = 0;
 8ae:	89 81       	ldd	r24, Y+1	; 0x01
 8b0:	9a 81       	ldd	r25, Y+2	; 0x02
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	9e 01       	movw	r18, r28
 8b8:	2f 5f       	subi	r18, 0xFF	; 255
 8ba:	3f 4f       	sbci	r19, 0xFF	; 255
 8bc:	82 0f       	add	r24, r18
 8be:	93 1f       	adc	r25, r19
 8c0:	4c 96       	adiw	r24, 0x1c	; 28
 8c2:	fc 01       	movw	r30, r24
 8c4:	80 81       	ld	r24, Z
 8c6:	91 81       	ldd	r25, Z+1	; 0x01
 8c8:	fc 01       	movw	r30, r24
 8ca:	15 82       	std	Z+5, r1	; 0x05
 8cc:	16 82       	std	Z+6, r1	; 0x06
 8ce:	17 82       	std	Z+7, r1	; 0x07
 8d0:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i] -> elapsedTime += 1;
 8d2:	89 81       	ldd	r24, Y+1	; 0x01
 8d4:	9a 81       	ldd	r25, Y+2	; 0x02
 8d6:	88 0f       	add	r24, r24
 8d8:	99 1f       	adc	r25, r25
 8da:	9e 01       	movw	r18, r28
 8dc:	2f 5f       	subi	r18, 0xFF	; 255
 8de:	3f 4f       	sbci	r19, 0xFF	; 255
 8e0:	82 0f       	add	r24, r18
 8e2:	93 1f       	adc	r25, r19
 8e4:	4c 96       	adiw	r24, 0x1c	; 28
 8e6:	fc 01       	movw	r30, r24
 8e8:	20 81       	ld	r18, Z
 8ea:	31 81       	ldd	r19, Z+1	; 0x01
 8ec:	89 81       	ldd	r24, Y+1	; 0x01
 8ee:	9a 81       	ldd	r25, Y+2	; 0x02
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	ae 01       	movw	r20, r28
 8f6:	4f 5f       	subi	r20, 0xFF	; 255
 8f8:	5f 4f       	sbci	r21, 0xFF	; 255
 8fa:	84 0f       	add	r24, r20
 8fc:	95 1f       	adc	r25, r21
 8fe:	4c 96       	adiw	r24, 0x1c	; 28
 900:	fc 01       	movw	r30, r24
 902:	80 81       	ld	r24, Z
 904:	91 81       	ldd	r25, Z+1	; 0x01
 906:	fc 01       	movw	r30, r24
 908:	85 81       	ldd	r24, Z+5	; 0x05
 90a:	96 81       	ldd	r25, Z+6	; 0x06
 90c:	a7 81       	ldd	r26, Z+7	; 0x07
 90e:	b0 85       	ldd	r27, Z+8	; 0x08
 910:	01 96       	adiw	r24, 0x01	; 1
 912:	a1 1d       	adc	r26, r1
 914:	b1 1d       	adc	r27, r1
 916:	f9 01       	movw	r30, r18
 918:	85 83       	std	Z+5, r24	; 0x05
 91a:	96 83       	std	Z+6, r25	; 0x06
 91c:	a7 83       	std	Z+7, r26	; 0x07
 91e:	b0 87       	std	Z+8, r27	; 0x08
	
	LCD_init();
	
	while(1) 
	{
		for(unsigned short i = 0; i < numTasks; i++)
 920:	89 81       	ldd	r24, Y+1	; 0x01
 922:	9a 81       	ldd	r25, Y+2	; 0x02
 924:	01 96       	adiw	r24, 0x01	; 1
 926:	9a 83       	std	Y+2, r25	; 0x02
 928:	89 83       	std	Y+1, r24	; 0x01
 92a:	29 81       	ldd	r18, Y+1	; 0x01
 92c:	3a 81       	ldd	r19, Y+2	; 0x02
 92e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 930:	9c 8d       	ldd	r25, Y+28	; 0x1c
 932:	28 17       	cp	r18, r24
 934:	39 07       	cpc	r19, r25
 936:	08 f4       	brcc	.+2      	; 0x93a <main+0x2de>
 938:	5d cf       	rjmp	.-326    	; 0x7f4 <main+0x198>
				tasks[i] -> elapsedTime = 0;
			}
			tasks[i] -> elapsedTime += 1;
		}
		//while(!TimerFlag);
		TimerFlag = 0;
 93a:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
	}
 93e:	57 cf       	rjmp	.-338    	; 0x7ee <main+0x192>

00000940 <__divmodhi4>:
 940:	97 fb       	bst	r25, 7
 942:	07 2e       	mov	r0, r23
 944:	16 f4       	brtc	.+4      	; 0x94a <__divmodhi4+0xa>
 946:	00 94       	com	r0
 948:	06 d0       	rcall	.+12     	; 0x956 <__divmodhi4_neg1>
 94a:	77 fd       	sbrc	r23, 7
 94c:	08 d0       	rcall	.+16     	; 0x95e <__divmodhi4_neg2>
 94e:	2d d0       	rcall	.+90     	; 0x9aa <__udivmodhi4>
 950:	07 fc       	sbrc	r0, 7
 952:	05 d0       	rcall	.+10     	; 0x95e <__divmodhi4_neg2>
 954:	3e f4       	brtc	.+14     	; 0x964 <__divmodhi4_exit>

00000956 <__divmodhi4_neg1>:
 956:	90 95       	com	r25
 958:	81 95       	neg	r24
 95a:	9f 4f       	sbci	r25, 0xFF	; 255
 95c:	08 95       	ret

0000095e <__divmodhi4_neg2>:
 95e:	70 95       	com	r23
 960:	61 95       	neg	r22
 962:	7f 4f       	sbci	r23, 0xFF	; 255

00000964 <__divmodhi4_exit>:
 964:	08 95       	ret

00000966 <__udivmodsi4>:
 966:	a1 e2       	ldi	r26, 0x21	; 33
 968:	1a 2e       	mov	r1, r26
 96a:	aa 1b       	sub	r26, r26
 96c:	bb 1b       	sub	r27, r27
 96e:	fd 01       	movw	r30, r26
 970:	0d c0       	rjmp	.+26     	; 0x98c <__udivmodsi4_ep>

00000972 <__udivmodsi4_loop>:
 972:	aa 1f       	adc	r26, r26
 974:	bb 1f       	adc	r27, r27
 976:	ee 1f       	adc	r30, r30
 978:	ff 1f       	adc	r31, r31
 97a:	a2 17       	cp	r26, r18
 97c:	b3 07       	cpc	r27, r19
 97e:	e4 07       	cpc	r30, r20
 980:	f5 07       	cpc	r31, r21
 982:	20 f0       	brcs	.+8      	; 0x98c <__udivmodsi4_ep>
 984:	a2 1b       	sub	r26, r18
 986:	b3 0b       	sbc	r27, r19
 988:	e4 0b       	sbc	r30, r20
 98a:	f5 0b       	sbc	r31, r21

0000098c <__udivmodsi4_ep>:
 98c:	66 1f       	adc	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	99 1f       	adc	r25, r25
 994:	1a 94       	dec	r1
 996:	69 f7       	brne	.-38     	; 0x972 <__udivmodsi4_loop>
 998:	60 95       	com	r22
 99a:	70 95       	com	r23
 99c:	80 95       	com	r24
 99e:	90 95       	com	r25
 9a0:	9b 01       	movw	r18, r22
 9a2:	ac 01       	movw	r20, r24
 9a4:	bd 01       	movw	r22, r26
 9a6:	cf 01       	movw	r24, r30
 9a8:	08 95       	ret

000009aa <__udivmodhi4>:
 9aa:	aa 1b       	sub	r26, r26
 9ac:	bb 1b       	sub	r27, r27
 9ae:	51 e1       	ldi	r21, 0x11	; 17
 9b0:	07 c0       	rjmp	.+14     	; 0x9c0 <__udivmodhi4_ep>

000009b2 <__udivmodhi4_loop>:
 9b2:	aa 1f       	adc	r26, r26
 9b4:	bb 1f       	adc	r27, r27
 9b6:	a6 17       	cp	r26, r22
 9b8:	b7 07       	cpc	r27, r23
 9ba:	10 f0       	brcs	.+4      	; 0x9c0 <__udivmodhi4_ep>
 9bc:	a6 1b       	sub	r26, r22
 9be:	b7 0b       	sbc	r27, r23

000009c0 <__udivmodhi4_ep>:
 9c0:	88 1f       	adc	r24, r24
 9c2:	99 1f       	adc	r25, r25
 9c4:	5a 95       	dec	r21
 9c6:	a9 f7       	brne	.-22     	; 0x9b2 <__udivmodhi4_loop>
 9c8:	80 95       	com	r24
 9ca:	90 95       	com	r25
 9cc:	bc 01       	movw	r22, r24
 9ce:	cd 01       	movw	r24, r26
 9d0:	08 95       	ret

000009d2 <do_rand>:
 9d2:	8f 92       	push	r8
 9d4:	9f 92       	push	r9
 9d6:	af 92       	push	r10
 9d8:	bf 92       	push	r11
 9da:	cf 92       	push	r12
 9dc:	df 92       	push	r13
 9de:	ef 92       	push	r14
 9e0:	ff 92       	push	r15
 9e2:	cf 93       	push	r28
 9e4:	df 93       	push	r29
 9e6:	ec 01       	movw	r28, r24
 9e8:	68 81       	ld	r22, Y
 9ea:	79 81       	ldd	r23, Y+1	; 0x01
 9ec:	8a 81       	ldd	r24, Y+2	; 0x02
 9ee:	9b 81       	ldd	r25, Y+3	; 0x03
 9f0:	61 15       	cp	r22, r1
 9f2:	71 05       	cpc	r23, r1
 9f4:	81 05       	cpc	r24, r1
 9f6:	91 05       	cpc	r25, r1
 9f8:	21 f4       	brne	.+8      	; 0xa02 <do_rand+0x30>
 9fa:	64 e2       	ldi	r22, 0x24	; 36
 9fc:	79 ed       	ldi	r23, 0xD9	; 217
 9fe:	8b e5       	ldi	r24, 0x5B	; 91
 a00:	97 e0       	ldi	r25, 0x07	; 7
 a02:	2d e1       	ldi	r18, 0x1D	; 29
 a04:	33 ef       	ldi	r19, 0xF3	; 243
 a06:	41 e0       	ldi	r20, 0x01	; 1
 a08:	50 e0       	ldi	r21, 0x00	; 0
 a0a:	52 d0       	rcall	.+164    	; 0xab0 <__divmodsi4>
 a0c:	49 01       	movw	r8, r18
 a0e:	5a 01       	movw	r10, r20
 a10:	9b 01       	movw	r18, r22
 a12:	ac 01       	movw	r20, r24
 a14:	a7 ea       	ldi	r26, 0xA7	; 167
 a16:	b1 e4       	ldi	r27, 0x41	; 65
 a18:	67 d0       	rcall	.+206    	; 0xae8 <__muluhisi3>
 a1a:	6b 01       	movw	r12, r22
 a1c:	7c 01       	movw	r14, r24
 a1e:	ac ee       	ldi	r26, 0xEC	; 236
 a20:	b4 ef       	ldi	r27, 0xF4	; 244
 a22:	a5 01       	movw	r20, r10
 a24:	94 01       	movw	r18, r8
 a26:	6c d0       	rcall	.+216    	; 0xb00 <__mulohisi3>
 a28:	dc 01       	movw	r26, r24
 a2a:	cb 01       	movw	r24, r22
 a2c:	8c 0d       	add	r24, r12
 a2e:	9d 1d       	adc	r25, r13
 a30:	ae 1d       	adc	r26, r14
 a32:	bf 1d       	adc	r27, r15
 a34:	b7 ff       	sbrs	r27, 7
 a36:	03 c0       	rjmp	.+6      	; 0xa3e <do_rand+0x6c>
 a38:	01 97       	sbiw	r24, 0x01	; 1
 a3a:	a1 09       	sbc	r26, r1
 a3c:	b0 48       	sbci	r27, 0x80	; 128
 a3e:	88 83       	st	Y, r24
 a40:	99 83       	std	Y+1, r25	; 0x01
 a42:	aa 83       	std	Y+2, r26	; 0x02
 a44:	bb 83       	std	Y+3, r27	; 0x03
 a46:	9f 77       	andi	r25, 0x7F	; 127
 a48:	df 91       	pop	r29
 a4a:	cf 91       	pop	r28
 a4c:	ff 90       	pop	r15
 a4e:	ef 90       	pop	r14
 a50:	df 90       	pop	r13
 a52:	cf 90       	pop	r12
 a54:	bf 90       	pop	r11
 a56:	af 90       	pop	r10
 a58:	9f 90       	pop	r9
 a5a:	8f 90       	pop	r8
 a5c:	08 95       	ret

00000a5e <rand_r>:
 a5e:	b9 cf       	rjmp	.-142    	; 0x9d2 <do_rand>

00000a60 <rand>:
 a60:	80 e0       	ldi	r24, 0x00	; 0
 a62:	91 e0       	ldi	r25, 0x01	; 1
 a64:	b6 cf       	rjmp	.-148    	; 0x9d2 <do_rand>

00000a66 <srand>:
 a66:	a0 e0       	ldi	r26, 0x00	; 0
 a68:	b0 e0       	ldi	r27, 0x00	; 0
 a6a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 a6e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 a72:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 a76:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 a7a:	08 95       	ret

00000a7c <memmove>:
 a7c:	68 17       	cp	r22, r24
 a7e:	79 07       	cpc	r23, r25
 a80:	68 f4       	brcc	.+26     	; 0xa9c <memmove+0x20>
 a82:	fb 01       	movw	r30, r22
 a84:	dc 01       	movw	r26, r24
 a86:	e4 0f       	add	r30, r20
 a88:	f5 1f       	adc	r31, r21
 a8a:	a4 0f       	add	r26, r20
 a8c:	b5 1f       	adc	r27, r21
 a8e:	02 c0       	rjmp	.+4      	; 0xa94 <memmove+0x18>
 a90:	02 90       	ld	r0, -Z
 a92:	0e 92       	st	-X, r0
 a94:	41 50       	subi	r20, 0x01	; 1
 a96:	50 40       	sbci	r21, 0x00	; 0
 a98:	d8 f7       	brcc	.-10     	; 0xa90 <memmove+0x14>
 a9a:	08 95       	ret
 a9c:	00 c0       	rjmp	.+0      	; 0xa9e <memcpy>

00000a9e <memcpy>:
 a9e:	fb 01       	movw	r30, r22
 aa0:	dc 01       	movw	r26, r24
 aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <memcpy+0xa>
 aa4:	01 90       	ld	r0, Z+
 aa6:	0d 92       	st	X+, r0
 aa8:	41 50       	subi	r20, 0x01	; 1
 aaa:	50 40       	sbci	r21, 0x00	; 0
 aac:	d8 f7       	brcc	.-10     	; 0xaa4 <memcpy+0x6>
 aae:	08 95       	ret

00000ab0 <__divmodsi4>:
 ab0:	05 2e       	mov	r0, r21
 ab2:	97 fb       	bst	r25, 7
 ab4:	16 f4       	brtc	.+4      	; 0xaba <__divmodsi4+0xa>
 ab6:	00 94       	com	r0
 ab8:	0f d0       	rcall	.+30     	; 0xad8 <__negsi2>
 aba:	57 fd       	sbrc	r21, 7
 abc:	05 d0       	rcall	.+10     	; 0xac8 <__divmodsi4_neg2>
 abe:	53 df       	rcall	.-346    	; 0x966 <__udivmodsi4>
 ac0:	07 fc       	sbrc	r0, 7
 ac2:	02 d0       	rcall	.+4      	; 0xac8 <__divmodsi4_neg2>
 ac4:	46 f4       	brtc	.+16     	; 0xad6 <__divmodsi4_exit>
 ac6:	08 c0       	rjmp	.+16     	; 0xad8 <__negsi2>

00000ac8 <__divmodsi4_neg2>:
 ac8:	50 95       	com	r21
 aca:	40 95       	com	r20
 acc:	30 95       	com	r19
 ace:	21 95       	neg	r18
 ad0:	3f 4f       	sbci	r19, 0xFF	; 255
 ad2:	4f 4f       	sbci	r20, 0xFF	; 255
 ad4:	5f 4f       	sbci	r21, 0xFF	; 255

00000ad6 <__divmodsi4_exit>:
 ad6:	08 95       	ret

00000ad8 <__negsi2>:
 ad8:	90 95       	com	r25
 ada:	80 95       	com	r24
 adc:	70 95       	com	r23
 ade:	61 95       	neg	r22
 ae0:	7f 4f       	sbci	r23, 0xFF	; 255
 ae2:	8f 4f       	sbci	r24, 0xFF	; 255
 ae4:	9f 4f       	sbci	r25, 0xFF	; 255
 ae6:	08 95       	ret

00000ae8 <__muluhisi3>:
 ae8:	0f d0       	rcall	.+30     	; 0xb08 <__umulhisi3>
 aea:	a5 9f       	mul	r26, r21
 aec:	90 0d       	add	r25, r0
 aee:	b4 9f       	mul	r27, r20
 af0:	90 0d       	add	r25, r0
 af2:	a4 9f       	mul	r26, r20
 af4:	80 0d       	add	r24, r0
 af6:	91 1d       	adc	r25, r1
 af8:	11 24       	eor	r1, r1
 afa:	08 95       	ret

00000afc <__mulshisi3>:
 afc:	b7 ff       	sbrs	r27, 7
 afe:	f4 cf       	rjmp	.-24     	; 0xae8 <__muluhisi3>

00000b00 <__mulohisi3>:
 b00:	f3 df       	rcall	.-26     	; 0xae8 <__muluhisi3>
 b02:	82 1b       	sub	r24, r18
 b04:	93 0b       	sbc	r25, r19
 b06:	08 95       	ret

00000b08 <__umulhisi3>:
 b08:	a2 9f       	mul	r26, r18
 b0a:	b0 01       	movw	r22, r0
 b0c:	b3 9f       	mul	r27, r19
 b0e:	c0 01       	movw	r24, r0
 b10:	a3 9f       	mul	r26, r19
 b12:	70 0d       	add	r23, r0
 b14:	81 1d       	adc	r24, r1
 b16:	11 24       	eor	r1, r1
 b18:	91 1d       	adc	r25, r1
 b1a:	b2 9f       	mul	r27, r18
 b1c:	70 0d       	add	r23, r0
 b1e:	81 1d       	adc	r24, r1
 b20:	11 24       	eor	r1, r1
 b22:	91 1d       	adc	r25, r1
 b24:	08 95       	ret

00000b26 <_exit>:
 b26:	f8 94       	cli

00000b28 <__stop_program>:
 b28:	ff cf       	rjmp	.-2      	; 0xb28 <__stop_program>
