
xzhou016_lab2_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c2  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001ac  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e8  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000103  00000000  00000000  0000042a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000015c  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001d7  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000008a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	return ((x & (0x01 << k)) != 0);
}

int main(void)
{
	DDRB = 0x06; PORTB = 0x00;
  6c:	86 e0       	ldi	r24, 0x06	; 6
  6e:	87 bb       	out	0x17, r24	; 23
  70:	18 ba       	out	0x18, r1	; 24
	DDRD = 0x00; PORTD = 0xFF;
  72:	11 ba       	out	0x11, r1	; 17
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	82 bb       	out	0x12, r24	; 18
		{
			us_setBits = SetBit(us_setBits, 1, 1);
			
		}else
		{
			us_setBits = SetBit(us_setBits, 1, 0);
  78:	70 e0       	ldi	r23, 0x00	; 0
		unsigned char us_setBits = 0x00;
		us_tempWeight = (((us_tempWeight | PIND) << 1 )| (PINB & 0x01)); 
		
		if (us_tempWeight >= 70)
		{
			us_setBits = SetBit(us_setBits, 1, 1);
  7a:	e2 e0       	ldi	r30, 0x02	; 2
	
    while(1)
    {
		unsigned short us_tempWeight = 0;
		unsigned char us_setBits = 0x00;
		us_tempWeight = (((us_tempWeight | PIND) << 1 )| (PINB & 0x01)); 
  7c:	80 b3       	in	r24, 0x10	; 16
  7e:	96 b3       	in	r25, 0x16	; 22
  80:	29 2f       	mov	r18, r25
  82:	21 70       	andi	r18, 0x01	; 1
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	82 2b       	or	r24, r18
  8e:	93 2b       	or	r25, r19
		
		if (us_tempWeight >= 70)
  90:	86 34       	cpi	r24, 0x46	; 70
  92:	91 05       	cpc	r25, r1
  94:	10 f0       	brcs	.+4      	; 0x9a <main+0x2e>
		{
			us_setBits = SetBit(us_setBits, 1, 1);
  96:	6e 2f       	mov	r22, r30
  98:	01 c0       	rjmp	.+2      	; 0x9c <main+0x30>
			
		}else
		{
			us_setBits = SetBit(us_setBits, 1, 0);
  9a:	67 2f       	mov	r22, r23
		}
		
		if ((us_tempWeight > 5) && (us_tempWeight < 70))
  9c:	ac 01       	movw	r20, r24
  9e:	46 50       	subi	r20, 0x06	; 6
  a0:	51 09       	sbc	r21, r1
  a2:	40 34       	cpi	r20, 0x40	; 64
  a4:	51 05       	cpc	r21, r1
  a6:	18 f4       	brcc	.+6      	; 0xae <main+0x42>
 */ 
#include <avr/io.h>

// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  a8:	86 2f       	mov	r24, r22
  aa:	84 60       	ori	r24, 0x04	; 4
  ac:	06 c0       	rjmp	.+12     	; 0xba <main+0x4e>
		}
		
		if ((us_tempWeight > 5) && (us_tempWeight < 70))
		{
			us_setBits = SetBit(us_setBits, 2, 1);
		}else if(us_tempWeight <= 5)
  ae:	06 97       	sbiw	r24, 0x06	; 6
  b0:	18 f0       	brcs	.+6      	; 0xb8 <main+0x4c>
 */ 
#include <avr/io.h>

// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  b2:	86 2f       	mov	r24, r22
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	01 c0       	rjmp	.+2      	; 0xba <main+0x4e>
		if ((us_tempWeight > 5) && (us_tempWeight < 70))
		{
			us_setBits = SetBit(us_setBits, 2, 1);
		}else if(us_tempWeight <= 5)
		{
			us_setBits = us_setBits & 0x01; 
  b8:	87 2f       	mov	r24, r23
		}else 
		{
			us_setBits = SetBit(us_setBits, 2, 0);
		}
		PORTB = us_setBits;
  ba:	88 bb       	out	0x18, r24	; 24
    }
  bc:	df cf       	rjmp	.-66     	; 0x7c <main+0x10>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>
