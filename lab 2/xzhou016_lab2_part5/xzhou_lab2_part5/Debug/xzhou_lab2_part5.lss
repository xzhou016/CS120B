
xzhou_lab2_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000bc  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001db  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e8  00000000  00000000  0000036b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000102  00000000  00000000  00000453  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000156  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001ad  00000000  00000000  000006f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000089f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	return ((x & (0x01 << k)) != 0);
}

int main(void)
{
	DDRB = 0x06; PORTB = 0x00;
  6c:	86 e0       	ldi	r24, 0x06	; 6
  6e:	87 bb       	out	0x17, r24	; 23
  70:	18 ba       	out	0x18, r1	; 24
	DDRD = 0x00; PORTD = 0xFF;
  72:	11 ba       	out	0x11, r1	; 17
  74:	8f ef       	ldi	r24, 0xFF	; 255
  76:	82 bb       	out	0x12, r24	; 18
	
    while(1)
    {
		unsigned short us_tempWeight = 0;
		unsigned char us_setBits = 0x00;
		us_tempWeight = (((us_tempWeight | PIND) << 1 )| (PINB & 0x01)); 
  78:	80 b3       	in	r24, 0x10	; 16
  7a:	96 b3       	in	r25, 0x16	; 22
  7c:	29 2f       	mov	r18, r25
  7e:	21 70       	andi	r18, 0x01	; 1
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	82 2b       	or	r24, r18
  8a:	93 2b       	or	r25, r19
		
		if (us_tempWeight >= 70)
  8c:	86 34       	cpi	r24, 0x46	; 70
  8e:	91 05       	cpc	r25, r1
  90:	18 f0       	brcs	.+6      	; 0x98 <main+0x2c>
		{
			us_setBits = SetBit(PINB, 1, 1);
  92:	66 b3       	in	r22, 0x16	; 22
 */ 
#include <avr/io.h>

// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  94:	62 60       	ori	r22, 0x02	; 2
  96:	02 c0       	rjmp	.+4      	; 0x9c <main+0x30>
		if (us_tempWeight >= 70)
		{
			us_setBits = SetBit(PINB, 1, 1);
		}else
		{
			us_setBits = SetBit(PINB, 1, 0);
  98:	66 b3       	in	r22, 0x16	; 22
 */ 
#include <avr/io.h>

// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  9a:	6d 7f       	andi	r22, 0xFD	; 253
		}else
		{
			us_setBits = SetBit(PINB, 1, 0);
		}
		
		if ((us_tempWeight > 5) && (us_tempWeight < 70))
  9c:	ac 01       	movw	r20, r24
  9e:	46 50       	subi	r20, 0x06	; 6
  a0:	51 09       	sbc	r21, r1
  a2:	40 34       	cpi	r20, 0x40	; 64
  a4:	51 05       	cpc	r21, r1
  a6:	18 f4       	brcc	.+6      	; 0xae <main+0x42>
		{
			us_setBits = SetBit(PINB, 2, 1);
  a8:	66 b3       	in	r22, 0x16	; 22
 */ 
#include <avr/io.h>

// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  aa:	64 60       	ori	r22, 0x04	; 4
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <main+0x48>
		}
		
		if ((us_tempWeight > 5) && (us_tempWeight < 70))
		{
			us_setBits = SetBit(PINB, 2, 1);
		}else if(us_tempWeight <= 5)
  ae:	06 97       	sbiw	r24, 0x06	; 6
  b0:	08 f4       	brcc	.+2      	; 0xb4 <main+0x48>
		{
			us_setBits = us_setBits & 0x01; 
  b2:	61 70       	andi	r22, 0x01	; 1
		}
		
		PORTB = us_setBits;
  b4:	68 bb       	out	0x18, r22	; 24
    }
  b6:	e0 cf       	rjmp	.-64     	; 0x78 <main+0xc>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
