
xzhou016_lab2_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c6  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000018c  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000112  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000112  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014b  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000015f  00000000  00000000  000006db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  0000083a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	return ((x & (0x01 << k)) != 0);
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
  6c:	1a ba       	out	0x1a, r1	; 26
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	8b bb       	out	0x1b, r24	; 27
	DDRB = 0x00; PORTB = 0xFF;
  72:	17 ba       	out	0x17, r1	; 23
  74:	88 bb       	out	0x18, r24	; 24

	DDRC = 0xFF; PORTC = 0x00;
  76:	84 bb       	out	0x14, r24	; 20
  78:	15 ba       	out	0x15, r1	; 21
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}

int main(void)
{
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	f0 e0       	ldi	r31, 0x00	; 0

	
	
	while(1)
	{
		unsigned char tempBit = 0x00;
  7e:	e0 e0       	ldi	r30, 0x00	; 0
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
}

int main(void)
{
  80:	8a 2f       	mov	r24, r26
  82:	9f 2f       	mov	r25, r31

	
	
	while(1)
	{
		unsigned char tempBit = 0x00;
  84:	6e 2f       	mov	r22, r30
		for (unsigned char i = 0x00 ; i < 0x08 ; i++)
		{
			tempBit = tempBit +  GetBit(PINA , i) + GetBit(PINB, i);
  86:	49 b3       	in	r20, 0x19	; 25
  88:	26 b3       	in	r18, 0x16	; 22
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
}
unsigned char GetBit(unsigned char x, unsigned char k) {
	return ((x & (0x01 << k)) != 0);
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	08 2e       	mov	r0, r24
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x28>
  90:	35 95       	asr	r19
  92:	27 95       	ror	r18
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <main+0x24>
  98:	72 2f       	mov	r23, r18
  9a:	71 70       	andi	r23, 0x01	; 1
  9c:	50 e0       	ldi	r21, 0x00	; 0
  9e:	9a 01       	movw	r18, r20
  a0:	08 2e       	mov	r0, r24
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <main+0x3c>
  a4:	35 95       	asr	r19
  a6:	27 95       	ror	r18
  a8:	0a 94       	dec	r0
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <main+0x38>
  ac:	32 2f       	mov	r19, r18
  ae:	31 70       	andi	r19, 0x01	; 1
	while(1)
	{
		unsigned char tempBit = 0x00;
		for (unsigned char i = 0x00 ; i < 0x08 ; i++)
		{
			tempBit = tempBit +  GetBit(PINA , i) + GetBit(PINB, i);
  b0:	27 2f       	mov	r18, r23
  b2:	23 0f       	add	r18, r19
  b4:	62 0f       	add	r22, r18
  b6:	01 96       	adiw	r24, 0x01	; 1
	
	
	while(1)
	{
		unsigned char tempBit = 0x00;
		for (unsigned char i = 0x00 ; i < 0x08 ; i++)
  b8:	88 30       	cpi	r24, 0x08	; 8
  ba:	91 05       	cpc	r25, r1
  bc:	21 f7       	brne	.-56     	; 0x86 <main+0x1a>
		{
			tempBit = tempBit +  GetBit(PINA , i) + GetBit(PINB, i);
		}
		
		PORTC = tempBit;
  be:	65 bb       	out	0x15, r22	; 21
	}
  c0:	df cf       	rjmp	.-66     	; 0x80 <main+0x14>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
