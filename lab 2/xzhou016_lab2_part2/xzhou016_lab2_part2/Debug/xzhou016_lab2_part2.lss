
xzhou016_lab2_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000fa  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000011e  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000ca  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000132  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000044  00000000  00000000  000004e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000133  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b6  00000000  00000000  0000065f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00000715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	return ((x & (0x01 << k)) != 0);
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
  6c:	1a ba       	out	0x1a, r1	; 26
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	8b bb       	out	0x1b, r24	; 27

	DDRC = 0xFF; PORTC = 0x00;
  72:	84 bb       	out	0x14, r24	; 20
  74:	15 ba       	out	0x15, r1	; 21

	
	
	while(1)
	{
		if ((PINA > 0x0C) && (PINA <= 0x0F))
  76:	89 b3       	in	r24, 0x19	; 25
  78:	8d 30       	cpi	r24, 0x0D	; 13
  7a:	28 f0       	brcs	.+10     	; 0x86 <main+0x1a>
  7c:	89 b3       	in	r24, 0x19	; 25
  7e:	80 31       	cpi	r24, 0x10	; 16
  80:	10 f4       	brcc	.+4      	; 0x86 <main+0x1a>
		{
			PORTC = SetBit(PORTC, 0, 1);	
  82:	a8 9a       	sbi	0x15, 0	; 21
  84:	01 c0       	rjmp	.+2      	; 0x88 <main+0x1c>
		}else
		{
			PORTC = SetBit(PORTC, 0, 0);
  86:	a8 98       	cbi	0x15, 0	; 21
		}
		
		if ((PINA > 0x09) && (PINA <= 0x0F))
  88:	89 b3       	in	r24, 0x19	; 25
  8a:	8a 30       	cpi	r24, 0x0A	; 10
  8c:	28 f0       	brcs	.+10     	; 0x98 <main+0x2c>
  8e:	89 b3       	in	r24, 0x19	; 25
  90:	80 31       	cpi	r24, 0x10	; 16
  92:	10 f4       	brcc	.+4      	; 0x98 <main+0x2c>
		{
			PORTC = SetBit(PORTC, 1, 1);
  94:	a9 9a       	sbi	0x15, 1	; 21
  96:	01 c0       	rjmp	.+2      	; 0x9a <main+0x2e>
							
		}else
		{
			PORTC = SetBit(PORTC, 1, 0);
  98:	a9 98       	cbi	0x15, 1	; 21
		}
		
		if ((PINA > 0x06) && (PINA <= 0x0F))
  9a:	89 b3       	in	r24, 0x19	; 25
  9c:	87 30       	cpi	r24, 0x07	; 7
  9e:	28 f0       	brcs	.+10     	; 0xaa <main+0x3e>
  a0:	89 b3       	in	r24, 0x19	; 25
  a2:	80 31       	cpi	r24, 0x10	; 16
  a4:	10 f4       	brcc	.+4      	; 0xaa <main+0x3e>
		{
			PORTC = SetBit(PORTC, 2, 1);
  a6:	aa 9a       	sbi	0x15, 2	; 21
  a8:	01 c0       	rjmp	.+2      	; 0xac <main+0x40>
						
		}else
		{
			PORTC = SetBit(PORTC, 2, 0);
  aa:	aa 98       	cbi	0x15, 2	; 21
		}
		
		if ((PINA > 0x04) && (PINA <= 0x0F))
  ac:	89 b3       	in	r24, 0x19	; 25
  ae:	85 30       	cpi	r24, 0x05	; 5
  b0:	28 f0       	brcs	.+10     	; 0xbc <main+0x50>
  b2:	89 b3       	in	r24, 0x19	; 25
  b4:	80 31       	cpi	r24, 0x10	; 16
  b6:	10 f4       	brcc	.+4      	; 0xbc <main+0x50>
		{
			PORTC = SetBit(PORTC, 3, 1);
  b8:	ab 9a       	sbi	0x15, 3	; 21
  ba:	01 c0       	rjmp	.+2      	; 0xbe <main+0x52>
					
		}else
		{
			PORTC = SetBit(PORTC, 3, 0);
  bc:	ab 98       	cbi	0x15, 3	; 21
		}
		
		if ((PINA > 0x02) && (PINA <= 0x0F))
  be:	89 b3       	in	r24, 0x19	; 25
  c0:	83 30       	cpi	r24, 0x03	; 3
  c2:	28 f0       	brcs	.+10     	; 0xce <main+0x62>
  c4:	89 b3       	in	r24, 0x19	; 25
  c6:	80 31       	cpi	r24, 0x10	; 16
  c8:	10 f4       	brcc	.+4      	; 0xce <main+0x62>
		{
			PORTC = SetBit(PORTC, 4, 1);
  ca:	ac 9a       	sbi	0x15, 4	; 21
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <main+0x64>
		}else
		{
			PORTC = SetBit(PORTC, 4, 0);
  ce:	ac 98       	cbi	0x15, 4	; 21
		}
		
		if ((PINA > 0x00) && (PINA <= 0x0F))
  d0:	89 b3       	in	r24, 0x19	; 25
  d2:	88 23       	and	r24, r24
  d4:	29 f0       	breq	.+10     	; 0xe0 <main+0x74>
  d6:	89 b3       	in	r24, 0x19	; 25
  d8:	80 31       	cpi	r24, 0x10	; 16
  da:	10 f4       	brcc	.+4      	; 0xe0 <main+0x74>
		{
			PORTC = SetBit(PORTC, 5, 1);
  dc:	ad 9a       	sbi	0x15, 5	; 21
  de:	01 c0       	rjmp	.+2      	; 0xe2 <main+0x76>
		}else
		{
			PORTC = SetBit(PORTC, 5, 0);
  e0:	ad 98       	cbi	0x15, 5	; 21
		}
		
		if ((PINA > 0x00) && (PINA <= 0x04))
  e2:	89 b3       	in	r24, 0x19	; 25
  e4:	88 23       	and	r24, r24
  e6:	29 f0       	breq	.+10     	; 0xf2 <main+0x86>
  e8:	89 b3       	in	r24, 0x19	; 25
  ea:	85 30       	cpi	r24, 0x05	; 5
  ec:	10 f4       	brcc	.+4      	; 0xf2 <main+0x86>
		{
			PORTC = SetBit(PORTC, 6, 1);
  ee:	ae 9a       	sbi	0x15, 6	; 21
  f0:	c2 cf       	rjmp	.-124    	; 0x76 <main+0xa>
		}
		else
		{
			PORTC = SetBit(PORTC, 6, 0);	
  f2:	ae 98       	cbi	0x15, 6	; 21
  f4:	c0 cf       	rjmp	.-128    	; 0x76 <main+0xa>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
