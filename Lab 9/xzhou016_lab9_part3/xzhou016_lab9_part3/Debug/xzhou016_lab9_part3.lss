
xzhou016_lab9_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000060c  000006a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000060c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800104  00800104  000006a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000258  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000112  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048b  00000000  00000000  00000ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00000f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000216  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002a8  00000000  00000000  000012d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000157a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	89 c0       	rjmp	.+274    	; 0x148 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e0       	ldi	r30, 0x0C	; 12
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	51 d2       	rcall	.+1186   	; 0x566 <main>
  c4:	a1 c2       	rjmp	.+1346   	; 0x608 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
}

void TimerOff()
{
	TCCR1B = 0x00;
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	81 e8       	ldi	r24, 0x81	; 129
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	2b e0       	ldi	r18, 0x0B	; 11
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
  da:	88 e8       	ldi	r24, 0x88	; 136
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	2d e7       	ldi	r18, 0x7D	; 125
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	31 83       	std	Z+1, r19	; 0x01
  e6:	20 83       	st	Z, r18
  e8:	8f e6       	ldi	r24, 0x6F	; 111
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	22 e0       	ldi	r18, 0x02	; 2
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
  f2:	84 e8       	ldi	r24, 0x84	; 132
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	fc 01       	movw	r30, r24
  f8:	11 82       	std	Z+1, r1	; 0x01
  fa:	10 82       	st	Z, r1
  fc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 100:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 104:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 108:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 10c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 110:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 114:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 118:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
 11c:	8f e5       	ldi	r24, 0x5F	; 95
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	2f e5       	ldi	r18, 0x5F	; 95
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	20 68       	ori	r18, 0x80	; 128
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <TimerISR>:

void TimerISR()
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 158:	0f 92       	push	r0
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
	_avr_timer_cntcurr--;
 17a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 17e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 182:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 186:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	a1 09       	sbc	r26, r1
 18e:	b1 09       	sbc	r27, r1
 190:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 194:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 198:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 19c:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0)
 1a0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_avr_timer_cntcurr>
 1a4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_avr_timer_cntcurr+0x1>
 1a8:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <_avr_timer_cntcurr+0x2>
 1ac:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <_avr_timer_cntcurr+0x3>
 1b0:	89 2b       	or	r24, r25
 1b2:	8a 2b       	or	r24, r26
 1b4:	8b 2b       	or	r24, r27
 1b6:	89 f4       	brne	.+34     	; 0x1da <__vector_13+0x92>
	{
		TimerISR();
 1b8:	bd df       	rcall	.-134    	; 0x134 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
 1ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1c2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1c6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1ca:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 1ce:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 1d2:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 1d6:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
	}
}
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 1fc:	0f 90       	pop	r0
 1fe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

00000208 <TimerSet>:

void TimerSet(unsigned long M)
{
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	00 d0       	rcall	.+0      	; 0x20e <TimerSet+0x6>
 20e:	00 d0       	rcall	.+0      	; 0x210 <TimerSet+0x8>
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	69 83       	std	Y+1, r22	; 0x01
 216:	7a 83       	std	Y+2, r23	; 0x02
 218:	8b 83       	std	Y+3, r24	; 0x03
 21a:	9c 83       	std	Y+4, r25	; 0x04
	_avr_timer_M = M;
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	9a 81       	ldd	r25, Y+2	; 0x02
 220:	ab 81       	ldd	r26, Y+3	; 0x03
 222:	bc 81       	ldd	r27, Y+4	; 0x04
 224:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 228:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 22c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 230:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 234:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 238:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 23c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 240:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 244:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <_avr_timer_cntcurr>
 248:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <_avr_timer_cntcurr+0x1>
 24c:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <_avr_timer_cntcurr+0x2>
 250:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <_avr_timer_cntcurr+0x3>
}
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <Tick1>:

void Tick1()
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
	setPinA = ~PINA & 0x03;
 26a:	80 e2       	ldi	r24, 0x20	; 32
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	fc 01       	movw	r30, r24
 270:	80 81       	ld	r24, Z
 272:	80 95       	com	r24
 274:	83 70       	andi	r24, 0x03	; 3
 276:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <setPinA>
	switch(sm1)
 27a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sm1>
 27e:	88 2f       	mov	r24, r24
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	91 05       	cpc	r25, r1
 286:	09 f4       	brne	.+2      	; 0x28a <Tick1+0x28>
 288:	5d c0       	rjmp	.+186    	; 0x344 <Tick1+0xe2>
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	91 05       	cpc	r25, r1
 28e:	1c f4       	brge	.+6      	; 0x296 <Tick1+0x34>
 290:	89 2b       	or	r24, r25
 292:	49 f0       	breq	.+18     	; 0x2a6 <Tick1+0x44>
 294:	be c0       	rjmp	.+380    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 296:	82 30       	cpi	r24, 0x02	; 2
 298:	91 05       	cpc	r25, r1
 29a:	09 f4       	brne	.+2      	; 0x29e <Tick1+0x3c>
 29c:	b2 c0       	rjmp	.+356    	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
 29e:	03 97       	sbiw	r24, 0x03	; 3
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <Tick1+0x42>
 2a2:	b3 c0       	rjmp	.+358    	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
 2a4:	b6 c0       	rjmp	.+364    	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
	{
		case sm1_start:
			sm1 = sm1_wait;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sm1>
			if (((setPinA & 0x01) == 0x01 ) && ((setPinA & 0x02) == 0x00 ) && (total < 0x09)) 
 2ac:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 2b0:	88 2f       	mov	r24, r24
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	81 70       	andi	r24, 0x01	; 1
 2b6:	99 27       	eor	r25, r25
 2b8:	89 2b       	or	r24, r25
 2ba:	81 f0       	breq	.+32     	; 0x2dc <Tick1+0x7a>
 2bc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 2c0:	88 2f       	mov	r24, r24
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	82 70       	andi	r24, 0x02	; 2
 2c6:	99 27       	eor	r25, r25
 2c8:	89 2b       	or	r24, r25
 2ca:	41 f4       	brne	.+16     	; 0x2dc <Tick1+0x7a>
 2cc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <total>
 2d0:	89 30       	cpi	r24, 0x09	; 9
 2d2:	20 f4       	brcc	.+8      	; 0x2dc <Tick1+0x7a>
			{
				sm1 = sm1_inc;
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sm1>
 2da:	33 c0       	rjmp	.+102    	; 0x342 <Tick1+0xe0>
			}
			else if (((setPinA & 0x02) == 0x02 ) && ((setPinA & 0x01) == 0x00 && (total > 0x00) )) 
 2dc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 2e0:	88 2f       	mov	r24, r24
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	82 70       	andi	r24, 0x02	; 2
 2e6:	99 27       	eor	r25, r25
 2e8:	89 2b       	or	r24, r25
 2ea:	81 f0       	breq	.+32     	; 0x30c <Tick1+0xaa>
 2ec:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 2f0:	88 2f       	mov	r24, r24
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	81 70       	andi	r24, 0x01	; 1
 2f6:	99 27       	eor	r25, r25
 2f8:	89 2b       	or	r24, r25
 2fa:	41 f4       	brne	.+16     	; 0x30c <Tick1+0xaa>
 2fc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <total>
 300:	88 23       	and	r24, r24
 302:	21 f0       	breq	.+8      	; 0x30c <Tick1+0xaa>
			{
				sm1 = sm1_dec;
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sm1>
 30a:	1b c0       	rjmp	.+54     	; 0x342 <Tick1+0xe0>
			}
			else if (((setPinA & 0x01) == 0x00 ) && ((setPinA & 0x02) == 0x00 )) 
 30c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 310:	88 2f       	mov	r24, r24
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	81 70       	andi	r24, 0x01	; 1
 316:	99 27       	eor	r25, r25
 318:	89 2b       	or	r24, r25
 31a:	61 f4       	brne	.+24     	; 0x334 <Tick1+0xd2>
 31c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 320:	88 2f       	mov	r24, r24
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	82 70       	andi	r24, 0x02	; 2
 326:	99 27       	eor	r25, r25
 328:	89 2b       	or	r24, r25
 32a:	21 f4       	brne	.+8      	; 0x334 <Tick1+0xd2>
			{
				sm1 = sm1_wait;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sm1>
 332:	07 c0       	rjmp	.+14     	; 0x342 <Tick1+0xe0>
			}
			else if (setPinA == 0x03)
 334:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 338:	83 30       	cpi	r24, 0x03	; 3
 33a:	19 f4       	brne	.+6      	; 0x342 <Tick1+0xe0>
			{
				sm1 = sm1_start;
 33c:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <sm1>
			}
		break;
 340:	6b c0       	rjmp	.+214    	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 342:	6a c0       	rjmp	.+212    	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
		
		case sm1_wait:
			if (((setPinA & 0x01) == 0x01 ) && ((setPinA & 0x02) == 0x02 )) 
 344:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 348:	88 2f       	mov	r24, r24
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	81 70       	andi	r24, 0x01	; 1
 34e:	99 27       	eor	r25, r25
 350:	89 2b       	or	r24, r25
 352:	59 f0       	breq	.+22     	; 0x36a <Tick1+0x108>
 354:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 358:	88 2f       	mov	r24, r24
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	82 70       	andi	r24, 0x02	; 2
 35e:	99 27       	eor	r25, r25
 360:	89 2b       	or	r24, r25
 362:	19 f0       	breq	.+6      	; 0x36a <Tick1+0x108>
			{
				sm1 = sm1_start;
 364:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <sm1>
 368:	4b c0       	rjmp	.+150    	; 0x400 <__FUSE_REGION_LENGTH__>
			}
			else if (((setPinA & 0x01) == 0x01 ) && ((setPinA & 0x02) == 0x00 ) && (total < 0x09)) 
 36a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 36e:	88 2f       	mov	r24, r24
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	81 70       	andi	r24, 0x01	; 1
 374:	99 27       	eor	r25, r25
 376:	89 2b       	or	r24, r25
 378:	81 f0       	breq	.+32     	; 0x39a <Tick1+0x138>
 37a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 37e:	88 2f       	mov	r24, r24
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	82 70       	andi	r24, 0x02	; 2
 384:	99 27       	eor	r25, r25
 386:	89 2b       	or	r24, r25
 388:	41 f4       	brne	.+16     	; 0x39a <Tick1+0x138>
 38a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <total>
 38e:	89 30       	cpi	r24, 0x09	; 9
 390:	20 f4       	brcc	.+8      	; 0x39a <Tick1+0x138>
			{
				sm1 = sm1_inc;
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sm1>
 398:	33 c0       	rjmp	.+102    	; 0x400 <__FUSE_REGION_LENGTH__>
			}
			else if (((setPinA & 0x02) == 0x02 ) && ((setPinA & 0x01) == 0x00 && (total > 0x00) )) 
 39a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 39e:	88 2f       	mov	r24, r24
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	82 70       	andi	r24, 0x02	; 2
 3a4:	99 27       	eor	r25, r25
 3a6:	89 2b       	or	r24, r25
 3a8:	81 f0       	breq	.+32     	; 0x3ca <Tick1+0x168>
 3aa:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 3ae:	88 2f       	mov	r24, r24
 3b0:	90 e0       	ldi	r25, 0x00	; 0
 3b2:	81 70       	andi	r24, 0x01	; 1
 3b4:	99 27       	eor	r25, r25
 3b6:	89 2b       	or	r24, r25
 3b8:	41 f4       	brne	.+16     	; 0x3ca <Tick1+0x168>
 3ba:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <total>
 3be:	88 23       	and	r24, r24
 3c0:	21 f0       	breq	.+8      	; 0x3ca <Tick1+0x168>
			{
				sm1 = sm1_dec;
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sm1>
 3c8:	1b c0       	rjmp	.+54     	; 0x400 <__FUSE_REGION_LENGTH__>
			}
			else if (((setPinA & 0x01) == 0x00 ) && ((setPinA & 0x02) == 0x00 )) 
 3ca:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 3ce:	88 2f       	mov	r24, r24
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	81 70       	andi	r24, 0x01	; 1
 3d4:	99 27       	eor	r25, r25
 3d6:	89 2b       	or	r24, r25
 3d8:	61 f4       	brne	.+24     	; 0x3f2 <Tick1+0x190>
 3da:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 3de:	88 2f       	mov	r24, r24
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	82 70       	andi	r24, 0x02	; 2
 3e4:	99 27       	eor	r25, r25
 3e6:	89 2b       	or	r24, r25
 3e8:	21 f4       	brne	.+8      	; 0x3f2 <Tick1+0x190>
			{
				sm1 = sm1_wait;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sm1>
 3f0:	07 c0       	rjmp	.+14     	; 0x400 <__FUSE_REGION_LENGTH__>
			}
			else if (setPinA == 0x03)
 3f2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 3f6:	83 30       	cpi	r24, 0x03	; 3
 3f8:	19 f4       	brne	.+6      	; 0x400 <__FUSE_REGION_LENGTH__>
			{
				sm1 = sm1_start;
 3fa:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <sm1>
			}
		break;
 3fe:	0c c0       	rjmp	.+24     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 400:	0b c0       	rjmp	.+22     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
		
		case sm1_inc:
			sm1 = sm1_wait;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sm1>
		break;
 408:	07 c0       	rjmp	.+14     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
		
		case sm1_dec:
			sm1 = sm1_wait;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <sm1>
		break;
 410:	03 c0       	rjmp	.+6      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
		
		default:
			sm1 = sm1_start;
 412:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <sm1>
		break;
 416:	00 00       	nop
	}
	
	switch(sm1)
 418:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <sm1>
 41c:	88 2f       	mov	r24, r24
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	81 30       	cpi	r24, 0x01	; 1
 422:	91 05       	cpc	r25, r1
 424:	d9 f0       	breq	.+54     	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 426:	82 30       	cpi	r24, 0x02	; 2
 428:	91 05       	cpc	r25, r1
 42a:	1c f4       	brge	.+6      	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
 42c:	89 2b       	or	r24, r25
 42e:	39 f0       	breq	.+14     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
		case sm1_dec:
			total--;
		break;
		
		default:
		break;
 430:	16 c0       	rjmp	.+44     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
		default:
			sm1 = sm1_start;
		break;
	}
	
	switch(sm1)
 432:	82 30       	cpi	r24, 0x02	; 2
 434:	91 05       	cpc	r25, r1
 436:	31 f0       	breq	.+12     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
 438:	03 97       	sbiw	r24, 0x03	; 3
 43a:	51 f0       	breq	.+20     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
		case sm1_dec:
			total--;
		break;
		
		default:
		break;
 43c:	10 c0       	rjmp	.+32     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
	}
	
	switch(sm1)
	{
		case sm1_start:
			total = 0;
 43e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <total>
		break;
 442:	0d c0       	rjmp	.+26     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
		
		case sm1_wait:
		break;
		
		case sm1_inc:
			total++;
 444:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <total>
 448:	8f 5f       	subi	r24, 0xFF	; 255
 44a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <total>
		break;
 44e:	07 c0       	rjmp	.+14     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
		
		case sm1_dec:
			total--;
 450:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <total>
 454:	81 50       	subi	r24, 0x01	; 1
 456:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <total>
		break;
 45a:	01 c0       	rjmp	.+2      	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
		case sm1_start:
			total = 0;
		break;
		
		case sm1_wait:
		break;
 45c:	00 00       	nop
		break;
		
		default:
		break;
	}
}
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <Tick2>:

void Tick2()
{
 464:	cf 93       	push	r28
 466:	df 93       	push	r29
 468:	1f 92       	push	r1
 46a:	cd b7       	in	r28, 0x3d	; 61
 46c:	de b7       	in	r29, 0x3e	; 62
	unsigned char readPINA = ~PINA & 0x03;
 46e:	80 e2       	ldi	r24, 0x20	; 32
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	fc 01       	movw	r30, r24
 474:	80 81       	ld	r24, Z
 476:	80 95       	com	r24
 478:	83 70       	andi	r24, 0x03	; 3
 47a:	89 83       	std	Y+1, r24	; 0x01
				  setPinA  = ~PINA & 0x03; 
 47c:	80 e2       	ldi	r24, 0x20	; 32
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	fc 01       	movw	r30, r24
 482:	80 81       	ld	r24, Z
 484:	80 95       	com	r24
 486:	83 70       	andi	r24, 0x03	; 3
 488:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <setPinA>
	
	switch(sm2)
 48c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <sm2>
 490:	88 2f       	mov	r24, r24
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	81 30       	cpi	r24, 0x01	; 1
 496:	91 05       	cpc	r25, r1
 498:	49 f0       	breq	.+18     	; 0x4ac <Tick2+0x48>
 49a:	82 30       	cpi	r24, 0x02	; 2
 49c:	91 05       	cpc	r25, r1
 49e:	b9 f0       	breq	.+46     	; 0x4ce <Tick2+0x6a>
 4a0:	89 2b       	or	r24, r25
 4a2:	29 f5       	brne	.+74     	; 0x4ee <Tick2+0x8a>
	{
		case sm2_start:
			sm2 = sm2_wait;
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sm2>
		break;
 4aa:	24 c0       	rjmp	.+72     	; 0x4f4 <Tick2+0x90>
		
		case sm2_wait:
			if(readPINA == 0x01 || readPINA == 0x02 || readPINA == 0x03)
 4ac:	89 81       	ldd	r24, Y+1	; 0x01
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	31 f0       	breq	.+12     	; 0x4be <Tick2+0x5a>
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	19 f0       	breq	.+6      	; 0x4be <Tick2+0x5a>
 4b8:	89 81       	ldd	r24, Y+1	; 0x01
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	21 f4       	brne	.+8      	; 0x4c6 <Tick2+0x62>
			sm2 = sm2_hold;
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sm2>
			else
			sm2 = sm2_wait;
		break;
 4c4:	17 c0       	rjmp	.+46     	; 0x4f4 <Tick2+0x90>
		
		case sm2_wait:
			if(readPINA == 0x01 || readPINA == 0x02 || readPINA == 0x03)
			sm2 = sm2_hold;
			else
			sm2 = sm2_wait;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sm2>
		break;
 4cc:	13 c0       	rjmp	.+38     	; 0x4f4 <Tick2+0x90>
		
		case sm2_hold:
			if(readPINA == 0x01 || readPINA == 0x02 || readPINA == 0x03)
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	31 f0       	breq	.+12     	; 0x4e0 <Tick2+0x7c>
 4d4:	89 81       	ldd	r24, Y+1	; 0x01
 4d6:	82 30       	cpi	r24, 0x02	; 2
 4d8:	19 f0       	breq	.+6      	; 0x4e0 <Tick2+0x7c>
 4da:	89 81       	ldd	r24, Y+1	; 0x01
 4dc:	83 30       	cpi	r24, 0x03	; 3
 4de:	21 f4       	brne	.+8      	; 0x4e8 <Tick2+0x84>
				sm2 = sm2_hold;
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sm2>
			else
				sm2 = sm2_start;
		break;
 4e6:	06 c0       	rjmp	.+12     	; 0x4f4 <Tick2+0x90>
		
		case sm2_hold:
			if(readPINA == 0x01 || readPINA == 0x02 || readPINA == 0x03)
				sm2 = sm2_hold;
			else
				sm2 = sm2_start;
 4e8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <sm2>
		break;
 4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <Tick2+0x90>
		
		default:
		sm2 = sm2_start;
 4ee:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <sm2>
		break;
 4f2:	00 00       	nop
	}
	
	switch(sm2)
 4f4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <sm2>
 4f8:	88 2f       	mov	r24, r24
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	91 05       	cpc	r25, r1
 500:	69 f1       	breq	.+90     	; 0x55c <Tick2+0xf8>
 502:	82 30       	cpi	r24, 0x02	; 2
 504:	91 05       	cpc	r25, r1
 506:	31 f0       	breq	.+12     	; 0x514 <Tick2+0xb0>
 508:	89 2b       	or	r24, r25
 50a:	09 f0       	breq	.+2      	; 0x50e <Tick2+0xaa>
			}
			i1++;
		break;
		
		default:
		break;
 50c:	28 c0       	rjmp	.+80     	; 0x55e <Tick2+0xfa>
	}
	
	switch(sm2)
	{
		case sm2_start:
			i1 = 0;
 50e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <i1>
		break;
 512:	25 c0       	rjmp	.+74     	; 0x55e <Tick2+0xfa>
		case sm2_wait:

		break;
		
		case sm2_hold:
			if (i1 < 2)
 514:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <i1>
 518:	82 30       	cpi	r24, 0x02	; 2
 51a:	20 f4       	brcc	.+8      	; 0x524 <Tick2+0xc0>
			{
				counter = 0x01;
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <counter>
 522:	16 c0       	rjmp	.+44     	; 0x550 <Tick2+0xec>
			}else if (i1 >= 2 && i1 <= 30)
 524:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <i1>
 528:	82 30       	cpi	r24, 0x02	; 2
 52a:	40 f0       	brcs	.+16     	; 0x53c <Tick2+0xd8>
 52c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <i1>
 530:	8f 31       	cpi	r24, 0x1F	; 31
 532:	20 f4       	brcc	.+8      	; 0x53c <Tick2+0xd8>
			{
				counter = 0x0A;
 534:	8a e0       	ldi	r24, 0x0A	; 10
 536:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <counter>
 53a:	0a c0       	rjmp	.+20     	; 0x550 <Tick2+0xec>
			}else if (i1 > 30)
 53c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <i1>
 540:	8f 31       	cpi	r24, 0x1F	; 31
 542:	30 f0       	brcs	.+12     	; 0x550 <Tick2+0xec>
			{
				counter = 0x04;
 544:	84 e0       	ldi	r24, 0x04	; 4
 546:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <counter>
				i1 = 30;
 54a:	8e e1       	ldi	r24, 0x1E	; 30
 54c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <i1>
			}
			i1++;
 550:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <i1>
 554:	8f 5f       	subi	r24, 0xFF	; 255
 556:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <i1>
		break;
 55a:	01 c0       	rjmp	.+2      	; 0x55e <Tick2+0xfa>
			i1 = 0;
		break;
		
		case sm2_wait:

		break;
 55c:	00 00       	nop
		break;
		
		default:
		break;
	}
}
 55e:	0f 90       	pop	r0
 560:	df 91       	pop	r29
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <main>:

int main(void)
{
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 56e:	81 e2       	ldi	r24, 0x21	; 33
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	fc 01       	movw	r30, r24
 574:	10 82       	st	Z, r1
 576:	82 e2       	ldi	r24, 0x22	; 34
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	2f ef       	ldi	r18, 0xFF	; 255
 57c:	fc 01       	movw	r30, r24
 57e:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00;
 580:	84 e2       	ldi	r24, 0x24	; 36
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	2f ef       	ldi	r18, 0xFF	; 255
 586:	fc 01       	movw	r30, r24
 588:	20 83       	st	Z, r18
 58a:	85 e2       	ldi	r24, 0x25	; 37
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	fc 01       	movw	r30, r24
 590:	10 82       	st	Z, r1
	
	TimerSet(100);
 592:	64 e6       	ldi	r22, 0x64	; 100
 594:	70 e0       	ldi	r23, 0x00	; 0
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	36 de       	rcall	.-916    	; 0x208 <TimerSet>
	TimerOn();
 59c:	95 dd       	rcall	.-1238   	; 0xc8 <TimerOn>
	
	sm1 = sm1_start;
 59e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <sm1>
	sm2 = sm2_start;
 5a2:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <sm2>
	
    while (1) 
    {
		Tick2(); //call second sm first to set timer for inc & dec
 5a6:	5e df       	rcall	.-324    	; 0x464 <Tick2>
		
		//will only call when buttons are pressed and loop == counter
		if (i2 >= counter && (setPinA == 0x01 || setPinA == 0x02 || setPinA == 0x03)) 
 5a8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <i2>
 5ac:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <counter>
 5b0:	98 17       	cp	r25, r24
 5b2:	88 f0       	brcs	.+34     	; 0x5d6 <main+0x70>
 5b4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	41 f0       	breq	.+16     	; 0x5cc <main+0x66>
 5bc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	21 f0       	breq	.+8      	; 0x5cc <main+0x66>
 5c4:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <setPinA>
 5c8:	83 30       	cpi	r24, 0x03	; 3
 5ca:	29 f4       	brne	.+10     	; 0x5d6 <main+0x70>
		{
			Tick1();
 5cc:	4a de       	rcall	.-876    	; 0x262 <Tick1>
			i2 = 1;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <i2>
 5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <main+0x7a>
		}else 
			i2++; //increment to match counter to do operation
 5d6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <i2>
 5da:	8f 5f       	subi	r24, 0xFF	; 255
 5dc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <i2>
		
		if (sm2 == sm2_start) //reset main loop counter
 5e0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <sm2>
 5e4:	88 23       	and	r24, r24
 5e6:	11 f4       	brne	.+4      	; 0x5ec <main+0x86>
		{
			i2 = 0;
 5e8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <i2>
		}


		PORTB = total;
 5ec:	85 e2       	ldi	r24, 0x25	; 37
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <total>
 5f4:	fc 01       	movw	r30, r24
 5f6:	20 83       	st	Z, r18
		while(!TimerFlag);
 5f8:	00 00       	nop
 5fa:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 5fe:	88 23       	and	r24, r24
 600:	e1 f3       	breq	.-8      	; 0x5fa <main+0x94>
		TimerFlag = 0;
 602:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
    }
 606:	cf cf       	rjmp	.-98     	; 0x5a6 <main+0x40>

00000608 <_exit>:
 608:	f8 94       	cli

0000060a <__stop_program>:
 60a:	ff cf       	rjmp	.-2      	; 0x60a <__stop_program>
