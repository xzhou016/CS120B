
xzhou016_FinalProjectv2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000b48  00000bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080012a  0080012a  00000c06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000749  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000288  00000000  00000000  00001499  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097a  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  0000209c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041b  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000065a  00000000  00000000  000027cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00002e29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	9c c1       	rjmp	.+824    	; 0x36e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e4       	ldi	r30, 0x48	; 72
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a5 34       	cpi	r26, 0x45	; 69
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f0 d2       	rcall	.+1504   	; 0x6a4 <main>
  c4:	3f c5       	rjmp	.+2686   	; 0xb44 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_ClearScreen>:
#define RS 6			// pin number of uC connected to pin 4 of LCD disp.
#define E 7			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	LCD_WriteCommand(0x01);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	18 d0       	rcall	.+48     	; 0x104 <LCD_WriteCommand>
}
  d4:	df 91       	pop	r29
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <LCD_init>:

void LCD_init(void) {
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62

	//wait for 100 ms.
	delay_ms(100);
  e2:	84 e6       	ldi	r24, 0x64	; 100
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	a7 d0       	rcall	.+334    	; 0x236 <delay_ms>
	LCD_WriteCommand(0x38);
  e8:	88 e3       	ldi	r24, 0x38	; 56
  ea:	0c d0       	rcall	.+24     	; 0x104 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	0a d0       	rcall	.+20     	; 0x104 <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
  f0:	8f e0       	ldi	r24, 0x0F	; 15
  f2:	08 d0       	rcall	.+16     	; 0x104 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	06 d0       	rcall	.+12     	; 0x104 <LCD_WriteCommand>
	delay_ms(10);
  f8:	8a e0       	ldi	r24, 0x0A	; 10
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	9c d0       	rcall	.+312    	; 0x236 <delay_ms>
}
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <LCD_WriteCommand>:

void LCD_WriteCommand (unsigned char Command) {
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(CONTROL_BUS,RS);
 110:	8b e2       	ldi	r24, 0x2B	; 43
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2b e2       	ldi	r18, 0x2B	; 43
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	20 81       	ld	r18, Z
 11c:	2f 7b       	andi	r18, 0xBF	; 191
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
	DATA_BUS = Command;
 122:	88 e2       	ldi	r24, 0x28	; 40
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	29 81       	ldd	r18, Y+1	; 0x01
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
	SET_BIT(CONTROL_BUS,E);
 12c:	8b e2       	ldi	r24, 0x2B	; 43
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2b e2       	ldi	r18, 0x2B	; 43
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	20 81       	ld	r18, Z
 138:	20 68       	ori	r18, 0x80	; 128
 13a:	fc 01       	movw	r30, r24
 13c:	20 83       	st	Z, r18
	asm("nop");
 13e:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 140:	8b e2       	ldi	r24, 0x2B	; 43
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	2b e2       	ldi	r18, 0x2B	; 43
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	f9 01       	movw	r30, r18
 14a:	20 81       	ld	r18, Z
 14c:	2f 77       	andi	r18, 0x7F	; 127
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
	delay_ms(2); // ClearScreen requires 1.52ms to execute
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	6f d0       	rcall	.+222    	; 0x236 <delay_ms>
}
 158:	0f 90       	pop	r0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <LCD_WriteData>:

void LCD_WriteData(unsigned char Data) {
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	1f 92       	push	r1
 166:	cd b7       	in	r28, 0x3d	; 61
 168:	de b7       	in	r29, 0x3e	; 62
 16a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(CONTROL_BUS,RS);
 16c:	8b e2       	ldi	r24, 0x2B	; 43
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	2b e2       	ldi	r18, 0x2B	; 43
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	f9 01       	movw	r30, r18
 176:	20 81       	ld	r18, Z
 178:	20 64       	ori	r18, 0x40	; 64
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
	DATA_BUS = Data;
 17e:	88 e2       	ldi	r24, 0x28	; 40
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	29 81       	ldd	r18, Y+1	; 0x01
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
	SET_BIT(CONTROL_BUS,E);
 188:	8b e2       	ldi	r24, 0x2B	; 43
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	2b e2       	ldi	r18, 0x2B	; 43
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	f9 01       	movw	r30, r18
 192:	20 81       	ld	r18, Z
 194:	20 68       	ori	r18, 0x80	; 128
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
	asm("nop");
 19a:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 19c:	8b e2       	ldi	r24, 0x2B	; 43
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	2b e2       	ldi	r18, 0x2B	; 43
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	f9 01       	movw	r30, r18
 1a6:	20 81       	ld	r18, Z
 1a8:	2f 77       	andi	r18, 0x7F	; 127
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 83       	st	Z, r18
	delay_ms(1);
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	41 d0       	rcall	.+130    	; 0x236 <delay_ms>
}
 1b4:	0f 90       	pop	r0
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <LCD_DisplayString>:

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	00 d0       	rcall	.+0      	; 0x1c2 <LCD_DisplayString+0x6>
 1c2:	00 d0       	rcall	.+0      	; 0x1c4 <LCD_DisplayString+0x8>
 1c4:	cd b7       	in	r28, 0x3d	; 61
 1c6:	de b7       	in	r29, 0x3e	; 62
 1c8:	8a 83       	std	Y+2, r24	; 0x02
 1ca:	7c 83       	std	Y+4, r23	; 0x04
 1cc:	6b 83       	std	Y+3, r22	; 0x03
	LCD_ClearScreen();
 1ce:	7c df       	rcall	.-264    	; 0xc8 <LCD_ClearScreen>
	unsigned char c = column;
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	89 83       	std	Y+1, r24	; 0x01
	while(*string) {
 1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <LCD_DisplayString+0x38>
		LCD_Cursor(c++);
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	98 0f       	add	r25, r24
 1dc:	99 83       	std	Y+1, r25	; 0x01
 1de:	17 d0       	rcall	.+46     	; 0x20e <LCD_Cursor>
		LCD_WriteData(*string++);
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	9c 81       	ldd	r25, Y+4	; 0x04
 1e4:	9c 01       	movw	r18, r24
 1e6:	2f 5f       	subi	r18, 0xFF	; 255
 1e8:	3f 4f       	sbci	r19, 0xFF	; 255
 1ea:	3c 83       	std	Y+4, r19	; 0x04
 1ec:	2b 83       	std	Y+3, r18	; 0x03
 1ee:	fc 01       	movw	r30, r24
 1f0:	80 81       	ld	r24, Z
 1f2:	b6 df       	rcall	.-148    	; 0x160 <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	9c 81       	ldd	r25, Y+4	; 0x04
 1f8:	fc 01       	movw	r30, r24
 1fa:	80 81       	ld	r24, Z
 1fc:	88 23       	and	r24, r24
 1fe:	59 f7       	brne	.-42     	; 0x1d6 <LCD_DisplayString+0x1a>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <LCD_Cursor>:

void LCD_Cursor(unsigned char column) {
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	1f 92       	push	r1
 214:	cd b7       	in	r28, 0x3d	; 61
 216:	de b7       	in	r29, 0x3e	; 62
 218:	89 83       	std	Y+1, r24	; 0x01
	if ( column < 17 ) { // 16x1 LCD: column < 9
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	81 31       	cpi	r24, 0x11	; 17
 21e:	20 f4       	brcc	.+8      	; 0x228 <LCD_Cursor+0x1a>
		// 16x2 LCD: column < 17
		LCD_WriteCommand(0x80 + column - 1);
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	81 58       	subi	r24, 0x81	; 129
 224:	6f df       	rcall	.-290    	; 0x104 <LCD_WriteCommand>
 226:	03 c0       	rjmp	.+6      	; 0x22e <LCD_Cursor+0x20>
		} else {
		LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	81 55       	subi	r24, 0x51	; 81
 22c:	6b df       	rcall	.-298    	; 0x104 <LCD_WriteCommand>
		// 16x2 LCD: column - 9
	}
}
 22e:	0f 90       	pop	r0
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	00 d0       	rcall	.+0      	; 0x23c <delay_ms+0x6>
 23c:	00 d0       	rcall	.+0      	; 0x23e <delay_ms+0x8>
 23e:	00 d0       	rcall	.+0      	; 0x240 <delay_ms+0xa>
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
 244:	9e 83       	std	Y+6, r25	; 0x06
 246:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<miliSec;i++)
 248:	1a 82       	std	Y+2, r1	; 0x02
 24a:	19 82       	std	Y+1, r1	; 0x01
 24c:	13 c0       	rjmp	.+38     	; 0x274 <delay_ms+0x3e>
	for(j=0;j<775;j++)
 24e:	1c 82       	std	Y+4, r1	; 0x04
 250:	1b 82       	std	Y+3, r1	; 0x03
 252:	06 c0       	rjmp	.+12     	; 0x260 <delay_ms+0x2a>
	{
		asm("nop");
 254:	00 00       	nop
void delay_ms(int miliSec) //for 8 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
	for(j=0;j<775;j++)
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	9c 81       	ldd	r25, Y+4	; 0x04
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	9c 83       	std	Y+4, r25	; 0x04
 25e:	8b 83       	std	Y+3, r24	; 0x03
 260:	8b 81       	ldd	r24, Y+3	; 0x03
 262:	9c 81       	ldd	r25, Y+4	; 0x04
 264:	87 30       	cpi	r24, 0x07	; 7
 266:	93 40       	sbci	r25, 0x03	; 3
 268:	ac f3       	brlt	.-22     	; 0x254 <delay_ms+0x1e>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
 26a:	89 81       	ldd	r24, Y+1	; 0x01
 26c:	9a 81       	ldd	r25, Y+2	; 0x02
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	9a 83       	std	Y+2, r25	; 0x02
 272:	89 83       	std	Y+1, r24	; 0x01
 274:	29 81       	ldd	r18, Y+1	; 0x01
 276:	3a 81       	ldd	r19, Y+2	; 0x02
 278:	8d 81       	ldd	r24, Y+5	; 0x05
 27a:	9e 81       	ldd	r25, Y+6	; 0x06
 27c:	28 17       	cp	r18, r24
 27e:	39 07       	cpc	r19, r25
 280:	34 f3       	brlt	.-52     	; 0x24e <delay_ms+0x18>
	for(j=0;j<775;j++)
	{
		asm("nop");
	}
 282:	26 96       	adiw	r28, 0x06	; 6
 284:	0f b6       	in	r0, 0x3f	; 63
 286:	f8 94       	cli
 288:	de bf       	out	0x3e, r29	; 62
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	cd bf       	out	0x3d, r28	; 61
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <TimerSet>:
		case keypad_release:	break;
		
		default:				break;
	}
	return state;
}
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	00 d0       	rcall	.+0      	; 0x29a <TimerSet+0x6>
 29a:	00 d0       	rcall	.+0      	; 0x29c <TimerSet+0x8>
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	69 83       	std	Y+1, r22	; 0x01
 2a2:	7a 83       	std	Y+2, r23	; 0x02
 2a4:	8b 83       	std	Y+3, r24	; 0x03
 2a6:	9c 83       	std	Y+4, r25	; 0x04
 2a8:	89 81       	ldd	r24, Y+1	; 0x01
 2aa:	9a 81       	ldd	r25, Y+2	; 0x02
 2ac:	ab 81       	ldd	r26, Y+3	; 0x03
 2ae:	bc 81       	ldd	r27, Y+4	; 0x04
 2b0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M>
 2b4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x1>
 2b8:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <_avr_timer_M+0x2>
 2bc:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <_avr_timer_M+0x3>
 2c0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 2c4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 2c8:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 2cc:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 2d0:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 2d4:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 2d8:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 2dc:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <TimerOn>:
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	81 e8       	ldi	r24, 0x81	; 129
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	2b e0       	ldi	r18, 0x0B	; 11
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
 300:	88 e8       	ldi	r24, 0x88	; 136
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	2d e7       	ldi	r18, 0x7D	; 125
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	fc 01       	movw	r30, r24
 30a:	31 83       	std	Z+1, r19	; 0x01
 30c:	20 83       	st	Z, r18
 30e:	8f e6       	ldi	r24, 0x6F	; 111
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	22 e0       	ldi	r18, 0x02	; 2
 314:	fc 01       	movw	r30, r24
 316:	20 83       	st	Z, r18
 318:	84 e8       	ldi	r24, 0x84	; 132
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	fc 01       	movw	r30, r24
 31e:	11 82       	std	Z+1, r1	; 0x01
 320:	10 82       	st	Z, r1
 322:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 326:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 32a:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 32e:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 332:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 336:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 33a:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 33e:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
 342:	8f e5       	ldi	r24, 0x5F	; 95
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	2f e5       	ldi	r18, 0x5F	; 95
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	f9 01       	movw	r30, r18
 34c:	20 81       	ld	r18, Z
 34e:	20 68       	ori	r18, 0x80	; 128
 350:	fc 01       	movw	r30, r24
 352:	20 83       	st	Z, r18
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <TimerISR>:
 35a:	cf 93       	push	r28
 35c:	df 93       	push	r29
 35e:	cd b7       	in	r28, 0x3d	; 61
 360:	de b7       	in	r29, 0x3e	; 62
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end>
 368:	df 91       	pop	r29
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <__vector_13>:
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 37e:	0f 92       	push	r0
 380:	2f 93       	push	r18
 382:	3f 93       	push	r19
 384:	4f 93       	push	r20
 386:	5f 93       	push	r21
 388:	6f 93       	push	r22
 38a:	7f 93       	push	r23
 38c:	8f 93       	push	r24
 38e:	9f 93       	push	r25
 390:	af 93       	push	r26
 392:	bf 93       	push	r27
 394:	ef 93       	push	r30
 396:	ff 93       	push	r31
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_avr_timer_cntcurr>
 3a4:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <_avr_timer_cntcurr+0x1>
 3a8:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <_avr_timer_cntcurr+0x2>
 3ac:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <_avr_timer_cntcurr+0x3>
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	a1 09       	sbc	r26, r1
 3b4:	b1 09       	sbc	r27, r1
 3b6:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 3ba:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 3be:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 3c2:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
 3c6:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <_avr_timer_cntcurr>
 3ca:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <_avr_timer_cntcurr+0x1>
 3ce:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <_avr_timer_cntcurr+0x2>
 3d2:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <_avr_timer_cntcurr+0x3>
 3d6:	89 2b       	or	r24, r25
 3d8:	8a 2b       	or	r24, r26
 3da:	8b 2b       	or	r24, r27
 3dc:	89 f4       	brne	.+34     	; 0x400 <__FUSE_REGION_LENGTH__>
 3de:	bd df       	rcall	.-134    	; 0x35a <TimerISR>
 3e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 3e4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 3e8:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 3ec:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 3f0:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <_avr_timer_cntcurr>
 3f4:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <_avr_timer_cntcurr+0x1>
 3f8:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <_avr_timer_cntcurr+0x2>
 3fc:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <_avr_timer_cntcurr+0x3>
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	0f 90       	pop	r0
 41e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
 422:	0f 90       	pop	r0
 424:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <findGCD>:
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	60 97       	sbiw	r28, 0x10	; 16
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	6d 83       	std	Y+5, r22	; 0x05
 444:	7e 83       	std	Y+6, r23	; 0x06
 446:	8f 83       	std	Y+7, r24	; 0x07
 448:	98 87       	std	Y+8, r25	; 0x08
 44a:	29 87       	std	Y+9, r18	; 0x09
 44c:	3a 87       	std	Y+10, r19	; 0x0a
 44e:	4b 87       	std	Y+11, r20	; 0x0b
 450:	5c 87       	std	Y+12, r21	; 0x0c
 452:	8d 81       	ldd	r24, Y+5	; 0x05
 454:	9e 81       	ldd	r25, Y+6	; 0x06
 456:	af 81       	ldd	r26, Y+7	; 0x07
 458:	b8 85       	ldd	r27, Y+8	; 0x08
 45a:	29 85       	ldd	r18, Y+9	; 0x09
 45c:	3a 85       	ldd	r19, Y+10	; 0x0a
 45e:	4b 85       	ldd	r20, Y+11	; 0x0b
 460:	5c 85       	ldd	r21, Y+12	; 0x0c
 462:	bc 01       	movw	r22, r24
 464:	cd 01       	movw	r24, r26
 466:	a8 d2       	rcall	.+1360   	; 0x9b8 <__udivmodsi4>
 468:	dc 01       	movw	r26, r24
 46a:	cb 01       	movw	r24, r22
 46c:	89 83       	std	Y+1, r24	; 0x01
 46e:	9a 83       	std	Y+2, r25	; 0x02
 470:	ab 83       	std	Y+3, r26	; 0x03
 472:	bc 83       	std	Y+4, r27	; 0x04
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	9a 81       	ldd	r25, Y+2	; 0x02
 478:	ab 81       	ldd	r26, Y+3	; 0x03
 47a:	bc 81       	ldd	r27, Y+4	; 0x04
 47c:	89 2b       	or	r24, r25
 47e:	8a 2b       	or	r24, r26
 480:	8b 2b       	or	r24, r27
 482:	29 f4       	brne	.+10     	; 0x48e <findGCD+0x60>
 484:	89 85       	ldd	r24, Y+9	; 0x09
 486:	9a 85       	ldd	r25, Y+10	; 0x0a
 488:	ab 85       	ldd	r26, Y+11	; 0x0b
 48a:	bc 85       	ldd	r27, Y+12	; 0x0c
 48c:	11 c0       	rjmp	.+34     	; 0x4b0 <findGCD+0x82>
 48e:	89 85       	ldd	r24, Y+9	; 0x09
 490:	9a 85       	ldd	r25, Y+10	; 0x0a
 492:	ab 85       	ldd	r26, Y+11	; 0x0b
 494:	bc 85       	ldd	r27, Y+12	; 0x0c
 496:	8d 83       	std	Y+5, r24	; 0x05
 498:	9e 83       	std	Y+6, r25	; 0x06
 49a:	af 83       	std	Y+7, r26	; 0x07
 49c:	b8 87       	std	Y+8, r27	; 0x08
 49e:	89 81       	ldd	r24, Y+1	; 0x01
 4a0:	9a 81       	ldd	r25, Y+2	; 0x02
 4a2:	ab 81       	ldd	r26, Y+3	; 0x03
 4a4:	bc 81       	ldd	r27, Y+4	; 0x04
 4a6:	89 87       	std	Y+9, r24	; 0x09
 4a8:	9a 87       	std	Y+10, r25	; 0x0a
 4aa:	ab 87       	std	Y+11, r26	; 0x0b
 4ac:	bc 87       	std	Y+12, r27	; 0x0c
 4ae:	d1 cf       	rjmp	.-94     	; 0x452 <findGCD+0x24>
 4b0:	bc 01       	movw	r22, r24
 4b2:	cd 01       	movw	r24, r26
 4b4:	60 96       	adiw	r28, 0x10	; 16
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	f8 94       	cli
 4ba:	de bf       	out	0x3e, r29	; 62
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	cd bf       	out	0x3d, r28	; 61
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	08 95       	ret

000004c6 <arrayShift>:
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	00 d0       	rcall	.+0      	; 0x4cc <arrayShift+0x6>
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	8a 83       	std	Y+2, r24	; 0x02
 4d2:	8a 81       	ldd	r24, Y+2	; 0x02
 4d4:	89 83       	std	Y+1, r24	; 0x01
 4d6:	23 c0       	rjmp	.+70     	; 0x51e <arrayShift+0x58>
 4d8:	89 81       	ldd	r24, Y+1	; 0x01
 4da:	88 2f       	mov	r24, r24
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	29 81       	ldd	r18, Y+1	; 0x01
 4e0:	22 2f       	mov	r18, r18
 4e2:	30 e0       	ldi	r19, 0x00	; 0
 4e4:	21 50       	subi	r18, 0x01	; 1
 4e6:	31 09       	sbc	r19, r1
 4e8:	28 5f       	subi	r18, 0xF8	; 248
 4ea:	3e 4f       	sbci	r19, 0xFE	; 254
 4ec:	f9 01       	movw	r30, r18
 4ee:	20 81       	ld	r18, Z
 4f0:	88 5f       	subi	r24, 0xF8	; 248
 4f2:	9e 4f       	sbci	r25, 0xFE	; 254
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	88 2f       	mov	r24, r24
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	29 81       	ldd	r18, Y+1	; 0x01
 500:	22 2f       	mov	r18, r18
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	21 50       	subi	r18, 0x01	; 1
 506:	31 09       	sbc	r19, r1
 508:	28 5e       	subi	r18, 0xE8	; 232
 50a:	3e 4f       	sbci	r19, 0xFE	; 254
 50c:	f9 01       	movw	r30, r18
 50e:	20 81       	ld	r18, Z
 510:	88 5e       	subi	r24, 0xE8	; 232
 512:	9e 4f       	sbci	r25, 0xFE	; 254
 514:	fc 01       	movw	r30, r24
 516:	20 83       	st	Z, r18
 518:	89 81       	ldd	r24, Y+1	; 0x01
 51a:	81 50       	subi	r24, 0x01	; 1
 51c:	89 83       	std	Y+1, r24	; 0x01
 51e:	89 81       	ldd	r24, Y+1	; 0x01
 520:	88 23       	and	r24, r24
 522:	d1 f6       	brne	.-76     	; 0x4d8 <arrayShift+0x12>
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <ObstacleGeneratorSM_Tick>:
 52e:	cf 93       	push	r28
 530:	df 93       	push	r29
 532:	cd b7       	in	r28, 0x3d	; 61
 534:	de b7       	in	r29, 0x3e	; 62
 536:	2a 97       	sbiw	r28, 0x0a	; 10
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	9a 83       	std	Y+2, r25	; 0x02
 544:	89 83       	std	Y+1, r24	; 0x01
 546:	89 81       	ldd	r24, Y+1	; 0x01
 548:	9a 81       	ldd	r25, Y+2	; 0x02
 54a:	00 97       	sbiw	r24, 0x00	; 0
 54c:	19 f0       	breq	.+6      	; 0x554 <ObstacleGeneratorSM_Tick+0x26>
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	49 f0       	breq	.+18     	; 0x564 <ObstacleGeneratorSM_Tick+0x36>
 552:	05 c0       	rjmp	.+10     	; 0x55e <ObstacleGeneratorSM_Tick+0x30>
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	9a 83       	std	Y+2, r25	; 0x02
 55a:	89 83       	std	Y+1, r24	; 0x01
 55c:	04 c0       	rjmp	.+8      	; 0x566 <ObstacleGeneratorSM_Tick+0x38>
 55e:	1a 82       	std	Y+2, r1	; 0x02
 560:	19 82       	std	Y+1, r1	; 0x01
 562:	01 c0       	rjmp	.+2      	; 0x566 <ObstacleGeneratorSM_Tick+0x38>
 564:	00 00       	nop
 566:	89 81       	ldd	r24, Y+1	; 0x01
 568:	9a 81       	ldd	r25, Y+2	; 0x02
 56a:	00 97       	sbiw	r24, 0x00	; 0
 56c:	09 f4       	brne	.+2      	; 0x570 <ObstacleGeneratorSM_Tick+0x42>
 56e:	5a c0       	rjmp	.+180    	; 0x624 <ObstacleGeneratorSM_Tick+0xf6>
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	09 f0       	breq	.+2      	; 0x576 <ObstacleGeneratorSM_Tick+0x48>
 574:	58 c0       	rjmp	.+176    	; 0x626 <ObstacleGeneratorSM_Tick+0xf8>
 576:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <str_index>
 57a:	a5 df       	rcall	.-182    	; 0x4c6 <arrayShift>
 57c:	9a d2       	rcall	.+1332   	; 0xab2 <rand>
 57e:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <object_generate_prob>
 582:	22 2f       	mov	r18, r18
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	b9 01       	movw	r22, r18
 588:	04 d2       	rcall	.+1032   	; 0x992 <__divmodhi4>
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	21 f4       	brne	.+8      	; 0x596 <ObstacleGeneratorSM_Tick+0x68>
 58e:	83 e2       	ldi	r24, 0x23	; 35
 590:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
 594:	10 c0       	rjmp	.+32     	; 0x5b6 <ObstacleGeneratorSM_Tick+0x88>
 596:	8d d2       	rcall	.+1306   	; 0xab2 <rand>
 598:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <object_generate_prob>
 59c:	22 2f       	mov	r18, r18
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	b9 01       	movw	r22, r18
 5a2:	f7 d1       	rcall	.+1006   	; 0x992 <__divmodhi4>
 5a4:	01 97       	sbiw	r24, 0x01	; 1
 5a6:	21 f4       	brne	.+8      	; 0x5b0 <ObstacleGeneratorSM_Tick+0x82>
 5a8:	8a e2       	ldi	r24, 0x2A	; 42
 5aa:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
 5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <ObstacleGeneratorSM_Tick+0x88>
 5b0:	80 e2       	ldi	r24, 0x20	; 32
 5b2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row1>
 5b6:	7d d2       	rcall	.+1274   	; 0xab2 <rand>
 5b8:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <object_generate_prob>
 5bc:	22 2f       	mov	r18, r18
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	b9 01       	movw	r22, r18
 5c2:	e7 d1       	rcall	.+974    	; 0x992 <__divmodhi4>
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	21 f4       	brne	.+8      	; 0x5d0 <ObstacleGeneratorSM_Tick+0xa2>
 5c8:	83 e2       	ldi	r24, 0x23	; 35
 5ca:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <row2>
 5ce:	10 c0       	rjmp	.+32     	; 0x5f0 <ObstacleGeneratorSM_Tick+0xc2>
 5d0:	70 d2       	rcall	.+1248   	; 0xab2 <rand>
 5d2:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <object_generate_prob>
 5d6:	22 2f       	mov	r18, r18
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	b9 01       	movw	r22, r18
 5dc:	da d1       	rcall	.+948    	; 0x992 <__divmodhi4>
 5de:	01 97       	sbiw	r24, 0x01	; 1
 5e0:	21 f4       	brne	.+8      	; 0x5ea <ObstacleGeneratorSM_Tick+0xbc>
 5e2:	8a e2       	ldi	r24, 0x2A	; 42
 5e4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <row2>
 5e8:	03 c0       	rjmp	.+6      	; 0x5f0 <ObstacleGeneratorSM_Tick+0xc2>
 5ea:	80 e2       	ldi	r24, 0x20	; 32
 5ec:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <row2>
 5f0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <row1+0xf>
 5f4:	88 23       	and	r24, r24
 5f6:	21 f4       	brne	.+8      	; 0x600 <ObstacleGeneratorSM_Tick+0xd2>
 5f8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <row2+0xf>
 5fc:	88 23       	and	r24, r24
 5fe:	61 f0       	breq	.+24     	; 0x618 <ObstacleGeneratorSM_Tick+0xea>
 600:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <str_index>
 604:	8f 30       	cpi	r24, 0x0F	; 15
 606:	40 f0       	brcs	.+16     	; 0x618 <ObstacleGeneratorSM_Tick+0xea>
 608:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <row1+0xf>
 60c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <row2+0xf>
 610:	8f e0       	ldi	r24, 0x0F	; 15
 612:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <str_index>
 616:	07 c0       	rjmp	.+14     	; 0x626 <ObstacleGeneratorSM_Tick+0xf8>
 618:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <str_index>
 61c:	8f 5f       	subi	r24, 0xFF	; 255
 61e:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <str_index>
 622:	01 c0       	rjmp	.+2      	; 0x626 <ObstacleGeneratorSM_Tick+0xf8>
 624:	00 00       	nop
 626:	89 81       	ldd	r24, Y+1	; 0x01
 628:	9a 81       	ldd	r25, Y+2	; 0x02
 62a:	2a 96       	adiw	r28, 0x0a	; 10
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	f8 94       	cli
 630:	de bf       	out	0x3e, r29	; 62
 632:	0f be       	out	0x3f, r0	; 63
 634:	cd bf       	out	0x3d, r28	; 61
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <DisplaySM_Tick>:

unsigned char display_index = 0;

enum displaySM{display_start, display_scroll} displaySM;
int DisplaySM_Tick(int state)
{
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	00 d0       	rcall	.+0      	; 0x642 <DisplaySM_Tick+0x6>
 642:	cd b7       	in	r28, 0x3d	; 61
 644:	de b7       	in	r29, 0x3e	; 62
 646:	9a 83       	std	Y+2, r25	; 0x02
 648:	89 83       	std	Y+1, r24	; 0x01
	
	
	//unsigned char back = 0;
	switch(state) //state transition
 64a:	89 81       	ldd	r24, Y+1	; 0x01
 64c:	9a 81       	ldd	r25, Y+2	; 0x02
 64e:	00 97       	sbiw	r24, 0x00	; 0
 650:	19 f0       	breq	.+6      	; 0x658 <DisplaySM_Tick+0x1c>
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	31 f0       	breq	.+12     	; 0x662 <DisplaySM_Tick+0x26>
 656:	0a c0       	rjmp	.+20     	; 0x66c <DisplaySM_Tick+0x30>
	{
		case display_start:
			state =  display_scroll;
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	9a 83       	std	Y+2, r25	; 0x02
 65e:	89 83       	std	Y+1, r24	; 0x01
		break;
 660:	08 c0       	rjmp	.+16     	; 0x672 <DisplaySM_Tick+0x36>
		
		
		case display_scroll:
			state = display_scroll;
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	9a 83       	std	Y+2, r25	; 0x02
 668:	89 83       	std	Y+1, r24	; 0x01
		break;
 66a:	03 c0       	rjmp	.+6      	; 0x672 <DisplaySM_Tick+0x36>
		
		default:
			state = display_start;
 66c:	1a 82       	std	Y+2, r1	; 0x02
 66e:	19 82       	std	Y+1, r1	; 0x01
		break;
 670:	00 00       	nop
	}
	
	
	switch(state) //state action
 672:	89 81       	ldd	r24, Y+1	; 0x01
 674:	9a 81       	ldd	r25, Y+2	; 0x02
 676:	00 97       	sbiw	r24, 0x00	; 0
 678:	69 f0       	breq	.+26     	; 0x694 <DisplaySM_Tick+0x58>
 67a:	01 97       	sbiw	r24, 0x01	; 1
 67c:	09 f0       	breq	.+2      	; 0x680 <DisplaySM_Tick+0x44>
			LCD_ClearScreen();
			LCD_DisplayString(1, row1);
			LCD_DisplayString(17, row2);
		break;
		
		default: break;
 67e:	0b c0       	rjmp	.+22     	; 0x696 <DisplaySM_Tick+0x5a>
	{
		case display_start:
		break;
		
		case display_scroll:
			LCD_ClearScreen();
 680:	23 dd       	rcall	.-1466   	; 0xc8 <LCD_ClearScreen>
			LCD_DisplayString(1, row1);
 682:	68 e0       	ldi	r22, 0x08	; 8
 684:	71 e0       	ldi	r23, 0x01	; 1
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	99 dd       	rcall	.-1230   	; 0x1bc <LCD_DisplayString>
			LCD_DisplayString(17, row2);
 68a:	68 e1       	ldi	r22, 0x18	; 24
 68c:	71 e0       	ldi	r23, 0x01	; 1
 68e:	81 e1       	ldi	r24, 0x11	; 17
 690:	95 dd       	rcall	.-1238   	; 0x1bc <LCD_DisplayString>
		break;
 692:	01 c0       	rjmp	.+2      	; 0x696 <DisplaySM_Tick+0x5a>
	
	
	switch(state) //state action
	{
		case display_start:
		break;
 694:	00 00       	nop
		break;
		
		default: break;
	}
	
	return state;
 696:	89 81       	ldd	r24, Y+1	; 0x01
 698:	9a 81       	ldd	r25, Y+2	; 0x02
	
}
 69a:	0f 90       	pop	r0
 69c:	0f 90       	pop	r0
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	08 95       	ret

000006a4 <main>:
#include "ObstacleGenerator.h"
#include "KeypadReadSM.h"
#include "Display.h"

int main(void)
{
 6a4:	0f 93       	push	r16
 6a6:	1f 93       	push	r17
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	a8 97       	sbiw	r28, 0x28	; 40
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	f8 94       	cli
 6b6:	de bf       	out	0x3e, r29	; 62
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 6bc:	84 e2       	ldi	r24, 0x24	; 36
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	2f ef       	ldi	r18, 0xFF	; 255
 6c2:	fc 01       	movw	r30, r24
 6c4:	20 83       	st	Z, r18
 6c6:	85 e2       	ldi	r24, 0x25	; 37
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	fc 01       	movw	r30, r24
 6cc:	10 82       	st	Z, r1
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 6ce:	87 e2       	ldi	r24, 0x27	; 39
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	20 ef       	ldi	r18, 0xF0	; 240
 6d4:	fc 01       	movw	r30, r24
 6d6:	20 83       	st	Z, r18
 6d8:	88 e2       	ldi	r24, 0x28	; 40
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	2f e0       	ldi	r18, 0x0F	; 15
 6de:	fc 01       	movw	r30, r24
 6e0:	20 83       	st	Z, r18
	DDRD = 0xFF; PORTD = 0x00;
 6e2:	8a e2       	ldi	r24, 0x2A	; 42
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	2f ef       	ldi	r18, 0xFF	; 255
 6e8:	fc 01       	movw	r30, r24
 6ea:	20 83       	st	Z, r18
 6ec:	8b e2       	ldi	r24, 0x2B	; 43
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	fc 01       	movw	r30, r24
 6f2:	10 82       	st	Z, r1

	/**Set individual task period********************************/
	unsigned long int	Tick1_calc		= 500;
 6f4:	84 ef       	ldi	r24, 0xF4	; 244
 6f6:	91 e0       	ldi	r25, 0x01	; 1
 6f8:	a0 e0       	ldi	r26, 0x00	; 0
 6fa:	b0 e0       	ldi	r27, 0x00	; 0
 6fc:	8b 83       	std	Y+3, r24	; 0x03
 6fe:	9c 83       	std	Y+4, r25	; 0x04
 700:	ad 83       	std	Y+5, r26	; 0x05
 702:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int	Tick2_calc		= 500;
 704:	84 ef       	ldi	r24, 0xF4	; 244
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	a0 e0       	ldi	r26, 0x00	; 0
 70a:	b0 e0       	ldi	r27, 0x00	; 0
 70c:	8f 83       	std	Y+7, r24	; 0x07
 70e:	98 87       	std	Y+8, r25	; 0x08
 710:	a9 87       	std	Y+9, r26	; 0x09
 712:	ba 87       	std	Y+10, r27	; 0x0a
	
	/**Set individual task properties********************************/
	
	//Calculating GCD
	unsigned long int	 tempGCD		= findGCD(Tick1_calc, Tick2_calc);
 714:	2f 81       	ldd	r18, Y+7	; 0x07
 716:	38 85       	ldd	r19, Y+8	; 0x08
 718:	49 85       	ldd	r20, Y+9	; 0x09
 71a:	5a 85       	ldd	r21, Y+10	; 0x0a
 71c:	8b 81       	ldd	r24, Y+3	; 0x03
 71e:	9c 81       	ldd	r25, Y+4	; 0x04
 720:	ad 81       	ldd	r26, Y+5	; 0x05
 722:	be 81       	ldd	r27, Y+6	; 0x06
 724:	bc 01       	movw	r22, r24
 726:	cd 01       	movw	r24, r26
 728:	82 de       	rcall	.-764    	; 0x42e <findGCD>
 72a:	dc 01       	movw	r26, r24
 72c:	cb 01       	movw	r24, r22
 72e:	8b 87       	std	Y+11, r24	; 0x0b
 730:	9c 87       	std	Y+12, r25	; 0x0c
 732:	ad 87       	std	Y+13, r26	; 0x0d
 734:	be 87       	std	Y+14, r27	; 0x0e
	unsigned long int	 GCD			= tempGCD;
 736:	8b 85       	ldd	r24, Y+11	; 0x0b
 738:	9c 85       	ldd	r25, Y+12	; 0x0c
 73a:	ad 85       	ldd	r26, Y+13	; 0x0d
 73c:	be 85       	ldd	r27, Y+14	; 0x0e
 73e:	8f 87       	std	Y+15, r24	; 0x0f
 740:	98 8b       	std	Y+16, r25	; 0x10
 742:	a9 8b       	std	Y+17, r26	; 0x11
 744:	ba 8b       	std	Y+18, r27	; 0x12
	//Recalculate GCD periods for scheduler
	unsigned long int	 Tick1_Period	= Tick1_calc/GCD;
 746:	8b 81       	ldd	r24, Y+3	; 0x03
 748:	9c 81       	ldd	r25, Y+4	; 0x04
 74a:	ad 81       	ldd	r26, Y+5	; 0x05
 74c:	be 81       	ldd	r27, Y+6	; 0x06
 74e:	2f 85       	ldd	r18, Y+15	; 0x0f
 750:	38 89       	ldd	r19, Y+16	; 0x10
 752:	49 89       	ldd	r20, Y+17	; 0x11
 754:	5a 89       	ldd	r21, Y+18	; 0x12
 756:	bc 01       	movw	r22, r24
 758:	cd 01       	movw	r24, r26
 75a:	2e d1       	rcall	.+604    	; 0x9b8 <__udivmodsi4>
 75c:	da 01       	movw	r26, r20
 75e:	c9 01       	movw	r24, r18
 760:	8b 8b       	std	Y+19, r24	; 0x13
 762:	9c 8b       	std	Y+20, r25	; 0x14
 764:	ad 8b       	std	Y+21, r26	; 0x15
 766:	be 8b       	std	Y+22, r27	; 0x16
	unsigned long int	 Tick2_period	= Tick2_calc/GCD;
 768:	8f 81       	ldd	r24, Y+7	; 0x07
 76a:	98 85       	ldd	r25, Y+8	; 0x08
 76c:	a9 85       	ldd	r26, Y+9	; 0x09
 76e:	ba 85       	ldd	r27, Y+10	; 0x0a
 770:	2f 85       	ldd	r18, Y+15	; 0x0f
 772:	38 89       	ldd	r19, Y+16	; 0x10
 774:	49 89       	ldd	r20, Y+17	; 0x11
 776:	5a 89       	ldd	r21, Y+18	; 0x12
 778:	bc 01       	movw	r22, r24
 77a:	cd 01       	movw	r24, r26
 77c:	1d d1       	rcall	.+570    	; 0x9b8 <__udivmodsi4>
 77e:	da 01       	movw	r26, r20
 780:	c9 01       	movw	r24, r18
 782:	8f 8b       	std	Y+23, r24	; 0x17
 784:	98 8f       	std	Y+24, r25	; 0x18
 786:	a9 8f       	std	Y+25, r26	; 0x19
 788:	ba 8f       	std	Y+26, r27	; 0x1a
	static task			 task1, task2;
	task				*tasks[]		= {&task1 , &task2};
 78a:	8f e2       	ldi	r24, 0x2F	; 47
 78c:	91 e0       	ldi	r25, 0x01	; 1
 78e:	9e 8f       	std	Y+30, r25	; 0x1e
 790:	8d 8f       	std	Y+29, r24	; 0x1d
 792:	8a e3       	ldi	r24, 0x3A	; 58
 794:	91 e0       	ldi	r25, 0x01	; 1
 796:	98 a3       	std	Y+32, r25	; 0x20
 798:	8f 8f       	std	Y+31, r24	; 0x1f
	const unsigned short numTasks		= sizeof(tasks)/sizeof(task*);
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	9c 8f       	std	Y+28, r25	; 0x1c
 7a0:	8b 8f       	std	Y+27, r24	; 0x1b
	
	/****************************************************************/
	
	/**Set individual task properties**************/
	task1.state			= 0;
 7a2:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <task1.1632>
	task1.period		= Tick1_Period;
 7a6:	8b 89       	ldd	r24, Y+19	; 0x13
 7a8:	9c 89       	ldd	r25, Y+20	; 0x14
 7aa:	ad 89       	ldd	r26, Y+21	; 0x15
 7ac:	be 89       	ldd	r27, Y+22	; 0x16
 7ae:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <task1.1632+0x1>
 7b2:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <task1.1632+0x2>
 7b6:	a0 93 32 01 	sts	0x0132, r26	; 0x800132 <task1.1632+0x3>
 7ba:	b0 93 33 01 	sts	0x0133, r27	; 0x800133 <task1.1632+0x4>
	task1.elapsedTime	= Tick1_Period;
 7be:	8b 89       	ldd	r24, Y+19	; 0x13
 7c0:	9c 89       	ldd	r25, Y+20	; 0x14
 7c2:	ad 89       	ldd	r26, Y+21	; 0x15
 7c4:	be 89       	ldd	r27, Y+22	; 0x16
 7c6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <task1.1632+0x5>
 7ca:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <task1.1632+0x6>
 7ce:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <task1.1632+0x7>
 7d2:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <task1.1632+0x8>
	task1.TickFct		= &ObstacleGeneratorSM_Tick;
 7d6:	87 e9       	ldi	r24, 0x97	; 151
 7d8:	92 e0       	ldi	r25, 0x02	; 2
 7da:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <task1.1632+0xa>
 7de:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <task1.1632+0x9>
	
	// Task 2
	task2.state			= -1;//Task initial state.
 7e2:	8f ef       	ldi	r24, 0xFF	; 255
 7e4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <task2.1633>
	task2.period		= Tick2_period;//Task Period.
 7e8:	8f 89       	ldd	r24, Y+23	; 0x17
 7ea:	98 8d       	ldd	r25, Y+24	; 0x18
 7ec:	a9 8d       	ldd	r26, Y+25	; 0x19
 7ee:	ba 8d       	ldd	r27, Y+26	; 0x1a
 7f0:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <task2.1633+0x1>
 7f4:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <task2.1633+0x2>
 7f8:	a0 93 3d 01 	sts	0x013D, r26	; 0x80013d <task2.1633+0x3>
 7fc:	b0 93 3e 01 	sts	0x013E, r27	; 0x80013e <task2.1633+0x4>
	task2.elapsedTime	= Tick2_period;//Task current elapsed time.
 800:	8f 89       	ldd	r24, Y+23	; 0x17
 802:	98 8d       	ldd	r25, Y+24	; 0x18
 804:	a9 8d       	ldd	r26, Y+25	; 0x19
 806:	ba 8d       	ldd	r27, Y+26	; 0x1a
 808:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <task2.1633+0x5>
 80c:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <task2.1633+0x6>
 810:	a0 93 41 01 	sts	0x0141, r26	; 0x800141 <task2.1633+0x7>
 814:	b0 93 42 01 	sts	0x0142, r27	; 0x800142 <task2.1633+0x8>
	task2.TickFct		= &DisplaySM_Tick;//Function pointer for the tick.
 818:	8e e1       	ldi	r24, 0x1E	; 30
 81a:	93 e0       	ldi	r25, 0x03	; 3
 81c:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <task2.1633+0xa>
 820:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <task2.1633+0x9>

	/**********************************************/
	
	
	TimerSet(GCD);
 824:	8f 85       	ldd	r24, Y+15	; 0x0f
 826:	98 89       	ldd	r25, Y+16	; 0x10
 828:	a9 89       	ldd	r26, Y+17	; 0x11
 82a:	ba 89       	ldd	r27, Y+18	; 0x12
 82c:	bc 01       	movw	r22, r24
 82e:	cd 01       	movw	r24, r26
 830:	31 dd       	rcall	.-1438   	; 0x294 <TimerSet>
	TimerOn();
 832:	5d dd       	rcall	.-1350   	; 0x2ee <TimerOn>
	
	LCD_init();
 834:	52 dc       	rcall	.-1884   	; 0xda <LCD_init>
	
	while(1)
	{
		for(unsigned short i = 0; i < numTasks; i++)
 836:	1a 82       	std	Y+2, r1	; 0x02
 838:	19 82       	std	Y+1, r1	; 0x01
 83a:	9b c0       	rjmp	.+310    	; 0x972 <main+0x2ce>
		{
			if(tasks[i] -> elapsedTime == tasks[i]-> period)
 83c:	89 81       	ldd	r24, Y+1	; 0x01
 83e:	9a 81       	ldd	r25, Y+2	; 0x02
 840:	88 0f       	add	r24, r24
 842:	99 1f       	adc	r25, r25
 844:	9e 01       	movw	r18, r28
 846:	2f 5f       	subi	r18, 0xFF	; 255
 848:	3f 4f       	sbci	r19, 0xFF	; 255
 84a:	82 0f       	add	r24, r18
 84c:	93 1f       	adc	r25, r19
 84e:	4c 96       	adiw	r24, 0x1c	; 28
 850:	fc 01       	movw	r30, r24
 852:	80 81       	ld	r24, Z
 854:	91 81       	ldd	r25, Z+1	; 0x01
 856:	fc 01       	movw	r30, r24
 858:	25 81       	ldd	r18, Z+5	; 0x05
 85a:	36 81       	ldd	r19, Z+6	; 0x06
 85c:	47 81       	ldd	r20, Z+7	; 0x07
 85e:	50 85       	ldd	r21, Z+8	; 0x08
 860:	89 81       	ldd	r24, Y+1	; 0x01
 862:	9a 81       	ldd	r25, Y+2	; 0x02
 864:	88 0f       	add	r24, r24
 866:	99 1f       	adc	r25, r25
 868:	be 01       	movw	r22, r28
 86a:	6f 5f       	subi	r22, 0xFF	; 255
 86c:	7f 4f       	sbci	r23, 0xFF	; 255
 86e:	86 0f       	add	r24, r22
 870:	97 1f       	adc	r25, r23
 872:	4c 96       	adiw	r24, 0x1c	; 28
 874:	fc 01       	movw	r30, r24
 876:	80 81       	ld	r24, Z
 878:	91 81       	ldd	r25, Z+1	; 0x01
 87a:	fc 01       	movw	r30, r24
 87c:	81 81       	ldd	r24, Z+1	; 0x01
 87e:	92 81       	ldd	r25, Z+2	; 0x02
 880:	a3 81       	ldd	r26, Z+3	; 0x03
 882:	b4 81       	ldd	r27, Z+4	; 0x04
 884:	28 17       	cp	r18, r24
 886:	39 07       	cpc	r19, r25
 888:	4a 07       	cpc	r20, r26
 88a:	5b 07       	cpc	r21, r27
 88c:	09 f0       	breq	.+2      	; 0x890 <main+0x1ec>
 88e:	45 c0       	rjmp	.+138    	; 0x91a <main+0x276>
			{
				tasks[i] -> state		= tasks[i] -> TickFct(tasks[i] -> state);
 890:	89 81       	ldd	r24, Y+1	; 0x01
 892:	9a 81       	ldd	r25, Y+2	; 0x02
 894:	88 0f       	add	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	9e 01       	movw	r18, r28
 89a:	2f 5f       	subi	r18, 0xFF	; 255
 89c:	3f 4f       	sbci	r19, 0xFF	; 255
 89e:	82 0f       	add	r24, r18
 8a0:	93 1f       	adc	r25, r19
 8a2:	4c 96       	adiw	r24, 0x1c	; 28
 8a4:	fc 01       	movw	r30, r24
 8a6:	00 81       	ld	r16, Z
 8a8:	11 81       	ldd	r17, Z+1	; 0x01
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	9a 81       	ldd	r25, Y+2	; 0x02
 8ae:	88 0f       	add	r24, r24
 8b0:	99 1f       	adc	r25, r25
 8b2:	9e 01       	movw	r18, r28
 8b4:	2f 5f       	subi	r18, 0xFF	; 255
 8b6:	3f 4f       	sbci	r19, 0xFF	; 255
 8b8:	82 0f       	add	r24, r18
 8ba:	93 1f       	adc	r25, r19
 8bc:	4c 96       	adiw	r24, 0x1c	; 28
 8be:	fc 01       	movw	r30, r24
 8c0:	80 81       	ld	r24, Z
 8c2:	91 81       	ldd	r25, Z+1	; 0x01
 8c4:	fc 01       	movw	r30, r24
 8c6:	21 85       	ldd	r18, Z+9	; 0x09
 8c8:	32 85       	ldd	r19, Z+10	; 0x0a
 8ca:	89 81       	ldd	r24, Y+1	; 0x01
 8cc:	9a 81       	ldd	r25, Y+2	; 0x02
 8ce:	88 0f       	add	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	ae 01       	movw	r20, r28
 8d4:	4f 5f       	subi	r20, 0xFF	; 255
 8d6:	5f 4f       	sbci	r21, 0xFF	; 255
 8d8:	84 0f       	add	r24, r20
 8da:	95 1f       	adc	r25, r21
 8dc:	4c 96       	adiw	r24, 0x1c	; 28
 8de:	fc 01       	movw	r30, r24
 8e0:	80 81       	ld	r24, Z
 8e2:	91 81       	ldd	r25, Z+1	; 0x01
 8e4:	fc 01       	movw	r30, r24
 8e6:	80 81       	ld	r24, Z
 8e8:	08 2e       	mov	r0, r24
 8ea:	00 0c       	add	r0, r0
 8ec:	99 0b       	sbc	r25, r25
 8ee:	f9 01       	movw	r30, r18
 8f0:	09 95       	icall
 8f2:	f8 01       	movw	r30, r16
 8f4:	80 83       	st	Z, r24

				tasks[i] -> elapsedTime = 0;
 8f6:	89 81       	ldd	r24, Y+1	; 0x01
 8f8:	9a 81       	ldd	r25, Y+2	; 0x02
 8fa:	88 0f       	add	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	9e 01       	movw	r18, r28
 900:	2f 5f       	subi	r18, 0xFF	; 255
 902:	3f 4f       	sbci	r19, 0xFF	; 255
 904:	82 0f       	add	r24, r18
 906:	93 1f       	adc	r25, r19
 908:	4c 96       	adiw	r24, 0x1c	; 28
 90a:	fc 01       	movw	r30, r24
 90c:	80 81       	ld	r24, Z
 90e:	91 81       	ldd	r25, Z+1	; 0x01
 910:	fc 01       	movw	r30, r24
 912:	15 82       	std	Z+5, r1	; 0x05
 914:	16 82       	std	Z+6, r1	; 0x06
 916:	17 82       	std	Z+7, r1	; 0x07
 918:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i] -> elapsedTime += 1;
 91a:	89 81       	ldd	r24, Y+1	; 0x01
 91c:	9a 81       	ldd	r25, Y+2	; 0x02
 91e:	88 0f       	add	r24, r24
 920:	99 1f       	adc	r25, r25
 922:	9e 01       	movw	r18, r28
 924:	2f 5f       	subi	r18, 0xFF	; 255
 926:	3f 4f       	sbci	r19, 0xFF	; 255
 928:	82 0f       	add	r24, r18
 92a:	93 1f       	adc	r25, r19
 92c:	4c 96       	adiw	r24, 0x1c	; 28
 92e:	fc 01       	movw	r30, r24
 930:	20 81       	ld	r18, Z
 932:	31 81       	ldd	r19, Z+1	; 0x01
 934:	89 81       	ldd	r24, Y+1	; 0x01
 936:	9a 81       	ldd	r25, Y+2	; 0x02
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	ae 01       	movw	r20, r28
 93e:	4f 5f       	subi	r20, 0xFF	; 255
 940:	5f 4f       	sbci	r21, 0xFF	; 255
 942:	84 0f       	add	r24, r20
 944:	95 1f       	adc	r25, r21
 946:	4c 96       	adiw	r24, 0x1c	; 28
 948:	fc 01       	movw	r30, r24
 94a:	80 81       	ld	r24, Z
 94c:	91 81       	ldd	r25, Z+1	; 0x01
 94e:	fc 01       	movw	r30, r24
 950:	85 81       	ldd	r24, Z+5	; 0x05
 952:	96 81       	ldd	r25, Z+6	; 0x06
 954:	a7 81       	ldd	r26, Z+7	; 0x07
 956:	b0 85       	ldd	r27, Z+8	; 0x08
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	a1 1d       	adc	r26, r1
 95c:	b1 1d       	adc	r27, r1
 95e:	f9 01       	movw	r30, r18
 960:	85 83       	std	Z+5, r24	; 0x05
 962:	96 83       	std	Z+6, r25	; 0x06
 964:	a7 83       	std	Z+7, r26	; 0x07
 966:	b0 87       	std	Z+8, r27	; 0x08
	
	LCD_init();
	
	while(1)
	{
		for(unsigned short i = 0; i < numTasks; i++)
 968:	89 81       	ldd	r24, Y+1	; 0x01
 96a:	9a 81       	ldd	r25, Y+2	; 0x02
 96c:	01 96       	adiw	r24, 0x01	; 1
 96e:	9a 83       	std	Y+2, r25	; 0x02
 970:	89 83       	std	Y+1, r24	; 0x01
 972:	29 81       	ldd	r18, Y+1	; 0x01
 974:	3a 81       	ldd	r19, Y+2	; 0x02
 976:	8b 8d       	ldd	r24, Y+27	; 0x1b
 978:	9c 8d       	ldd	r25, Y+28	; 0x1c
 97a:	28 17       	cp	r18, r24
 97c:	39 07       	cpc	r19, r25
 97e:	08 f4       	brcc	.+2      	; 0x982 <main+0x2de>
 980:	5d cf       	rjmp	.-326    	; 0x83c <main+0x198>

				tasks[i] -> elapsedTime = 0;
			}
			tasks[i] -> elapsedTime += 1;
		}
		while(!TimerFlag);
 982:	00 00       	nop
 984:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__data_end>
 988:	88 23       	and	r24, r24
 98a:	e1 f3       	breq	.-8      	; 0x984 <main+0x2e0>
		TimerFlag = 0;
 98c:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end>
	}
 990:	52 cf       	rjmp	.-348    	; 0x836 <main+0x192>

00000992 <__divmodhi4>:
 992:	97 fb       	bst	r25, 7
 994:	07 2e       	mov	r0, r23
 996:	16 f4       	brtc	.+4      	; 0x99c <__divmodhi4+0xa>
 998:	00 94       	com	r0
 99a:	06 d0       	rcall	.+12     	; 0x9a8 <__divmodhi4_neg1>
 99c:	77 fd       	sbrc	r23, 7
 99e:	08 d0       	rcall	.+16     	; 0x9b0 <__divmodhi4_neg2>
 9a0:	2d d0       	rcall	.+90     	; 0x9fc <__udivmodhi4>
 9a2:	07 fc       	sbrc	r0, 7
 9a4:	05 d0       	rcall	.+10     	; 0x9b0 <__divmodhi4_neg2>
 9a6:	3e f4       	brtc	.+14     	; 0x9b6 <__divmodhi4_exit>

000009a8 <__divmodhi4_neg1>:
 9a8:	90 95       	com	r25
 9aa:	81 95       	neg	r24
 9ac:	9f 4f       	sbci	r25, 0xFF	; 255
 9ae:	08 95       	ret

000009b0 <__divmodhi4_neg2>:
 9b0:	70 95       	com	r23
 9b2:	61 95       	neg	r22
 9b4:	7f 4f       	sbci	r23, 0xFF	; 255

000009b6 <__divmodhi4_exit>:
 9b6:	08 95       	ret

000009b8 <__udivmodsi4>:
 9b8:	a1 e2       	ldi	r26, 0x21	; 33
 9ba:	1a 2e       	mov	r1, r26
 9bc:	aa 1b       	sub	r26, r26
 9be:	bb 1b       	sub	r27, r27
 9c0:	fd 01       	movw	r30, r26
 9c2:	0d c0       	rjmp	.+26     	; 0x9de <__udivmodsi4_ep>

000009c4 <__udivmodsi4_loop>:
 9c4:	aa 1f       	adc	r26, r26
 9c6:	bb 1f       	adc	r27, r27
 9c8:	ee 1f       	adc	r30, r30
 9ca:	ff 1f       	adc	r31, r31
 9cc:	a2 17       	cp	r26, r18
 9ce:	b3 07       	cpc	r27, r19
 9d0:	e4 07       	cpc	r30, r20
 9d2:	f5 07       	cpc	r31, r21
 9d4:	20 f0       	brcs	.+8      	; 0x9de <__udivmodsi4_ep>
 9d6:	a2 1b       	sub	r26, r18
 9d8:	b3 0b       	sbc	r27, r19
 9da:	e4 0b       	sbc	r30, r20
 9dc:	f5 0b       	sbc	r31, r21

000009de <__udivmodsi4_ep>:
 9de:	66 1f       	adc	r22, r22
 9e0:	77 1f       	adc	r23, r23
 9e2:	88 1f       	adc	r24, r24
 9e4:	99 1f       	adc	r25, r25
 9e6:	1a 94       	dec	r1
 9e8:	69 f7       	brne	.-38     	; 0x9c4 <__udivmodsi4_loop>
 9ea:	60 95       	com	r22
 9ec:	70 95       	com	r23
 9ee:	80 95       	com	r24
 9f0:	90 95       	com	r25
 9f2:	9b 01       	movw	r18, r22
 9f4:	ac 01       	movw	r20, r24
 9f6:	bd 01       	movw	r22, r26
 9f8:	cf 01       	movw	r24, r30
 9fa:	08 95       	ret

000009fc <__udivmodhi4>:
 9fc:	aa 1b       	sub	r26, r26
 9fe:	bb 1b       	sub	r27, r27
 a00:	51 e1       	ldi	r21, 0x11	; 17
 a02:	07 c0       	rjmp	.+14     	; 0xa12 <__udivmodhi4_ep>

00000a04 <__udivmodhi4_loop>:
 a04:	aa 1f       	adc	r26, r26
 a06:	bb 1f       	adc	r27, r27
 a08:	a6 17       	cp	r26, r22
 a0a:	b7 07       	cpc	r27, r23
 a0c:	10 f0       	brcs	.+4      	; 0xa12 <__udivmodhi4_ep>
 a0e:	a6 1b       	sub	r26, r22
 a10:	b7 0b       	sbc	r27, r23

00000a12 <__udivmodhi4_ep>:
 a12:	88 1f       	adc	r24, r24
 a14:	99 1f       	adc	r25, r25
 a16:	5a 95       	dec	r21
 a18:	a9 f7       	brne	.-22     	; 0xa04 <__udivmodhi4_loop>
 a1a:	80 95       	com	r24
 a1c:	90 95       	com	r25
 a1e:	bc 01       	movw	r22, r24
 a20:	cd 01       	movw	r24, r26
 a22:	08 95       	ret

00000a24 <do_rand>:
 a24:	8f 92       	push	r8
 a26:	9f 92       	push	r9
 a28:	af 92       	push	r10
 a2a:	bf 92       	push	r11
 a2c:	cf 92       	push	r12
 a2e:	df 92       	push	r13
 a30:	ef 92       	push	r14
 a32:	ff 92       	push	r15
 a34:	cf 93       	push	r28
 a36:	df 93       	push	r29
 a38:	ec 01       	movw	r28, r24
 a3a:	68 81       	ld	r22, Y
 a3c:	79 81       	ldd	r23, Y+1	; 0x01
 a3e:	8a 81       	ldd	r24, Y+2	; 0x02
 a40:	9b 81       	ldd	r25, Y+3	; 0x03
 a42:	61 15       	cp	r22, r1
 a44:	71 05       	cpc	r23, r1
 a46:	81 05       	cpc	r24, r1
 a48:	91 05       	cpc	r25, r1
 a4a:	21 f4       	brne	.+8      	; 0xa54 <do_rand+0x30>
 a4c:	64 e2       	ldi	r22, 0x24	; 36
 a4e:	79 ed       	ldi	r23, 0xD9	; 217
 a50:	8b e5       	ldi	r24, 0x5B	; 91
 a52:	97 e0       	ldi	r25, 0x07	; 7
 a54:	2d e1       	ldi	r18, 0x1D	; 29
 a56:	33 ef       	ldi	r19, 0xF3	; 243
 a58:	41 e0       	ldi	r20, 0x01	; 1
 a5a:	50 e0       	ldi	r21, 0x00	; 0
 a5c:	38 d0       	rcall	.+112    	; 0xace <__divmodsi4>
 a5e:	49 01       	movw	r8, r18
 a60:	5a 01       	movw	r10, r20
 a62:	9b 01       	movw	r18, r22
 a64:	ac 01       	movw	r20, r24
 a66:	a7 ea       	ldi	r26, 0xA7	; 167
 a68:	b1 e4       	ldi	r27, 0x41	; 65
 a6a:	4d d0       	rcall	.+154    	; 0xb06 <__muluhisi3>
 a6c:	6b 01       	movw	r12, r22
 a6e:	7c 01       	movw	r14, r24
 a70:	ac ee       	ldi	r26, 0xEC	; 236
 a72:	b4 ef       	ldi	r27, 0xF4	; 244
 a74:	a5 01       	movw	r20, r10
 a76:	94 01       	movw	r18, r8
 a78:	52 d0       	rcall	.+164    	; 0xb1e <__mulohisi3>
 a7a:	dc 01       	movw	r26, r24
 a7c:	cb 01       	movw	r24, r22
 a7e:	8c 0d       	add	r24, r12
 a80:	9d 1d       	adc	r25, r13
 a82:	ae 1d       	adc	r26, r14
 a84:	bf 1d       	adc	r27, r15
 a86:	b7 ff       	sbrs	r27, 7
 a88:	03 c0       	rjmp	.+6      	; 0xa90 <do_rand+0x6c>
 a8a:	01 97       	sbiw	r24, 0x01	; 1
 a8c:	a1 09       	sbc	r26, r1
 a8e:	b0 48       	sbci	r27, 0x80	; 128
 a90:	88 83       	st	Y, r24
 a92:	99 83       	std	Y+1, r25	; 0x01
 a94:	aa 83       	std	Y+2, r26	; 0x02
 a96:	bb 83       	std	Y+3, r27	; 0x03
 a98:	9f 77       	andi	r25, 0x7F	; 127
 a9a:	df 91       	pop	r29
 a9c:	cf 91       	pop	r28
 a9e:	ff 90       	pop	r15
 aa0:	ef 90       	pop	r14
 aa2:	df 90       	pop	r13
 aa4:	cf 90       	pop	r12
 aa6:	bf 90       	pop	r11
 aa8:	af 90       	pop	r10
 aaa:	9f 90       	pop	r9
 aac:	8f 90       	pop	r8
 aae:	08 95       	ret

00000ab0 <rand_r>:
 ab0:	b9 cf       	rjmp	.-142    	; 0xa24 <do_rand>

00000ab2 <rand>:
 ab2:	80 e0       	ldi	r24, 0x00	; 0
 ab4:	91 e0       	ldi	r25, 0x01	; 1
 ab6:	b6 cf       	rjmp	.-148    	; 0xa24 <do_rand>

00000ab8 <srand>:
 ab8:	a0 e0       	ldi	r26, 0x00	; 0
 aba:	b0 e0       	ldi	r27, 0x00	; 0
 abc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 ac0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 ac4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 ac8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 acc:	08 95       	ret

00000ace <__divmodsi4>:
 ace:	05 2e       	mov	r0, r21
 ad0:	97 fb       	bst	r25, 7
 ad2:	16 f4       	brtc	.+4      	; 0xad8 <__divmodsi4+0xa>
 ad4:	00 94       	com	r0
 ad6:	0f d0       	rcall	.+30     	; 0xaf6 <__negsi2>
 ad8:	57 fd       	sbrc	r21, 7
 ada:	05 d0       	rcall	.+10     	; 0xae6 <__divmodsi4_neg2>
 adc:	6d df       	rcall	.-294    	; 0x9b8 <__udivmodsi4>
 ade:	07 fc       	sbrc	r0, 7
 ae0:	02 d0       	rcall	.+4      	; 0xae6 <__divmodsi4_neg2>
 ae2:	46 f4       	brtc	.+16     	; 0xaf4 <__divmodsi4_exit>
 ae4:	08 c0       	rjmp	.+16     	; 0xaf6 <__negsi2>

00000ae6 <__divmodsi4_neg2>:
 ae6:	50 95       	com	r21
 ae8:	40 95       	com	r20
 aea:	30 95       	com	r19
 aec:	21 95       	neg	r18
 aee:	3f 4f       	sbci	r19, 0xFF	; 255
 af0:	4f 4f       	sbci	r20, 0xFF	; 255
 af2:	5f 4f       	sbci	r21, 0xFF	; 255

00000af4 <__divmodsi4_exit>:
 af4:	08 95       	ret

00000af6 <__negsi2>:
 af6:	90 95       	com	r25
 af8:	80 95       	com	r24
 afa:	70 95       	com	r23
 afc:	61 95       	neg	r22
 afe:	7f 4f       	sbci	r23, 0xFF	; 255
 b00:	8f 4f       	sbci	r24, 0xFF	; 255
 b02:	9f 4f       	sbci	r25, 0xFF	; 255
 b04:	08 95       	ret

00000b06 <__muluhisi3>:
 b06:	0f d0       	rcall	.+30     	; 0xb26 <__umulhisi3>
 b08:	a5 9f       	mul	r26, r21
 b0a:	90 0d       	add	r25, r0
 b0c:	b4 9f       	mul	r27, r20
 b0e:	90 0d       	add	r25, r0
 b10:	a4 9f       	mul	r26, r20
 b12:	80 0d       	add	r24, r0
 b14:	91 1d       	adc	r25, r1
 b16:	11 24       	eor	r1, r1
 b18:	08 95       	ret

00000b1a <__mulshisi3>:
 b1a:	b7 ff       	sbrs	r27, 7
 b1c:	f4 cf       	rjmp	.-24     	; 0xb06 <__muluhisi3>

00000b1e <__mulohisi3>:
 b1e:	f3 df       	rcall	.-26     	; 0xb06 <__muluhisi3>
 b20:	82 1b       	sub	r24, r18
 b22:	93 0b       	sbc	r25, r19
 b24:	08 95       	ret

00000b26 <__umulhisi3>:
 b26:	a2 9f       	mul	r26, r18
 b28:	b0 01       	movw	r22, r0
 b2a:	b3 9f       	mul	r27, r19
 b2c:	c0 01       	movw	r24, r0
 b2e:	a3 9f       	mul	r26, r19
 b30:	70 0d       	add	r23, r0
 b32:	81 1d       	adc	r24, r1
 b34:	11 24       	eor	r1, r1
 b36:	91 1d       	adc	r25, r1
 b38:	b2 9f       	mul	r27, r18
 b3a:	70 0d       	add	r23, r0
 b3c:	81 1d       	adc	r24, r1
 b3e:	11 24       	eor	r1, r1
 b40:	91 1d       	adc	r25, r1
 b42:	08 95       	ret

00000b44 <_exit>:
 b44:	f8 94       	cli

00000b46 <__stop_program>:
 b46:	ff cf       	rjmp	.-2      	; 0xb46 <__stop_program>
