
xzhou016_FinalProjectv2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  000009b6  00000a4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080012a  0080012a  00000a74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000738  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000288  00000000  00000000  000012b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000980  00000000  00000000  0000153c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000318  00000000  00000000  00001ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ff  00000000  00000000  000021d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000065a  00000000  00000000  000025d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002c2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c1       	rjmp	.+594    	; 0x288 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 eb       	ldi	r30, 0xB6	; 182
  a0:	f9 e0       	ldi	r31, 0x09	; 9
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 32       	cpi	r26, 0x2A	; 42
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e2       	ldi	r26, 0x2A	; 42
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 33       	cpi	r26, 0x3A	; 58
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4f d2       	rcall	.+1182   	; 0x562 <main>
  c4:	76 c4       	rjmp	.+2284   	; 0x9b2 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_init>:
		LCD_WriteCommand(0x80 + column - 1);
		} else {
		LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
		// 16x2 LCD: column - 9
	}
}
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	84 e6       	ldi	r24, 0x64	; 100
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	3c d0       	rcall	.+120    	; 0x14e <delay_ms>
  d6:	88 e3       	ldi	r24, 0x38	; 56
  d8:	0c d0       	rcall	.+24     	; 0xf2 <LCD_WriteCommand>
  da:	86 e0       	ldi	r24, 0x06	; 6
  dc:	0a d0       	rcall	.+20     	; 0xf2 <LCD_WriteCommand>
  de:	8f e0       	ldi	r24, 0x0F	; 15
  e0:	08 d0       	rcall	.+16     	; 0xf2 <LCD_WriteCommand>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	06 d0       	rcall	.+12     	; 0xf2 <LCD_WriteCommand>
  e6:	8a e0       	ldi	r24, 0x0A	; 10
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	31 d0       	rcall	.+98     	; 0x14e <delay_ms>
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <LCD_WriteCommand>:
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	1f 92       	push	r1
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	89 83       	std	Y+1, r24	; 0x01
  fe:	8b e2       	ldi	r24, 0x2B	; 43
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	2b e2       	ldi	r18, 0x2B	; 43
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	f9 01       	movw	r30, r18
 108:	20 81       	ld	r18, Z
 10a:	2f 7b       	andi	r18, 0xBF	; 191
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
 110:	88 e2       	ldi	r24, 0x28	; 40
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	29 81       	ldd	r18, Y+1	; 0x01
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
 11a:	8b e2       	ldi	r24, 0x2B	; 43
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	2b e2       	ldi	r18, 0x2B	; 43
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	f9 01       	movw	r30, r18
 124:	20 81       	ld	r18, Z
 126:	20 68       	ori	r18, 0x80	; 128
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
 12c:	00 00       	nop
 12e:	8b e2       	ldi	r24, 0x2B	; 43
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	2b e2       	ldi	r18, 0x2B	; 43
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	f9 01       	movw	r30, r18
 138:	20 81       	ld	r18, Z
 13a:	2f 77       	andi	r18, 0x7F	; 127
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
 140:	82 e0       	ldi	r24, 0x02	; 2
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	04 d0       	rcall	.+8      	; 0x14e <delay_ms>
 146:	0f 90       	pop	r0
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	00 d0       	rcall	.+0      	; 0x154 <delay_ms+0x6>
 154:	00 d0       	rcall	.+0      	; 0x156 <delay_ms+0x8>
 156:	00 d0       	rcall	.+0      	; 0x158 <delay_ms+0xa>
 158:	cd b7       	in	r28, 0x3d	; 61
 15a:	de b7       	in	r29, 0x3e	; 62
 15c:	9e 83       	std	Y+6, r25	; 0x06
 15e:	8d 83       	std	Y+5, r24	; 0x05
	int i,j;
	for(i=0;i<miliSec;i++)
 160:	1a 82       	std	Y+2, r1	; 0x02
 162:	19 82       	std	Y+1, r1	; 0x01
 164:	14 c0       	rjmp	.+40     	; 0x18e <delay_ms+0x40>
	for(j=0;j<775;j++)
 166:	1c 82       	std	Y+4, r1	; 0x04
 168:	1b 82       	std	Y+3, r1	; 0x03
 16a:	06 c0       	rjmp	.+12     	; 0x178 <delay_ms+0x2a>
	{
		asm("nop");
 16c:	00 00       	nop
void delay_ms(int miliSec) //for 8 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
	for(j=0;j<775;j++)
 16e:	8b 81       	ldd	r24, Y+3	; 0x03
 170:	9c 81       	ldd	r25, Y+4	; 0x04
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	9c 83       	std	Y+4, r25	; 0x04
 176:	8b 83       	std	Y+3, r24	; 0x03
 178:	8b 81       	ldd	r24, Y+3	; 0x03
 17a:	9c 81       	ldd	r25, Y+4	; 0x04
 17c:	87 30       	cpi	r24, 0x07	; 7
 17e:	23 e0       	ldi	r18, 0x03	; 3
 180:	92 07       	cpc	r25, r18
 182:	a4 f3       	brlt	.-24     	; 0x16c <delay_ms+0x1e>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
	int i,j;
	for(i=0;i<miliSec;i++)
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	9a 81       	ldd	r25, Y+2	; 0x02
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	9a 83       	std	Y+2, r25	; 0x02
 18c:	89 83       	std	Y+1, r24	; 0x01
 18e:	29 81       	ldd	r18, Y+1	; 0x01
 190:	3a 81       	ldd	r19, Y+2	; 0x02
 192:	8d 81       	ldd	r24, Y+5	; 0x05
 194:	9e 81       	ldd	r25, Y+6	; 0x06
 196:	28 17       	cp	r18, r24
 198:	39 07       	cpc	r19, r25
 19a:	2c f3       	brlt	.-54     	; 0x166 <delay_ms+0x18>
	for(j=0;j<775;j++)
	{
		asm("nop");
	}
 19c:	26 96       	adiw	r28, 0x06	; 6
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	f8 94       	cli
 1a2:	de bf       	out	0x3e, r29	; 62
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	cd bf       	out	0x3d, r28	; 61
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <TimerSet>:
		default: break;
	}
	
	return state;
	
}
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	00 d0       	rcall	.+0      	; 0x1b4 <TimerSet+0x6>
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <TimerSet+0x8>
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
 1ba:	69 83       	std	Y+1, r22	; 0x01
 1bc:	7a 83       	std	Y+2, r23	; 0x02
 1be:	8b 83       	std	Y+3, r24	; 0x03
 1c0:	9c 83       	std	Y+4, r25	; 0x04
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	ab 81       	ldd	r26, Y+3	; 0x03
 1c8:	bc 81       	ldd	r27, Y+4	; 0x04
 1ca:	80 93 04 01 	sts	0x0104, r24
 1ce:	90 93 05 01 	sts	0x0105, r25
 1d2:	a0 93 06 01 	sts	0x0106, r26
 1d6:	b0 93 07 01 	sts	0x0107, r27
 1da:	80 91 04 01 	lds	r24, 0x0104
 1de:	90 91 05 01 	lds	r25, 0x0105
 1e2:	a0 91 06 01 	lds	r26, 0x0106
 1e6:	b0 91 07 01 	lds	r27, 0x0107
 1ea:	80 93 2b 01 	sts	0x012B, r24
 1ee:	90 93 2c 01 	sts	0x012C, r25
 1f2:	a0 93 2d 01 	sts	0x012D, r26
 1f6:	b0 93 2e 01 	sts	0x012E, r27
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <TimerOn>:
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	81 e8       	ldi	r24, 0x81	; 129
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	2b e0       	ldi	r18, 0x0B	; 11
 216:	fc 01       	movw	r30, r24
 218:	20 83       	st	Z, r18
 21a:	88 e8       	ldi	r24, 0x88	; 136
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	2d e7       	ldi	r18, 0x7D	; 125
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	fc 01       	movw	r30, r24
 224:	31 83       	std	Z+1, r19	; 0x01
 226:	20 83       	st	Z, r18
 228:	8f e6       	ldi	r24, 0x6F	; 111
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	22 e0       	ldi	r18, 0x02	; 2
 22e:	fc 01       	movw	r30, r24
 230:	20 83       	st	Z, r18
 232:	84 e8       	ldi	r24, 0x84	; 132
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	fc 01       	movw	r30, r24
 238:	11 82       	std	Z+1, r1	; 0x01
 23a:	10 82       	st	Z, r1
 23c:	80 91 04 01 	lds	r24, 0x0104
 240:	90 91 05 01 	lds	r25, 0x0105
 244:	a0 91 06 01 	lds	r26, 0x0106
 248:	b0 91 07 01 	lds	r27, 0x0107
 24c:	80 93 2b 01 	sts	0x012B, r24
 250:	90 93 2c 01 	sts	0x012C, r25
 254:	a0 93 2d 01 	sts	0x012D, r26
 258:	b0 93 2e 01 	sts	0x012E, r27
 25c:	8f e5       	ldi	r24, 0x5F	; 95
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	2f e5       	ldi	r18, 0x5F	; 95
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	f9 01       	movw	r30, r18
 266:	20 81       	ld	r18, Z
 268:	20 68       	ori	r18, 0x80	; 128
 26a:	fc 01       	movw	r30, r24
 26c:	20 83       	st	Z, r18
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	08 95       	ret

00000274 <TimerISR>:
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 2a 01 	sts	0x012A, r24
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <__vector_13>:
 288:	1f 92       	push	r1
 28a:	0f 92       	push	r0
 28c:	00 90 5f 00 	lds	r0, 0x005F
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	00 90 5b 00 	lds	r0, 0x005B
 298:	0f 92       	push	r0
 29a:	2f 93       	push	r18
 29c:	3f 93       	push	r19
 29e:	4f 93       	push	r20
 2a0:	5f 93       	push	r21
 2a2:	6f 93       	push	r22
 2a4:	7f 93       	push	r23
 2a6:	8f 93       	push	r24
 2a8:	9f 93       	push	r25
 2aa:	af 93       	push	r26
 2ac:	bf 93       	push	r27
 2ae:	ef 93       	push	r30
 2b0:	ff 93       	push	r31
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	80 91 2b 01 	lds	r24, 0x012B
 2be:	90 91 2c 01 	lds	r25, 0x012C
 2c2:	a0 91 2d 01 	lds	r26, 0x012D
 2c6:	b0 91 2e 01 	lds	r27, 0x012E
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	a1 09       	sbc	r26, r1
 2ce:	b1 09       	sbc	r27, r1
 2d0:	80 93 2b 01 	sts	0x012B, r24
 2d4:	90 93 2c 01 	sts	0x012C, r25
 2d8:	a0 93 2d 01 	sts	0x012D, r26
 2dc:	b0 93 2e 01 	sts	0x012E, r27
 2e0:	80 91 2b 01 	lds	r24, 0x012B
 2e4:	90 91 2c 01 	lds	r25, 0x012C
 2e8:	a0 91 2d 01 	lds	r26, 0x012D
 2ec:	b0 91 2e 01 	lds	r27, 0x012E
 2f0:	00 97       	sbiw	r24, 0x00	; 0
 2f2:	a1 05       	cpc	r26, r1
 2f4:	b1 05       	cpc	r27, r1
 2f6:	89 f4       	brne	.+34     	; 0x31a <__vector_13+0x92>
 2f8:	bd df       	rcall	.-134    	; 0x274 <TimerISR>
 2fa:	80 91 04 01 	lds	r24, 0x0104
 2fe:	90 91 05 01 	lds	r25, 0x0105
 302:	a0 91 06 01 	lds	r26, 0x0106
 306:	b0 91 07 01 	lds	r27, 0x0107
 30a:	80 93 2b 01 	sts	0x012B, r24
 30e:	90 93 2c 01 	sts	0x012C, r25
 312:	a0 93 2d 01 	sts	0x012D, r26
 316:	b0 93 2e 01 	sts	0x012E, r27
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	ff 91       	pop	r31
 320:	ef 91       	pop	r30
 322:	bf 91       	pop	r27
 324:	af 91       	pop	r26
 326:	9f 91       	pop	r25
 328:	8f 91       	pop	r24
 32a:	7f 91       	pop	r23
 32c:	6f 91       	pop	r22
 32e:	5f 91       	pop	r21
 330:	4f 91       	pop	r20
 332:	3f 91       	pop	r19
 334:	2f 91       	pop	r18
 336:	0f 90       	pop	r0
 338:	00 92 5b 00 	sts	0x005B, r0
 33c:	0f 90       	pop	r0
 33e:	00 92 5f 00 	sts	0x005F, r0
 342:	0f 90       	pop	r0
 344:	1f 90       	pop	r1
 346:	18 95       	reti

00000348 <findGCD>:
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
 350:	60 97       	sbiw	r28, 0x10	; 16
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
 35c:	6d 83       	std	Y+5, r22	; 0x05
 35e:	7e 83       	std	Y+6, r23	; 0x06
 360:	8f 83       	std	Y+7, r24	; 0x07
 362:	98 87       	std	Y+8, r25	; 0x08
 364:	29 87       	std	Y+9, r18	; 0x09
 366:	3a 87       	std	Y+10, r19	; 0x0a
 368:	4b 87       	std	Y+11, r20	; 0x0b
 36a:	5c 87       	std	Y+12, r21	; 0x0c
 36c:	8d 81       	ldd	r24, Y+5	; 0x05
 36e:	9e 81       	ldd	r25, Y+6	; 0x06
 370:	af 81       	ldd	r26, Y+7	; 0x07
 372:	b8 85       	ldd	r27, Y+8	; 0x08
 374:	29 85       	ldd	r18, Y+9	; 0x09
 376:	3a 85       	ldd	r19, Y+10	; 0x0a
 378:	4b 85       	ldd	r20, Y+11	; 0x0b
 37a:	5c 85       	ldd	r21, Y+12	; 0x0c
 37c:	bc 01       	movw	r22, r24
 37e:	cd 01       	movw	r24, r26
 380:	50 d2       	rcall	.+1184   	; 0x822 <__udivmodsi4>
 382:	dc 01       	movw	r26, r24
 384:	cb 01       	movw	r24, r22
 386:	89 83       	std	Y+1, r24	; 0x01
 388:	9a 83       	std	Y+2, r25	; 0x02
 38a:	ab 83       	std	Y+3, r26	; 0x03
 38c:	bc 83       	std	Y+4, r27	; 0x04
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	9a 81       	ldd	r25, Y+2	; 0x02
 392:	ab 81       	ldd	r26, Y+3	; 0x03
 394:	bc 81       	ldd	r27, Y+4	; 0x04
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	a1 05       	cpc	r26, r1
 39a:	b1 05       	cpc	r27, r1
 39c:	29 f4       	brne	.+10     	; 0x3a8 <findGCD+0x60>
 39e:	89 85       	ldd	r24, Y+9	; 0x09
 3a0:	9a 85       	ldd	r25, Y+10	; 0x0a
 3a2:	ab 85       	ldd	r26, Y+11	; 0x0b
 3a4:	bc 85       	ldd	r27, Y+12	; 0x0c
 3a6:	11 c0       	rjmp	.+34     	; 0x3ca <findGCD+0x82>
 3a8:	89 85       	ldd	r24, Y+9	; 0x09
 3aa:	9a 85       	ldd	r25, Y+10	; 0x0a
 3ac:	ab 85       	ldd	r26, Y+11	; 0x0b
 3ae:	bc 85       	ldd	r27, Y+12	; 0x0c
 3b0:	8d 83       	std	Y+5, r24	; 0x05
 3b2:	9e 83       	std	Y+6, r25	; 0x06
 3b4:	af 83       	std	Y+7, r26	; 0x07
 3b6:	b8 87       	std	Y+8, r27	; 0x08
 3b8:	89 81       	ldd	r24, Y+1	; 0x01
 3ba:	9a 81       	ldd	r25, Y+2	; 0x02
 3bc:	ab 81       	ldd	r26, Y+3	; 0x03
 3be:	bc 81       	ldd	r27, Y+4	; 0x04
 3c0:	89 87       	std	Y+9, r24	; 0x09
 3c2:	9a 87       	std	Y+10, r25	; 0x0a
 3c4:	ab 87       	std	Y+11, r26	; 0x0b
 3c6:	bc 87       	std	Y+12, r27	; 0x0c
 3c8:	d1 cf       	rjmp	.-94     	; 0x36c <findGCD+0x24>
 3ca:	bc 01       	movw	r22, r24
 3cc:	cd 01       	movw	r24, r26
 3ce:	60 96       	adiw	r28, 0x10	; 16
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	08 95       	ret

000003e0 <arrayShift>:
 3e0:	cf 93       	push	r28
 3e2:	df 93       	push	r29
 3e4:	00 d0       	rcall	.+0      	; 0x3e6 <arrayShift+0x6>
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
 3ea:	8a 83       	std	Y+2, r24	; 0x02
 3ec:	8a 81       	ldd	r24, Y+2	; 0x02
 3ee:	89 83       	std	Y+1, r24	; 0x01
 3f0:	23 c0       	rjmp	.+70     	; 0x438 <arrayShift+0x58>
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	88 2f       	mov	r24, r24
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	29 81       	ldd	r18, Y+1	; 0x01
 3fa:	22 2f       	mov	r18, r18
 3fc:	30 e0       	ldi	r19, 0x00	; 0
 3fe:	21 50       	subi	r18, 0x01	; 1
 400:	31 09       	sbc	r19, r1
 402:	28 5f       	subi	r18, 0xF8	; 248
 404:	3e 4f       	sbci	r19, 0xFE	; 254
 406:	f9 01       	movw	r30, r18
 408:	20 81       	ld	r18, Z
 40a:	88 5f       	subi	r24, 0xF8	; 248
 40c:	9e 4f       	sbci	r25, 0xFE	; 254
 40e:	fc 01       	movw	r30, r24
 410:	20 83       	st	Z, r18
 412:	89 81       	ldd	r24, Y+1	; 0x01
 414:	88 2f       	mov	r24, r24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	29 81       	ldd	r18, Y+1	; 0x01
 41a:	22 2f       	mov	r18, r18
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	31 09       	sbc	r19, r1
 422:	28 5e       	subi	r18, 0xE8	; 232
 424:	3e 4f       	sbci	r19, 0xFE	; 254
 426:	f9 01       	movw	r30, r18
 428:	20 81       	ld	r18, Z
 42a:	88 5e       	subi	r24, 0xE8	; 232
 42c:	9e 4f       	sbci	r25, 0xFE	; 254
 42e:	fc 01       	movw	r30, r24
 430:	20 83       	st	Z, r18
 432:	89 81       	ldd	r24, Y+1	; 0x01
 434:	81 50       	subi	r24, 0x01	; 1
 436:	89 83       	std	Y+1, r24	; 0x01
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	88 23       	and	r24, r24
 43c:	d1 f6       	brne	.-76     	; 0x3f2 <arrayShift+0x12>
 43e:	0f 90       	pop	r0
 440:	0f 90       	pop	r0
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <ObstacleGeneratorSM_Tick>:
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	cd b7       	in	r28, 0x3d	; 61
 44e:	de b7       	in	r29, 0x3e	; 62
 450:	2a 97       	sbiw	r28, 0x0a	; 10
 452:	0f b6       	in	r0, 0x3f	; 63
 454:	f8 94       	cli
 456:	de bf       	out	0x3e, r29	; 62
 458:	0f be       	out	0x3f, r0	; 63
 45a:	cd bf       	out	0x3d, r28	; 61
 45c:	9a 83       	std	Y+2, r25	; 0x02
 45e:	89 83       	std	Y+1, r24	; 0x01
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	9a 81       	ldd	r25, Y+2	; 0x02
 464:	00 97       	sbiw	r24, 0x00	; 0
 466:	21 f0       	breq	.+8      	; 0x470 <ObstacleGeneratorSM_Tick+0x28>
 468:	81 30       	cpi	r24, 0x01	; 1
 46a:	91 05       	cpc	r25, r1
 46c:	49 f0       	breq	.+18     	; 0x480 <ObstacleGeneratorSM_Tick+0x38>
 46e:	05 c0       	rjmp	.+10     	; 0x47a <ObstacleGeneratorSM_Tick+0x32>
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	9a 83       	std	Y+2, r25	; 0x02
 476:	89 83       	std	Y+1, r24	; 0x01
 478:	04 c0       	rjmp	.+8      	; 0x482 <ObstacleGeneratorSM_Tick+0x3a>
 47a:	1a 82       	std	Y+2, r1	; 0x02
 47c:	19 82       	std	Y+1, r1	; 0x01
 47e:	01 c0       	rjmp	.+2      	; 0x482 <ObstacleGeneratorSM_Tick+0x3a>
 480:	00 00       	nop
 482:	89 81       	ldd	r24, Y+1	; 0x01
 484:	9a 81       	ldd	r25, Y+2	; 0x02
 486:	00 97       	sbiw	r24, 0x00	; 0
 488:	09 f4       	brne	.+2      	; 0x48c <ObstacleGeneratorSM_Tick+0x44>
 48a:	5f c0       	rjmp	.+190    	; 0x54a <ObstacleGeneratorSM_Tick+0x102>
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	91 05       	cpc	r25, r1
 490:	09 f0       	breq	.+2      	; 0x494 <ObstacleGeneratorSM_Tick+0x4c>
 492:	5c c0       	rjmp	.+184    	; 0x54c <ObstacleGeneratorSM_Tick+0x104>
 494:	80 91 29 01 	lds	r24, 0x0129
 498:	a3 df       	rcall	.-186    	; 0x3e0 <arrayShift>
 49a:	42 d2       	rcall	.+1156   	; 0x920 <rand>
 49c:	20 91 28 01 	lds	r18, 0x0128
 4a0:	22 2f       	mov	r18, r18
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	b9 01       	movw	r22, r18
 4a6:	aa d1       	rcall	.+852    	; 0x7fc <__divmodhi4>
 4a8:	81 30       	cpi	r24, 0x01	; 1
 4aa:	91 05       	cpc	r25, r1
 4ac:	21 f4       	brne	.+8      	; 0x4b6 <ObstacleGeneratorSM_Tick+0x6e>
 4ae:	83 e2       	ldi	r24, 0x23	; 35
 4b0:	80 93 08 01 	sts	0x0108, r24
 4b4:	11 c0       	rjmp	.+34     	; 0x4d8 <ObstacleGeneratorSM_Tick+0x90>
 4b6:	34 d2       	rcall	.+1128   	; 0x920 <rand>
 4b8:	20 91 28 01 	lds	r18, 0x0128
 4bc:	22 2f       	mov	r18, r18
 4be:	30 e0       	ldi	r19, 0x00	; 0
 4c0:	b9 01       	movw	r22, r18
 4c2:	9c d1       	rcall	.+824    	; 0x7fc <__divmodhi4>
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	91 05       	cpc	r25, r1
 4c8:	21 f4       	brne	.+8      	; 0x4d2 <ObstacleGeneratorSM_Tick+0x8a>
 4ca:	8a e2       	ldi	r24, 0x2A	; 42
 4cc:	80 93 08 01 	sts	0x0108, r24
 4d0:	03 c0       	rjmp	.+6      	; 0x4d8 <ObstacleGeneratorSM_Tick+0x90>
 4d2:	80 e2       	ldi	r24, 0x20	; 32
 4d4:	80 93 08 01 	sts	0x0108, r24
 4d8:	23 d2       	rcall	.+1094   	; 0x920 <rand>
 4da:	20 91 28 01 	lds	r18, 0x0128
 4de:	22 2f       	mov	r18, r18
 4e0:	30 e0       	ldi	r19, 0x00	; 0
 4e2:	b9 01       	movw	r22, r18
 4e4:	8b d1       	rcall	.+790    	; 0x7fc <__divmodhi4>
 4e6:	81 30       	cpi	r24, 0x01	; 1
 4e8:	91 05       	cpc	r25, r1
 4ea:	21 f4       	brne	.+8      	; 0x4f4 <ObstacleGeneratorSM_Tick+0xac>
 4ec:	83 e2       	ldi	r24, 0x23	; 35
 4ee:	80 93 18 01 	sts	0x0118, r24
 4f2:	11 c0       	rjmp	.+34     	; 0x516 <ObstacleGeneratorSM_Tick+0xce>
 4f4:	15 d2       	rcall	.+1066   	; 0x920 <rand>
 4f6:	20 91 28 01 	lds	r18, 0x0128
 4fa:	22 2f       	mov	r18, r18
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	b9 01       	movw	r22, r18
 500:	7d d1       	rcall	.+762    	; 0x7fc <__divmodhi4>
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	91 05       	cpc	r25, r1
 506:	21 f4       	brne	.+8      	; 0x510 <ObstacleGeneratorSM_Tick+0xc8>
 508:	8a e2       	ldi	r24, 0x2A	; 42
 50a:	80 93 18 01 	sts	0x0118, r24
 50e:	03 c0       	rjmp	.+6      	; 0x516 <ObstacleGeneratorSM_Tick+0xce>
 510:	80 e2       	ldi	r24, 0x20	; 32
 512:	80 93 18 01 	sts	0x0118, r24
 516:	80 91 17 01 	lds	r24, 0x0117
 51a:	88 23       	and	r24, r24
 51c:	21 f4       	brne	.+8      	; 0x526 <ObstacleGeneratorSM_Tick+0xde>
 51e:	80 91 27 01 	lds	r24, 0x0127
 522:	88 23       	and	r24, r24
 524:	61 f0       	breq	.+24     	; 0x53e <ObstacleGeneratorSM_Tick+0xf6>
 526:	80 91 29 01 	lds	r24, 0x0129
 52a:	8f 30       	cpi	r24, 0x0F	; 15
 52c:	40 f0       	brcs	.+16     	; 0x53e <ObstacleGeneratorSM_Tick+0xf6>
 52e:	10 92 17 01 	sts	0x0117, r1
 532:	10 92 27 01 	sts	0x0127, r1
 536:	8f e0       	ldi	r24, 0x0F	; 15
 538:	80 93 29 01 	sts	0x0129, r24
 53c:	07 c0       	rjmp	.+14     	; 0x54c <ObstacleGeneratorSM_Tick+0x104>
 53e:	80 91 29 01 	lds	r24, 0x0129
 542:	8f 5f       	subi	r24, 0xFF	; 255
 544:	80 93 29 01 	sts	0x0129, r24
 548:	01 c0       	rjmp	.+2      	; 0x54c <ObstacleGeneratorSM_Tick+0x104>
 54a:	00 00       	nop
 54c:	89 81       	ldd	r24, Y+1	; 0x01
 54e:	9a 81       	ldd	r25, Y+2	; 0x02
 550:	2a 96       	adiw	r28, 0x0a	; 10
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	f8 94       	cli
 556:	de bf       	out	0x3e, r29	; 62
 558:	0f be       	out	0x3f, r0	; 63
 55a:	cd bf       	out	0x3d, r28	; 61
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <main>:
#include "ObstacleGenerator.h"
#include "KeypadReadSM.h"
#include "Display.h"

int main(void)
{
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
 56e:	a6 97       	sbiw	r28, 0x26	; 38
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	f8 94       	cli
 574:	de bf       	out	0x3e, r29	; 62
 576:	0f be       	out	0x3f, r0	; 63
 578:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF; PORTB = 0x00; // PORTB set to output, outputs init 0s
 57a:	84 e2       	ldi	r24, 0x24	; 36
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	2f ef       	ldi	r18, 0xFF	; 255
 580:	fc 01       	movw	r30, r24
 582:	20 83       	st	Z, r18
 584:	85 e2       	ldi	r24, 0x25	; 37
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	fc 01       	movw	r30, r24
 58a:	10 82       	st	Z, r1
	DDRC = 0xF0; PORTC = 0x0F; // PC7..4 outputs init 0s, PC3..0 inputs init 1s
 58c:	87 e2       	ldi	r24, 0x27	; 39
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	20 ef       	ldi	r18, 0xF0	; 240
 592:	fc 01       	movw	r30, r24
 594:	20 83       	st	Z, r18
 596:	88 e2       	ldi	r24, 0x28	; 40
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	2f e0       	ldi	r18, 0x0F	; 15
 59c:	fc 01       	movw	r30, r24
 59e:	20 83       	st	Z, r18
	DDRD = 0xFF; PORTD = 0x00;
 5a0:	8a e2       	ldi	r24, 0x2A	; 42
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	2f ef       	ldi	r18, 0xFF	; 255
 5a6:	fc 01       	movw	r30, r24
 5a8:	20 83       	st	Z, r18
 5aa:	8b e2       	ldi	r24, 0x2B	; 43
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	fc 01       	movw	r30, r24
 5b0:	10 82       	st	Z, r1

	/**Set individual task period********************************/
	unsigned long int Tick1_calc	= 500;
 5b2:	84 ef       	ldi	r24, 0xF4	; 244
 5b4:	91 e0       	ldi	r25, 0x01	; 1
 5b6:	a0 e0       	ldi	r26, 0x00	; 0
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	8b 83       	std	Y+3, r24	; 0x03
 5bc:	9c 83       	std	Y+4, r25	; 0x04
 5be:	ad 83       	std	Y+5, r26	; 0x05
 5c0:	be 83       	std	Y+6, r27	; 0x06
	unsigned long int Tick2_calc	= 500;
 5c2:	84 ef       	ldi	r24, 0xF4	; 244
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	a0 e0       	ldi	r26, 0x00	; 0
 5c8:	b0 e0       	ldi	r27, 0x00	; 0
 5ca:	8f 83       	std	Y+7, r24	; 0x07
 5cc:	98 87       	std	Y+8, r25	; 0x08
 5ce:	a9 87       	std	Y+9, r26	; 0x09
 5d0:	ba 87       	std	Y+10, r27	; 0x0a
	
	/**Set individual task properties********************************/
	
	//Calculating GCD
	unsigned long int tempGCD		= findGCD(Tick1_calc, Tick2_calc);
 5d2:	2f 81       	ldd	r18, Y+7	; 0x07
 5d4:	38 85       	ldd	r19, Y+8	; 0x08
 5d6:	49 85       	ldd	r20, Y+9	; 0x09
 5d8:	5a 85       	ldd	r21, Y+10	; 0x0a
 5da:	8b 81       	ldd	r24, Y+3	; 0x03
 5dc:	9c 81       	ldd	r25, Y+4	; 0x04
 5de:	ad 81       	ldd	r26, Y+5	; 0x05
 5e0:	be 81       	ldd	r27, Y+6	; 0x06
 5e2:	bc 01       	movw	r22, r24
 5e4:	cd 01       	movw	r24, r26
 5e6:	b0 de       	rcall	.-672    	; 0x348 <findGCD>
 5e8:	dc 01       	movw	r26, r24
 5ea:	cb 01       	movw	r24, r22
 5ec:	8b 87       	std	Y+11, r24	; 0x0b
 5ee:	9c 87       	std	Y+12, r25	; 0x0c
 5f0:	ad 87       	std	Y+13, r26	; 0x0d
 5f2:	be 87       	std	Y+14, r27	; 0x0e
	unsigned long int GCD			= tempGCD;
 5f4:	8b 85       	ldd	r24, Y+11	; 0x0b
 5f6:	9c 85       	ldd	r25, Y+12	; 0x0c
 5f8:	ad 85       	ldd	r26, Y+13	; 0x0d
 5fa:	be 85       	ldd	r27, Y+14	; 0x0e
 5fc:	8f 87       	std	Y+15, r24	; 0x0f
 5fe:	98 8b       	std	Y+16, r25	; 0x10
 600:	a9 8b       	std	Y+17, r26	; 0x11
 602:	ba 8b       	std	Y+18, r27	; 0x12
	//Recalculate GCD periods for scheduler
	unsigned long int Tick1_Period	= Tick1_calc/GCD;
 604:	8b 81       	ldd	r24, Y+3	; 0x03
 606:	9c 81       	ldd	r25, Y+4	; 0x04
 608:	ad 81       	ldd	r26, Y+5	; 0x05
 60a:	be 81       	ldd	r27, Y+6	; 0x06
 60c:	2f 85       	ldd	r18, Y+15	; 0x0f
 60e:	38 89       	ldd	r19, Y+16	; 0x10
 610:	49 89       	ldd	r20, Y+17	; 0x11
 612:	5a 89       	ldd	r21, Y+18	; 0x12
 614:	bc 01       	movw	r22, r24
 616:	cd 01       	movw	r24, r26
 618:	04 d1       	rcall	.+520    	; 0x822 <__udivmodsi4>
 61a:	da 01       	movw	r26, r20
 61c:	c9 01       	movw	r24, r18
 61e:	8b 8b       	std	Y+19, r24	; 0x13
 620:	9c 8b       	std	Y+20, r25	; 0x14
 622:	ad 8b       	std	Y+21, r26	; 0x15
 624:	be 8b       	std	Y+22, r27	; 0x16
	unsigned long int Tick2_period	= Tick2_calc/GCD;
 626:	8f 81       	ldd	r24, Y+7	; 0x07
 628:	98 85       	ldd	r25, Y+8	; 0x08
 62a:	a9 85       	ldd	r26, Y+9	; 0x09
 62c:	ba 85       	ldd	r27, Y+10	; 0x0a
 62e:	2f 85       	ldd	r18, Y+15	; 0x0f
 630:	38 89       	ldd	r19, Y+16	; 0x10
 632:	49 89       	ldd	r20, Y+17	; 0x11
 634:	5a 89       	ldd	r21, Y+18	; 0x12
 636:	bc 01       	movw	r22, r24
 638:	cd 01       	movw	r24, r26
 63a:	f3 d0       	rcall	.+486    	; 0x822 <__udivmodsi4>
 63c:	da 01       	movw	r26, r20
 63e:	c9 01       	movw	r24, r18
 640:	8f 8b       	std	Y+23, r24	; 0x17
 642:	98 8f       	std	Y+24, r25	; 0x18
 644:	a9 8f       	std	Y+25, r26	; 0x19
 646:	ba 8f       	std	Y+26, r27	; 0x1a
	static task task1 ;//, task2;
	task *tasks[]					= {&task1 }; //, &task2};
 648:	8f e2       	ldi	r24, 0x2F	; 47
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	9e 8f       	std	Y+30, r25	; 0x1e
 64e:	8d 8f       	std	Y+29, r24	; 0x1d
	const unsigned short numTasks	= sizeof(tasks)/sizeof(task*);
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	9c 8f       	std	Y+28, r25	; 0x1c
 656:	8b 8f       	std	Y+27, r24	; 0x1b
	
	/****************************************************************/
	
	/**Set individual task properties**************/
	task1.state						= 0;
 658:	10 92 2f 01 	sts	0x012F, r1
	task1.period					= Tick1_Period;
 65c:	8b 89       	ldd	r24, Y+19	; 0x13
 65e:	9c 89       	ldd	r25, Y+20	; 0x14
 660:	ad 89       	ldd	r26, Y+21	; 0x15
 662:	be 89       	ldd	r27, Y+22	; 0x16
 664:	80 93 30 01 	sts	0x0130, r24
 668:	90 93 31 01 	sts	0x0131, r25
 66c:	a0 93 32 01 	sts	0x0132, r26
 670:	b0 93 33 01 	sts	0x0133, r27
	task1.elapsedTime				= Tick1_Period;
 674:	8b 89       	ldd	r24, Y+19	; 0x13
 676:	9c 89       	ldd	r25, Y+20	; 0x14
 678:	ad 89       	ldd	r26, Y+21	; 0x15
 67a:	be 89       	ldd	r27, Y+22	; 0x16
 67c:	80 93 34 01 	sts	0x0134, r24
 680:	90 93 35 01 	sts	0x0135, r25
 684:	a0 93 36 01 	sts	0x0136, r26
 688:	b0 93 37 01 	sts	0x0137, r27
	task1.TickFct					= &ObstacleGeneratorSM_Tick;
 68c:	84 e2       	ldi	r24, 0x24	; 36
 68e:	92 e0       	ldi	r25, 0x02	; 2
 690:	90 93 39 01 	sts	0x0139, r25
 694:	80 93 38 01 	sts	0x0138, r24
// 	task2.TickFct					= &DisplaySM_Tick;//Function pointer for the tick.

	/**********************************************/
	
	
	TimerSet(GCD);
 698:	8f 85       	ldd	r24, Y+15	; 0x0f
 69a:	98 89       	ldd	r25, Y+16	; 0x10
 69c:	a9 89       	ldd	r26, Y+17	; 0x11
 69e:	ba 89       	ldd	r27, Y+18	; 0x12
 6a0:	bc 01       	movw	r22, r24
 6a2:	cd 01       	movw	r24, r26
 6a4:	84 dd       	rcall	.-1272   	; 0x1ae <TimerSet>
	TimerOn();
 6a6:	b0 dd       	rcall	.-1184   	; 0x208 <TimerOn>
	
	LCD_init();
 6a8:	0f dd       	rcall	.-1506   	; 0xc8 <LCD_init>
	
	while(1)
	{
		for(unsigned short i = 0; i < numTasks; i++)
 6aa:	1a 82       	std	Y+2, r1	; 0x02
 6ac:	19 82       	std	Y+1, r1	; 0x01
 6ae:	9b c0       	rjmp	.+310    	; 0x7e6 <main+0x284>
		{
			if(tasks[i] -> elapsedTime == tasks[i]-> period)
 6b0:	89 81       	ldd	r24, Y+1	; 0x01
 6b2:	9a 81       	ldd	r25, Y+2	; 0x02
 6b4:	88 0f       	add	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	9e 01       	movw	r18, r28
 6ba:	2f 5f       	subi	r18, 0xFF	; 255
 6bc:	3f 4f       	sbci	r19, 0xFF	; 255
 6be:	82 0f       	add	r24, r18
 6c0:	93 1f       	adc	r25, r19
 6c2:	4c 96       	adiw	r24, 0x1c	; 28
 6c4:	fc 01       	movw	r30, r24
 6c6:	80 81       	ld	r24, Z
 6c8:	91 81       	ldd	r25, Z+1	; 0x01
 6ca:	fc 01       	movw	r30, r24
 6cc:	25 81       	ldd	r18, Z+5	; 0x05
 6ce:	36 81       	ldd	r19, Z+6	; 0x06
 6d0:	47 81       	ldd	r20, Z+7	; 0x07
 6d2:	50 85       	ldd	r21, Z+8	; 0x08
 6d4:	89 81       	ldd	r24, Y+1	; 0x01
 6d6:	9a 81       	ldd	r25, Y+2	; 0x02
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	be 01       	movw	r22, r28
 6de:	6f 5f       	subi	r22, 0xFF	; 255
 6e0:	7f 4f       	sbci	r23, 0xFF	; 255
 6e2:	86 0f       	add	r24, r22
 6e4:	97 1f       	adc	r25, r23
 6e6:	4c 96       	adiw	r24, 0x1c	; 28
 6e8:	fc 01       	movw	r30, r24
 6ea:	80 81       	ld	r24, Z
 6ec:	91 81       	ldd	r25, Z+1	; 0x01
 6ee:	fc 01       	movw	r30, r24
 6f0:	81 81       	ldd	r24, Z+1	; 0x01
 6f2:	92 81       	ldd	r25, Z+2	; 0x02
 6f4:	a3 81       	ldd	r26, Z+3	; 0x03
 6f6:	b4 81       	ldd	r27, Z+4	; 0x04
 6f8:	28 17       	cp	r18, r24
 6fa:	39 07       	cpc	r19, r25
 6fc:	4a 07       	cpc	r20, r26
 6fe:	5b 07       	cpc	r21, r27
 700:	09 f0       	breq	.+2      	; 0x704 <main+0x1a2>
 702:	45 c0       	rjmp	.+138    	; 0x78e <main+0x22c>
			{
				tasks[i] -> state		= tasks[i] -> TickFct(tasks[i] -> state);
 704:	89 81       	ldd	r24, Y+1	; 0x01
 706:	9a 81       	ldd	r25, Y+2	; 0x02
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	9e 01       	movw	r18, r28
 70e:	2f 5f       	subi	r18, 0xFF	; 255
 710:	3f 4f       	sbci	r19, 0xFF	; 255
 712:	82 0f       	add	r24, r18
 714:	93 1f       	adc	r25, r19
 716:	4c 96       	adiw	r24, 0x1c	; 28
 718:	fc 01       	movw	r30, r24
 71a:	00 81       	ld	r16, Z
 71c:	11 81       	ldd	r17, Z+1	; 0x01
 71e:	89 81       	ldd	r24, Y+1	; 0x01
 720:	9a 81       	ldd	r25, Y+2	; 0x02
 722:	88 0f       	add	r24, r24
 724:	99 1f       	adc	r25, r25
 726:	9e 01       	movw	r18, r28
 728:	2f 5f       	subi	r18, 0xFF	; 255
 72a:	3f 4f       	sbci	r19, 0xFF	; 255
 72c:	82 0f       	add	r24, r18
 72e:	93 1f       	adc	r25, r19
 730:	4c 96       	adiw	r24, 0x1c	; 28
 732:	fc 01       	movw	r30, r24
 734:	80 81       	ld	r24, Z
 736:	91 81       	ldd	r25, Z+1	; 0x01
 738:	fc 01       	movw	r30, r24
 73a:	21 85       	ldd	r18, Z+9	; 0x09
 73c:	32 85       	ldd	r19, Z+10	; 0x0a
 73e:	89 81       	ldd	r24, Y+1	; 0x01
 740:	9a 81       	ldd	r25, Y+2	; 0x02
 742:	88 0f       	add	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	ae 01       	movw	r20, r28
 748:	4f 5f       	subi	r20, 0xFF	; 255
 74a:	5f 4f       	sbci	r21, 0xFF	; 255
 74c:	84 0f       	add	r24, r20
 74e:	95 1f       	adc	r25, r21
 750:	4c 96       	adiw	r24, 0x1c	; 28
 752:	fc 01       	movw	r30, r24
 754:	80 81       	ld	r24, Z
 756:	91 81       	ldd	r25, Z+1	; 0x01
 758:	fc 01       	movw	r30, r24
 75a:	80 81       	ld	r24, Z
 75c:	99 27       	eor	r25, r25
 75e:	87 fd       	sbrc	r24, 7
 760:	90 95       	com	r25
 762:	f9 01       	movw	r30, r18
 764:	09 95       	icall
 766:	f8 01       	movw	r30, r16
 768:	80 83       	st	Z, r24

				tasks[i] -> elapsedTime = 0;
 76a:	89 81       	ldd	r24, Y+1	; 0x01
 76c:	9a 81       	ldd	r25, Y+2	; 0x02
 76e:	88 0f       	add	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	9e 01       	movw	r18, r28
 774:	2f 5f       	subi	r18, 0xFF	; 255
 776:	3f 4f       	sbci	r19, 0xFF	; 255
 778:	82 0f       	add	r24, r18
 77a:	93 1f       	adc	r25, r19
 77c:	4c 96       	adiw	r24, 0x1c	; 28
 77e:	fc 01       	movw	r30, r24
 780:	80 81       	ld	r24, Z
 782:	91 81       	ldd	r25, Z+1	; 0x01
 784:	fc 01       	movw	r30, r24
 786:	15 82       	std	Z+5, r1	; 0x05
 788:	16 82       	std	Z+6, r1	; 0x06
 78a:	17 82       	std	Z+7, r1	; 0x07
 78c:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i] -> elapsedTime += 1;
 78e:	89 81       	ldd	r24, Y+1	; 0x01
 790:	9a 81       	ldd	r25, Y+2	; 0x02
 792:	88 0f       	add	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	9e 01       	movw	r18, r28
 798:	2f 5f       	subi	r18, 0xFF	; 255
 79a:	3f 4f       	sbci	r19, 0xFF	; 255
 79c:	82 0f       	add	r24, r18
 79e:	93 1f       	adc	r25, r19
 7a0:	4c 96       	adiw	r24, 0x1c	; 28
 7a2:	fc 01       	movw	r30, r24
 7a4:	20 81       	ld	r18, Z
 7a6:	31 81       	ldd	r19, Z+1	; 0x01
 7a8:	89 81       	ldd	r24, Y+1	; 0x01
 7aa:	9a 81       	ldd	r25, Y+2	; 0x02
 7ac:	88 0f       	add	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	ae 01       	movw	r20, r28
 7b2:	4f 5f       	subi	r20, 0xFF	; 255
 7b4:	5f 4f       	sbci	r21, 0xFF	; 255
 7b6:	84 0f       	add	r24, r20
 7b8:	95 1f       	adc	r25, r21
 7ba:	4c 96       	adiw	r24, 0x1c	; 28
 7bc:	fc 01       	movw	r30, r24
 7be:	80 81       	ld	r24, Z
 7c0:	91 81       	ldd	r25, Z+1	; 0x01
 7c2:	fc 01       	movw	r30, r24
 7c4:	85 81       	ldd	r24, Z+5	; 0x05
 7c6:	96 81       	ldd	r25, Z+6	; 0x06
 7c8:	a7 81       	ldd	r26, Z+7	; 0x07
 7ca:	b0 85       	ldd	r27, Z+8	; 0x08
 7cc:	01 96       	adiw	r24, 0x01	; 1
 7ce:	a1 1d       	adc	r26, r1
 7d0:	b1 1d       	adc	r27, r1
 7d2:	f9 01       	movw	r30, r18
 7d4:	85 83       	std	Z+5, r24	; 0x05
 7d6:	96 83       	std	Z+6, r25	; 0x06
 7d8:	a7 83       	std	Z+7, r26	; 0x07
 7da:	b0 87       	std	Z+8, r27	; 0x08
	
	LCD_init();
	
	while(1)
	{
		for(unsigned short i = 0; i < numTasks; i++)
 7dc:	89 81       	ldd	r24, Y+1	; 0x01
 7de:	9a 81       	ldd	r25, Y+2	; 0x02
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	9a 83       	std	Y+2, r25	; 0x02
 7e4:	89 83       	std	Y+1, r24	; 0x01
 7e6:	29 81       	ldd	r18, Y+1	; 0x01
 7e8:	3a 81       	ldd	r19, Y+2	; 0x02
 7ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
 7ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
 7ee:	28 17       	cp	r18, r24
 7f0:	39 07       	cpc	r19, r25
 7f2:	08 f4       	brcc	.+2      	; 0x7f6 <main+0x294>
 7f4:	5d cf       	rjmp	.-326    	; 0x6b0 <main+0x14e>
				tasks[i] -> elapsedTime = 0;
			}
			tasks[i] -> elapsedTime += 1;
		}
		//while(!TimerFlag);
		TimerFlag = 0;
 7f6:	10 92 2a 01 	sts	0x012A, r1
	}
 7fa:	57 cf       	rjmp	.-338    	; 0x6aa <main+0x148>

000007fc <__divmodhi4>:
 7fc:	97 fb       	bst	r25, 7
 7fe:	07 2e       	mov	r0, r23
 800:	16 f4       	brtc	.+4      	; 0x806 <__divmodhi4+0xa>
 802:	00 94       	com	r0
 804:	06 d0       	rcall	.+12     	; 0x812 <__divmodhi4_neg1>
 806:	77 fd       	sbrc	r23, 7
 808:	08 d0       	rcall	.+16     	; 0x81a <__divmodhi4_neg2>
 80a:	2d d0       	rcall	.+90     	; 0x866 <__udivmodhi4>
 80c:	07 fc       	sbrc	r0, 7
 80e:	05 d0       	rcall	.+10     	; 0x81a <__divmodhi4_neg2>
 810:	3e f4       	brtc	.+14     	; 0x820 <__divmodhi4_exit>

00000812 <__divmodhi4_neg1>:
 812:	90 95       	com	r25
 814:	81 95       	neg	r24
 816:	9f 4f       	sbci	r25, 0xFF	; 255
 818:	08 95       	ret

0000081a <__divmodhi4_neg2>:
 81a:	70 95       	com	r23
 81c:	61 95       	neg	r22
 81e:	7f 4f       	sbci	r23, 0xFF	; 255

00000820 <__divmodhi4_exit>:
 820:	08 95       	ret

00000822 <__udivmodsi4>:
 822:	a1 e2       	ldi	r26, 0x21	; 33
 824:	1a 2e       	mov	r1, r26
 826:	aa 1b       	sub	r26, r26
 828:	bb 1b       	sub	r27, r27
 82a:	fd 01       	movw	r30, r26
 82c:	0d c0       	rjmp	.+26     	; 0x848 <__udivmodsi4_ep>

0000082e <__udivmodsi4_loop>:
 82e:	aa 1f       	adc	r26, r26
 830:	bb 1f       	adc	r27, r27
 832:	ee 1f       	adc	r30, r30
 834:	ff 1f       	adc	r31, r31
 836:	a2 17       	cp	r26, r18
 838:	b3 07       	cpc	r27, r19
 83a:	e4 07       	cpc	r30, r20
 83c:	f5 07       	cpc	r31, r21
 83e:	20 f0       	brcs	.+8      	; 0x848 <__udivmodsi4_ep>
 840:	a2 1b       	sub	r26, r18
 842:	b3 0b       	sbc	r27, r19
 844:	e4 0b       	sbc	r30, r20
 846:	f5 0b       	sbc	r31, r21

00000848 <__udivmodsi4_ep>:
 848:	66 1f       	adc	r22, r22
 84a:	77 1f       	adc	r23, r23
 84c:	88 1f       	adc	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	1a 94       	dec	r1
 852:	69 f7       	brne	.-38     	; 0x82e <__udivmodsi4_loop>
 854:	60 95       	com	r22
 856:	70 95       	com	r23
 858:	80 95       	com	r24
 85a:	90 95       	com	r25
 85c:	9b 01       	movw	r18, r22
 85e:	ac 01       	movw	r20, r24
 860:	bd 01       	movw	r22, r26
 862:	cf 01       	movw	r24, r30
 864:	08 95       	ret

00000866 <__udivmodhi4>:
 866:	aa 1b       	sub	r26, r26
 868:	bb 1b       	sub	r27, r27
 86a:	51 e1       	ldi	r21, 0x11	; 17
 86c:	07 c0       	rjmp	.+14     	; 0x87c <__udivmodhi4_ep>

0000086e <__udivmodhi4_loop>:
 86e:	aa 1f       	adc	r26, r26
 870:	bb 1f       	adc	r27, r27
 872:	a6 17       	cp	r26, r22
 874:	b7 07       	cpc	r27, r23
 876:	10 f0       	brcs	.+4      	; 0x87c <__udivmodhi4_ep>
 878:	a6 1b       	sub	r26, r22
 87a:	b7 0b       	sbc	r27, r23

0000087c <__udivmodhi4_ep>:
 87c:	88 1f       	adc	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	5a 95       	dec	r21
 882:	a9 f7       	brne	.-22     	; 0x86e <__udivmodhi4_loop>
 884:	80 95       	com	r24
 886:	90 95       	com	r25
 888:	bc 01       	movw	r22, r24
 88a:	cd 01       	movw	r24, r26
 88c:	08 95       	ret

0000088e <do_rand>:
 88e:	8f 92       	push	r8
 890:	9f 92       	push	r9
 892:	af 92       	push	r10
 894:	bf 92       	push	r11
 896:	cf 92       	push	r12
 898:	df 92       	push	r13
 89a:	ef 92       	push	r14
 89c:	ff 92       	push	r15
 89e:	cf 93       	push	r28
 8a0:	df 93       	push	r29
 8a2:	ec 01       	movw	r28, r24
 8a4:	68 81       	ld	r22, Y
 8a6:	79 81       	ldd	r23, Y+1	; 0x01
 8a8:	8a 81       	ldd	r24, Y+2	; 0x02
 8aa:	9b 81       	ldd	r25, Y+3	; 0x03
 8ac:	61 15       	cp	r22, r1
 8ae:	71 05       	cpc	r23, r1
 8b0:	81 05       	cpc	r24, r1
 8b2:	91 05       	cpc	r25, r1
 8b4:	21 f4       	brne	.+8      	; 0x8be <do_rand+0x30>
 8b6:	64 e2       	ldi	r22, 0x24	; 36
 8b8:	79 ed       	ldi	r23, 0xD9	; 217
 8ba:	8b e5       	ldi	r24, 0x5B	; 91
 8bc:	97 e0       	ldi	r25, 0x07	; 7
 8be:	2d e1       	ldi	r18, 0x1D	; 29
 8c0:	33 ef       	ldi	r19, 0xF3	; 243
 8c2:	41 e0       	ldi	r20, 0x01	; 1
 8c4:	50 e0       	ldi	r21, 0x00	; 0
 8c6:	3a d0       	rcall	.+116    	; 0x93c <__divmodsi4>
 8c8:	49 01       	movw	r8, r18
 8ca:	5a 01       	movw	r10, r20
 8cc:	9b 01       	movw	r18, r22
 8ce:	ac 01       	movw	r20, r24
 8d0:	a7 ea       	ldi	r26, 0xA7	; 167
 8d2:	b1 e4       	ldi	r27, 0x41	; 65
 8d4:	4f d0       	rcall	.+158    	; 0x974 <__muluhisi3>
 8d6:	6b 01       	movw	r12, r22
 8d8:	7c 01       	movw	r14, r24
 8da:	ac ee       	ldi	r26, 0xEC	; 236
 8dc:	b4 ef       	ldi	r27, 0xF4	; 244
 8de:	a5 01       	movw	r20, r10
 8e0:	94 01       	movw	r18, r8
 8e2:	54 d0       	rcall	.+168    	; 0x98c <__mulohisi3>
 8e4:	c6 0e       	add	r12, r22
 8e6:	d7 1e       	adc	r13, r23
 8e8:	e8 1e       	adc	r14, r24
 8ea:	f9 1e       	adc	r15, r25
 8ec:	f7 fe       	sbrs	r15, 7
 8ee:	06 c0       	rjmp	.+12     	; 0x8fc <do_rand+0x6e>
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	c8 1a       	sub	r12, r24
 8f4:	d1 08       	sbc	r13, r1
 8f6:	e1 08       	sbc	r14, r1
 8f8:	80 e8       	ldi	r24, 0x80	; 128
 8fa:	f8 0a       	sbc	r15, r24
 8fc:	c8 82       	st	Y, r12
 8fe:	d9 82       	std	Y+1, r13	; 0x01
 900:	ea 82       	std	Y+2, r14	; 0x02
 902:	fb 82       	std	Y+3, r15	; 0x03
 904:	c6 01       	movw	r24, r12
 906:	9f 77       	andi	r25, 0x7F	; 127
 908:	df 91       	pop	r29
 90a:	cf 91       	pop	r28
 90c:	ff 90       	pop	r15
 90e:	ef 90       	pop	r14
 910:	df 90       	pop	r13
 912:	cf 90       	pop	r12
 914:	bf 90       	pop	r11
 916:	af 90       	pop	r10
 918:	9f 90       	pop	r9
 91a:	8f 90       	pop	r8
 91c:	08 95       	ret

0000091e <rand_r>:
 91e:	b7 cf       	rjmp	.-146    	; 0x88e <do_rand>

00000920 <rand>:
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	91 e0       	ldi	r25, 0x01	; 1
 924:	b4 cf       	rjmp	.-152    	; 0x88e <do_rand>

00000926 <srand>:
 926:	a0 e0       	ldi	r26, 0x00	; 0
 928:	b0 e0       	ldi	r27, 0x00	; 0
 92a:	80 93 00 01 	sts	0x0100, r24
 92e:	90 93 01 01 	sts	0x0101, r25
 932:	a0 93 02 01 	sts	0x0102, r26
 936:	b0 93 03 01 	sts	0x0103, r27
 93a:	08 95       	ret

0000093c <__divmodsi4>:
 93c:	05 2e       	mov	r0, r21
 93e:	97 fb       	bst	r25, 7
 940:	16 f4       	brtc	.+4      	; 0x946 <__divmodsi4+0xa>
 942:	00 94       	com	r0
 944:	0f d0       	rcall	.+30     	; 0x964 <__negsi2>
 946:	57 fd       	sbrc	r21, 7
 948:	05 d0       	rcall	.+10     	; 0x954 <__divmodsi4_neg2>
 94a:	6b df       	rcall	.-298    	; 0x822 <__udivmodsi4>
 94c:	07 fc       	sbrc	r0, 7
 94e:	02 d0       	rcall	.+4      	; 0x954 <__divmodsi4_neg2>
 950:	46 f4       	brtc	.+16     	; 0x962 <__divmodsi4_exit>
 952:	08 c0       	rjmp	.+16     	; 0x964 <__negsi2>

00000954 <__divmodsi4_neg2>:
 954:	50 95       	com	r21
 956:	40 95       	com	r20
 958:	30 95       	com	r19
 95a:	21 95       	neg	r18
 95c:	3f 4f       	sbci	r19, 0xFF	; 255
 95e:	4f 4f       	sbci	r20, 0xFF	; 255
 960:	5f 4f       	sbci	r21, 0xFF	; 255

00000962 <__divmodsi4_exit>:
 962:	08 95       	ret

00000964 <__negsi2>:
 964:	90 95       	com	r25
 966:	80 95       	com	r24
 968:	70 95       	com	r23
 96a:	61 95       	neg	r22
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	8f 4f       	sbci	r24, 0xFF	; 255
 970:	9f 4f       	sbci	r25, 0xFF	; 255
 972:	08 95       	ret

00000974 <__muluhisi3>:
 974:	0f d0       	rcall	.+30     	; 0x994 <__umulhisi3>
 976:	a5 9f       	mul	r26, r21
 978:	90 0d       	add	r25, r0
 97a:	b4 9f       	mul	r27, r20
 97c:	90 0d       	add	r25, r0
 97e:	a4 9f       	mul	r26, r20
 980:	80 0d       	add	r24, r0
 982:	91 1d       	adc	r25, r1
 984:	11 24       	eor	r1, r1
 986:	08 95       	ret

00000988 <__mulshisi3>:
 988:	b7 ff       	sbrs	r27, 7
 98a:	f4 cf       	rjmp	.-24     	; 0x974 <__muluhisi3>

0000098c <__mulohisi3>:
 98c:	f3 df       	rcall	.-26     	; 0x974 <__muluhisi3>
 98e:	82 1b       	sub	r24, r18
 990:	93 0b       	sbc	r25, r19
 992:	08 95       	ret

00000994 <__umulhisi3>:
 994:	a2 9f       	mul	r26, r18
 996:	b0 01       	movw	r22, r0
 998:	b3 9f       	mul	r27, r19
 99a:	c0 01       	movw	r24, r0
 99c:	a3 9f       	mul	r26, r19
 99e:	70 0d       	add	r23, r0
 9a0:	81 1d       	adc	r24, r1
 9a2:	11 24       	eor	r1, r1
 9a4:	91 1d       	adc	r25, r1
 9a6:	b2 9f       	mul	r27, r18
 9a8:	70 0d       	add	r23, r0
 9aa:	81 1d       	adc	r24, r1
 9ac:	11 24       	eor	r1, r1
 9ae:	91 1d       	adc	r25, r1
 9b0:	08 95       	ret

000009b2 <_exit>:
 9b2:	f8 94       	cli

000009b4 <__stop_program>:
 9b4:	ff cf       	rjmp	.-2      	; 0x9b4 <__stop_program>
