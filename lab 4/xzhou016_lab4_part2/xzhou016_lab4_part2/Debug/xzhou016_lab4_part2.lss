
xzhou016_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000340  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000010a  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000a3  00000000  00000000  000004e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000022c  00000000  00000000  00000585  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001bd  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000083  00000000  00000000  000009c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	5a c0       	rjmp	.+180    	; 0xba <__bad_interrupt>
   6:	00 00       	nop
   8:	58 c0       	rjmp	.+176    	; 0xba <__bad_interrupt>
   a:	00 00       	nop
   c:	56 c0       	rjmp	.+172    	; 0xba <__bad_interrupt>
   e:	00 00       	nop
  10:	54 c0       	rjmp	.+168    	; 0xba <__bad_interrupt>
  12:	00 00       	nop
  14:	52 c0       	rjmp	.+164    	; 0xba <__bad_interrupt>
  16:	00 00       	nop
  18:	50 c0       	rjmp	.+160    	; 0xba <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4e c0       	rjmp	.+156    	; 0xba <__bad_interrupt>
  1e:	00 00       	nop
  20:	4c c0       	rjmp	.+152    	; 0xba <__bad_interrupt>
  22:	00 00       	nop
  24:	4a c0       	rjmp	.+148    	; 0xba <__bad_interrupt>
  26:	00 00       	nop
  28:	48 c0       	rjmp	.+144    	; 0xba <__bad_interrupt>
  2a:	00 00       	nop
  2c:	46 c0       	rjmp	.+140    	; 0xba <__bad_interrupt>
  2e:	00 00       	nop
  30:	44 c0       	rjmp	.+136    	; 0xba <__bad_interrupt>
  32:	00 00       	nop
  34:	42 c0       	rjmp	.+132    	; 0xba <__bad_interrupt>
  36:	00 00       	nop
  38:	40 c0       	rjmp	.+128    	; 0xba <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3e c0       	rjmp	.+124    	; 0xba <__bad_interrupt>
  3e:	00 00       	nop
  40:	3c c0       	rjmp	.+120    	; 0xba <__bad_interrupt>
  42:	00 00       	nop
  44:	3a c0       	rjmp	.+116    	; 0xba <__bad_interrupt>
  46:	00 00       	nop
  48:	38 c0       	rjmp	.+112    	; 0xba <__bad_interrupt>
  4a:	00 00       	nop
  4c:	36 c0       	rjmp	.+108    	; 0xba <__bad_interrupt>
  4e:	00 00       	nop
  50:	34 c0       	rjmp	.+104    	; 0xba <__bad_interrupt>
  52:	00 00       	nop
  54:	32 c0       	rjmp	.+100    	; 0xba <__bad_interrupt>
  56:	00 00       	nop
  58:	30 c0       	rjmp	.+96     	; 0xba <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2e c0       	rjmp	.+92     	; 0xba <__bad_interrupt>
  5e:	00 00       	nop
  60:	2c c0       	rjmp	.+88     	; 0xba <__bad_interrupt>
  62:	00 00       	nop
  64:	2a c0       	rjmp	.+84     	; 0xba <__bad_interrupt>
  66:	00 00       	nop
  68:	28 c0       	rjmp	.+80     	; 0xba <__bad_interrupt>
  6a:	00 00       	nop
  6c:	26 c0       	rjmp	.+76     	; 0xba <__bad_interrupt>
  6e:	00 00       	nop
  70:	24 c0       	rjmp	.+72     	; 0xba <__bad_interrupt>
  72:	00 00       	nop
  74:	22 c0       	rjmp	.+68     	; 0xba <__bad_interrupt>
  76:	00 00       	nop
  78:	20 c0       	rjmp	.+64     	; 0xba <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1e c0       	rjmp	.+60     	; 0xba <__bad_interrupt>
  7e:	00 00       	nop
  80:	1c c0       	rjmp	.+56     	; 0xba <__bad_interrupt>
  82:	00 00       	nop
  84:	1a c0       	rjmp	.+52     	; 0xba <__bad_interrupt>
  86:	00 00       	nop
  88:	18 c0       	rjmp	.+48     	; 0xba <__bad_interrupt>
  8a:	00 00       	nop
  8c:	80 00       	.word	0x0080	; ????
  8e:	84 00       	.word	0x0084	; ????
  90:	88 00       	.word	0x0088	; ????
  92:	d9 00       	.word	0x00d9	; ????
  94:	dd 00       	.word	0x00dd	; ????
  96:	f4 00       	.word	0x00f4	; ????
  98:	f8 00       	.word	0x00f8	; ????

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_clear_bss>:
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a2 30       	cpi	r26, 0x02	; 2
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	e5 d0       	rcall	.+458    	; 0x282 <main>
  b8:	07 c1       	rjmp	.+526    	; 0x2c8 <_exit>

000000ba <__bad_interrupt>:
  ba:	a2 cf       	rjmp	.-188    	; 0x0 <__vectors>

000000bc <TickCount>:

enum Count_States {SM_START, SM_INIT, SM_WAIT, INCREMENT_S0, INC_RELEASE, DECREMENT_S1, DEC_RELEASE } Count_States;
unsigned char setPortC = 0x00;

void TickCount()
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	1f 92       	push	r1
  c2:	cd b7       	in	r28, 0x3d	; 61
  c4:	de b7       	in	r29, 0x3e	; 62
	unsigned char setPinA = ~PINA & 0x03;
  c6:	80 e2       	ldi	r24, 0x20	; 32
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	80 81       	ld	r24, Z
  ce:	80 95       	com	r24
  d0:	83 70       	andi	r24, 0x03	; 3
  d2:	89 83       	std	Y+1, r24	; 0x01
	switch(Count_States) {   // Transitions
  d4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Count_States>
  d8:	88 2f       	mov	r24, r24
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	09 2e       	mov	r0, r25
  de:	00 0c       	add	r0, r0
  e0:	aa 0b       	sbc	r26, r26
  e2:	bb 0b       	sbc	r27, r27
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	26 e0       	ldi	r18, 0x06	; 6
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	84 1b       	sub	r24, r20
  ee:	95 0b       	sbc	r25, r21
  f0:	28 17       	cp	r18, r24
  f2:	39 07       	cpc	r19, r25
  f4:	08 f4       	brcc	.+2      	; 0xf8 <TickCount+0x3c>
  f6:	8b c0       	rjmp	.+278    	; 0x20e <TickCount+0x152>
  f8:	8a 5b       	subi	r24, 0xBA	; 186
  fa:	9f 4f       	sbci	r25, 0xFF	; 255
  fc:	fc 01       	movw	r30, r24
  fe:	db c0       	rjmp	.+438    	; 0x2b6 <__tablejump2__>
		case SM_START:  // Initial transition
		Count_States = SM_INIT;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Count_States>
		break;
 106:	86 c0       	rjmp	.+268    	; 0x214 <TickCount+0x158>
		
		case SM_INIT:  // Initial transition
		Count_States = SM_WAIT;
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Count_States>
		break;
 10e:	82 c0       	rjmp	.+260    	; 0x214 <TickCount+0x158>

		case SM_WAIT:
		if (((setPinA & 0x01) == 0x01 ) && ((setPinA & 0x02) == 0x00 ) && (setPortC< 0x09)) {
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	81 70       	andi	r24, 0x01	; 1
 118:	99 27       	eor	r25, r25
 11a:	89 2b       	or	r24, r25
 11c:	79 f0       	breq	.+30     	; 0x13c <TickCount+0x80>
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	88 2f       	mov	r24, r24
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	82 70       	andi	r24, 0x02	; 2
 126:	99 27       	eor	r25, r25
 128:	89 2b       	or	r24, r25
 12a:	41 f4       	brne	.+16     	; 0x13c <TickCount+0x80>
 12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 130:	89 30       	cpi	r24, 0x09	; 9
 132:	20 f4       	brcc	.+8      	; 0x13c <TickCount+0x80>
			Count_States = INCREMENT_S0;
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Count_States>
 13a:	3a c0       	rjmp	.+116    	; 0x1b0 <TickCount+0xf4>
		}
		else if (((setPinA & 0x02) == 0x02 ) && ((setPinA & 0x01) == 0x00 && (setPortC > 0x00) )) {
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	88 2f       	mov	r24, r24
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	82 70       	andi	r24, 0x02	; 2
 144:	99 27       	eor	r25, r25
 146:	89 2b       	or	r24, r25
 148:	79 f0       	breq	.+30     	; 0x168 <TickCount+0xac>
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	81 70       	andi	r24, 0x01	; 1
 152:	99 27       	eor	r25, r25
 154:	89 2b       	or	r24, r25
 156:	41 f4       	brne	.+16     	; 0x168 <TickCount+0xac>
 158:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 15c:	88 23       	and	r24, r24
 15e:	21 f0       	breq	.+8      	; 0x168 <TickCount+0xac>
			Count_States = DECREMENT_S1;
 160:	85 e0       	ldi	r24, 0x05	; 5
 162:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Count_States>
 166:	24 c0       	rjmp	.+72     	; 0x1b0 <TickCount+0xf4>
		}
		else if (((setPinA & 0x01) == 0x01 ) && ((setPinA & 0x02) == 0x02 )) {
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	88 2f       	mov	r24, r24
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	81 70       	andi	r24, 0x01	; 1
 170:	99 27       	eor	r25, r25
 172:	89 2b       	or	r24, r25
 174:	59 f0       	breq	.+22     	; 0x18c <TickCount+0xd0>
 176:	89 81       	ldd	r24, Y+1	; 0x01
 178:	88 2f       	mov	r24, r24
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	82 70       	andi	r24, 0x02	; 2
 17e:	99 27       	eor	r25, r25
 180:	89 2b       	or	r24, r25
 182:	21 f0       	breq	.+8      	; 0x18c <TickCount+0xd0>
			Count_States = SM_INIT;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Count_States>
 18a:	12 c0       	rjmp	.+36     	; 0x1b0 <TickCount+0xf4>
		}
		else if (((setPinA & 0x01) == 0x00 ) && ((setPinA & 0x02) == 0x00 )) {
 18c:	89 81       	ldd	r24, Y+1	; 0x01
 18e:	88 2f       	mov	r24, r24
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	81 70       	andi	r24, 0x01	; 1
 194:	99 27       	eor	r25, r25
 196:	89 2b       	or	r24, r25
 198:	59 f4       	brne	.+22     	; 0x1b0 <TickCount+0xf4>
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	88 2f       	mov	r24, r24
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	82 70       	andi	r24, 0x02	; 2
 1a2:	99 27       	eor	r25, r25
 1a4:	89 2b       	or	r24, r25
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <TickCount+0xf4>
			Count_States = SM_WAIT;
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Count_States>
		}
		break;
 1ae:	32 c0       	rjmp	.+100    	; 0x214 <TickCount+0x158>
 1b0:	31 c0       	rjmp	.+98     	; 0x214 <TickCount+0x158>
		
		case INCREMENT_S0:
		Count_States = INC_RELEASE;
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Count_States>
		break;
 1b8:	2d c0       	rjmp	.+90     	; 0x214 <TickCount+0x158>

		case INC_RELEASE:
		if (((setPinA & 0x01) == 0x01 )) {
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	88 2f       	mov	r24, r24
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	81 70       	andi	r24, 0x01	; 1
 1c2:	99 27       	eor	r25, r25
 1c4:	89 2b       	or	r24, r25
 1c6:	21 f0       	breq	.+8      	; 0x1d0 <TickCount+0x114>
			Count_States = INC_RELEASE;
 1c8:	84 e0       	ldi	r24, 0x04	; 4
 1ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Count_States>
 1ce:	0b c0       	rjmp	.+22     	; 0x1e6 <TickCount+0x12a>
		}
		else if (((setPinA & 0x01) == 0x00 )) {
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	88 2f       	mov	r24, r24
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	81 70       	andi	r24, 0x01	; 1
 1d8:	99 27       	eor	r25, r25
 1da:	89 2b       	or	r24, r25
 1dc:	21 f4       	brne	.+8      	; 0x1e6 <TickCount+0x12a>
			Count_States = SM_WAIT;
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Count_States>
		}
		break;
 1e4:	17 c0       	rjmp	.+46     	; 0x214 <TickCount+0x158>
 1e6:	16 c0       	rjmp	.+44     	; 0x214 <TickCount+0x158>
		
		case DECREMENT_S1:
		Count_States = DEC_RELEASE;
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Count_States>
		break;
 1ee:	12 c0       	rjmp	.+36     	; 0x214 <TickCount+0x158>
		
		case DEC_RELEASE:
		if (((setPinA & 0x02) == 0x02 )) {
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	88 2f       	mov	r24, r24
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	82 70       	andi	r24, 0x02	; 2
 1f8:	99 27       	eor	r25, r25
 1fa:	89 2b       	or	r24, r25
 1fc:	21 f0       	breq	.+8      	; 0x206 <TickCount+0x14a>
			Count_States = DEC_RELEASE;
 1fe:	86 e0       	ldi	r24, 0x06	; 6
 200:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Count_States>
		}
		else if (((setPinA & 0x00) == 0x00 )) {
			Count_States = SM_WAIT;
		}
		break;
 204:	07 c0       	rjmp	.+14     	; 0x214 <TickCount+0x158>
		case DEC_RELEASE:
		if (((setPinA & 0x02) == 0x02 )) {
			Count_States = DEC_RELEASE;
		}
		else if (((setPinA & 0x00) == 0x00 )) {
			Count_States = SM_WAIT;
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Count_States>
		}
		break;
 20c:	03 c0       	rjmp	.+6      	; 0x214 <TickCount+0x158>

		default:
		Count_States = SM_START;
 20e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Count_States>
		break;
 212:	00 00       	nop
	} // Transitions

	switch(Count_States) {   // State actions
 214:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Count_States>
 218:	88 2f       	mov	r24, r24
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	91 05       	cpc	r25, r1
 220:	a9 f0       	breq	.+42     	; 0x24c <TickCount+0x190>
 222:	84 30       	cpi	r24, 0x04	; 4
 224:	91 05       	cpc	r25, r1
 226:	34 f4       	brge	.+12     	; 0x234 <TickCount+0x178>
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	91 05       	cpc	r25, r1
 22c:	61 f0       	breq	.+24     	; 0x246 <TickCount+0x18a>
 22e:	02 97       	sbiw	r24, 0x02	; 2
 230:	c9 f0       	breq	.+50     	; 0x264 <TickCount+0x1a8>
		
		case DEC_RELEASE:
		break;

		default:
		break;
 232:	1d c0       	rjmp	.+58     	; 0x26e <TickCount+0x1b2>
		default:
		Count_States = SM_START;
		break;
	} // Transitions

	switch(Count_States) {   // State actions
 234:	85 30       	cpi	r24, 0x05	; 5
 236:	91 05       	cpc	r25, r1
 238:	79 f0       	breq	.+30     	; 0x258 <TickCount+0x19c>
 23a:	85 30       	cpi	r24, 0x05	; 5
 23c:	91 05       	cpc	r25, r1
 23e:	a4 f0       	brlt	.+40     	; 0x268 <TickCount+0x1ac>
 240:	06 97       	sbiw	r24, 0x06	; 6
 242:	a1 f0       	breq	.+40     	; 0x26c <TickCount+0x1b0>
		
		case DEC_RELEASE:
		break;

		default:
		break;
 244:	14 c0       	rjmp	.+40     	; 0x26e <TickCount+0x1b2>
		break;
	} // Transitions

	switch(Count_States) {   // State actions
		case SM_INIT:
		setPortC = 0x00;
 246:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		break;
 24a:	11 c0       	rjmp	.+34     	; 0x26e <TickCount+0x1b2>

		case SM_WAIT:
		break;
		
		case INCREMENT_S0:
		setPortC = setPortC + 0x01;
 24c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 250:	8f 5f       	subi	r24, 0xFF	; 255
 252:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 256:	0b c0       	rjmp	.+22     	; 0x26e <TickCount+0x1b2>
		
		case INC_RELEASE:
		break;
		
		case DECREMENT_S1:
		setPortC = setPortC - 0x01;
 258:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 25c:	81 50       	subi	r24, 0x01	; 1
 25e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 262:	05 c0       	rjmp	.+10     	; 0x26e <TickCount+0x1b2>
		case SM_INIT:
		setPortC = 0x00;
		break;

		case SM_WAIT:
		break;
 264:	00 00       	nop
 266:	03 c0       	rjmp	.+6      	; 0x26e <TickCount+0x1b2>
		case INCREMENT_S0:
		setPortC = setPortC + 0x01;
		break;
		
		case INC_RELEASE:
		break;
 268:	00 00       	nop
 26a:	01 c0       	rjmp	.+2      	; 0x26e <TickCount+0x1b2>
		case DECREMENT_S1:
		setPortC = setPortC - 0x01;
		break;
		
		case DEC_RELEASE:
		break;
 26c:	00 00       	nop

		default:
		break;
	} // State actions
	
	 PORTC = setPortC;
 26e:	88 e2       	ldi	r24, 0x28	; 40
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
}
 27a:	0f 90       	pop	r0
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <main>:

int main(void)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 28a:	81 e2       	ldi	r24, 0x21	; 33
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	fc 01       	movw	r30, r24
 290:	10 82       	st	Z, r1
 292:	82 e2       	ldi	r24, 0x22	; 34
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	2f ef       	ldi	r18, 0xFF	; 255
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
 29c:	87 e2       	ldi	r24, 0x27	; 39
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	fc 01       	movw	r30, r24
 2a4:	20 83       	st	Z, r18
 2a6:	88 e2       	ldi	r24, 0x28	; 40
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	fc 01       	movw	r30, r24
 2ac:	10 82       	st	Z, r1
	
	Count_States = SM_START; // Indicates initial call
 2ae:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Count_States>
	while (1)
	{
		TickCount();
 2b2:	04 df       	rcall	.-504    	; 0xbc <TickCount>
	}
 2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <main+0x30>

000002b6 <__tablejump2__>:
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	00 24       	eor	r0, r0
 2bc:	00 1c       	adc	r0, r0
 2be:	0b be       	out	0x3b, r0	; 59
 2c0:	07 90       	elpm	r0, Z+
 2c2:	f6 91       	elpm	r31, Z
 2c4:	e0 2d       	mov	r30, r0
 2c6:	09 94       	ijmp

000002c8 <_exit>:
 2c8:	f8 94       	cli

000002ca <__stop_program>:
 2ca:	ff cf       	rjmp	.-2      	; 0x2ca <__stop_program>
