
xzhou016_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000036a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000122  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000a3  00000000  00000000  00000526  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000293  00000000  00000000  000005c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ce  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000083  00000000  00000000  00000a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00000b01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4f c0       	rjmp	.+158    	; 0xa0 <__ctors_end>
   2:	00 00       	nop
   4:	5d c0       	rjmp	.+186    	; 0xc0 <__bad_interrupt>
   6:	00 00       	nop
   8:	5b c0       	rjmp	.+182    	; 0xc0 <__bad_interrupt>
   a:	00 00       	nop
   c:	59 c0       	rjmp	.+178    	; 0xc0 <__bad_interrupt>
   e:	00 00       	nop
  10:	57 c0       	rjmp	.+174    	; 0xc0 <__bad_interrupt>
  12:	00 00       	nop
  14:	55 c0       	rjmp	.+170    	; 0xc0 <__bad_interrupt>
  16:	00 00       	nop
  18:	53 c0       	rjmp	.+166    	; 0xc0 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	51 c0       	rjmp	.+162    	; 0xc0 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4f c0       	rjmp	.+158    	; 0xc0 <__bad_interrupt>
  22:	00 00       	nop
  24:	4d c0       	rjmp	.+154    	; 0xc0 <__bad_interrupt>
  26:	00 00       	nop
  28:	4b c0       	rjmp	.+150    	; 0xc0 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	49 c0       	rjmp	.+146    	; 0xc0 <__bad_interrupt>
  2e:	00 00       	nop
  30:	47 c0       	rjmp	.+142    	; 0xc0 <__bad_interrupt>
  32:	00 00       	nop
  34:	45 c0       	rjmp	.+138    	; 0xc0 <__bad_interrupt>
  36:	00 00       	nop
  38:	43 c0       	rjmp	.+134    	; 0xc0 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	41 c0       	rjmp	.+130    	; 0xc0 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3f c0       	rjmp	.+126    	; 0xc0 <__bad_interrupt>
  42:	00 00       	nop
  44:	3d c0       	rjmp	.+122    	; 0xc0 <__bad_interrupt>
  46:	00 00       	nop
  48:	3b c0       	rjmp	.+118    	; 0xc0 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	39 c0       	rjmp	.+114    	; 0xc0 <__bad_interrupt>
  4e:	00 00       	nop
  50:	37 c0       	rjmp	.+110    	; 0xc0 <__bad_interrupt>
  52:	00 00       	nop
  54:	35 c0       	rjmp	.+106    	; 0xc0 <__bad_interrupt>
  56:	00 00       	nop
  58:	33 c0       	rjmp	.+102    	; 0xc0 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	31 c0       	rjmp	.+98     	; 0xc0 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2f c0       	rjmp	.+94     	; 0xc0 <__bad_interrupt>
  62:	00 00       	nop
  64:	2d c0       	rjmp	.+90     	; 0xc0 <__bad_interrupt>
  66:	00 00       	nop
  68:	2b c0       	rjmp	.+86     	; 0xc0 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	29 c0       	rjmp	.+82     	; 0xc0 <__bad_interrupt>
  6e:	00 00       	nop
  70:	27 c0       	rjmp	.+78     	; 0xc0 <__bad_interrupt>
  72:	00 00       	nop
  74:	25 c0       	rjmp	.+74     	; 0xc0 <__bad_interrupt>
  76:	00 00       	nop
  78:	23 c0       	rjmp	.+70     	; 0xc0 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	21 c0       	rjmp	.+66     	; 0xc0 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1f c0       	rjmp	.+62     	; 0xc0 <__bad_interrupt>
  82:	00 00       	nop
  84:	1d c0       	rjmp	.+58     	; 0xc0 <__bad_interrupt>
  86:	00 00       	nop
  88:	1b c0       	rjmp	.+54     	; 0xc0 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	14 01       	movw	r2, r8
  8e:	4b 01       	movw	r8, r22
  90:	4b 01       	movw	r8, r22
  92:	1a 01       	movw	r2, r20
  94:	21 01       	movw	r4, r2
  96:	28 01       	movw	r4, r16
  98:	2f 01       	movw	r4, r30
  9a:	36 01       	movw	r6, r12
  9c:	3d 01       	movw	r6, r26
  9e:	44 01       	movw	r8, r8

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	d0 e4       	ldi	r29, 0x40	; 64
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	cd bf       	out	0x3d, r28	; 61

000000ac <__do_clear_bss>:
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b1 e0       	ldi	r27, 0x01	; 1
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a2 30       	cpi	r26, 0x02	; 2
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	f7 d0       	rcall	.+494    	; 0x2ac <main>
  be:	19 c1       	rjmp	.+562    	; 0x2f2 <_exit>

000000c0 <__bad_interrupt>:
  c0:	9f cf       	rjmp	.-194    	; 0x0 <__vectors>

000000c2 <TickCount>:
					 SM_STAGE6, SM_STAGE7 } Festive_State;
					 
unsigned char setPortC = 0x00;

void TickCount()
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	1f 92       	push	r1
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
	unsigned char setPinA = ~PINA & 0x01; //using temp to read from PINA and mask it
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	fc 01       	movw	r30, r24
  d2:	80 81       	ld	r24, Z
  d4:	88 2f       	mov	r24, r24
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	81 70       	andi	r24, 0x01	; 1
  da:	99 27       	eor	r25, r25
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	89 2b       	or	r24, r25
  e0:	09 f0       	breq	.+2      	; 0xe4 <TickCount+0x22>
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	29 83       	std	Y+1, r18	; 0x01
	
	//changing states
	switch (Festive_State)
  e6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Festive_State>
  ea:	88 2f       	mov	r24, r24
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	91 05       	cpc	r25, r1
  f2:	89 f0       	breq	.+34     	; 0x116 <TickCount+0x54>
  f4:	82 30       	cpi	r24, 0x02	; 2
  f6:	91 05       	cpc	r25, r1
  f8:	1c f4       	brge	.+6      	; 0x100 <TickCount+0x3e>
  fa:	89 2b       	or	r24, r25
  fc:	41 f0       	breq	.+16     	; 0x10e <TickCount+0x4c>
  fe:	7d c0       	rjmp	.+250    	; 0x1fa <TickCount+0x138>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	91 05       	cpc	r25, r1
 104:	99 f0       	breq	.+38     	; 0x12c <TickCount+0x6a>
 106:	03 97       	sbiw	r24, 0x03	; 3
 108:	09 f4       	brne	.+2      	; 0x10c <TickCount+0x4a>
 10a:	68 c0       	rjmp	.+208    	; 0x1dc <TickCount+0x11a>
 10c:	76 c0       	rjmp	.+236    	; 0x1fa <TickCount+0x138>
	{
		case SM_START:
			Festive_State = SM_INIT;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
			break;
 114:	74 c0       	rjmp	.+232    	; 0x1fe <TickCount+0x13c>
		case SM_INIT:
			if ( setPinA == 0x00)
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	88 23       	and	r24, r24
 11a:	39 f0       	breq	.+14     	; 0x12a <TickCount+0x68>
			{
				//remain in init
			} else if (setPinA == 0x01)
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	21 f4       	brne	.+8      	; 0x12a <TickCount+0x68>
			{
				Festive_State = SM_WAIT;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
			}
			
			break;
 128:	6a c0       	rjmp	.+212    	; 0x1fe <TickCount+0x13c>
 12a:	69 c0       	rjmp	.+210    	; 0x1fe <TickCount+0x13c>
		case SM_WAIT :
			if (setPinA == 0x01 && setPortC == 0x00 )
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	41 f4       	brne	.+16     	; 0x142 <TickCount+0x80>
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 136:	88 23       	and	r24, r24
 138:	21 f4       	brne	.+8      	; 0x142 <TickCount+0x80>
			{
				Festive_State = SM_STAGE1;
 13a:	84 e0       	ldi	r24, 0x04	; 4
 13c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
 140:	4c c0       	rjmp	.+152    	; 0x1da <TickCount+0x118>
			} else if (setPinA == 0x01 && setPortC == 0x07)
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	41 f4       	brne	.+16     	; 0x158 <TickCount+0x96>
 148:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14c:	87 30       	cpi	r24, 0x07	; 7
 14e:	21 f4       	brne	.+8      	; 0x158 <TickCount+0x96>
			{
				Festive_State = SM_STAGE2;
 150:	85 e0       	ldi	r24, 0x05	; 5
 152:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
 156:	41 c0       	rjmp	.+130    	; 0x1da <TickCount+0x118>
			}else if (setPinA == 0x01 && setPortC == 0x0E)
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	41 f4       	brne	.+16     	; 0x16e <TickCount+0xac>
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 162:	8e 30       	cpi	r24, 0x0E	; 14
 164:	21 f4       	brne	.+8      	; 0x16e <TickCount+0xac>
			{
				Festive_State = SM_STAGE3;
 166:	86 e0       	ldi	r24, 0x06	; 6
 168:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
 16c:	36 c0       	rjmp	.+108    	; 0x1da <TickCount+0x118>
			} else if (setPinA == 0x01 && setPortC == 0x1C)
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	41 f4       	brne	.+16     	; 0x184 <TickCount+0xc2>
 174:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 178:	8c 31       	cpi	r24, 0x1C	; 28
 17a:	21 f4       	brne	.+8      	; 0x184 <TickCount+0xc2>
			{
				Festive_State = SM_STAGE4;
 17c:	87 e0       	ldi	r24, 0x07	; 7
 17e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
 182:	2b c0       	rjmp	.+86     	; 0x1da <TickCount+0x118>
			} else if (setPinA == 0x01 && setPortC == 0x38)
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	41 f4       	brne	.+16     	; 0x19a <TickCount+0xd8>
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 18e:	88 33       	cpi	r24, 0x38	; 56
 190:	21 f4       	brne	.+8      	; 0x19a <TickCount+0xd8>
			{
				Festive_State = SM_STAGE5;
 192:	88 e0       	ldi	r24, 0x08	; 8
 194:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
 198:	20 c0       	rjmp	.+64     	; 0x1da <TickCount+0x118>
			} else if (setPinA == 0x01 && setPortC == 0x70)
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	41 f4       	brne	.+16     	; 0x1b0 <TickCount+0xee>
 1a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1a4:	80 37       	cpi	r24, 0x70	; 112
 1a6:	21 f4       	brne	.+8      	; 0x1b0 <TickCount+0xee>
			{
				Festive_State = SM_STAGE6;
 1a8:	89 e0       	ldi	r24, 0x09	; 9
 1aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
 1ae:	15 c0       	rjmp	.+42     	; 0x1da <TickCount+0x118>
			} else if (setPinA == 0x01 && setPortC == 0x61)
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	41 f4       	brne	.+16     	; 0x1c6 <TickCount+0x104>
 1b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1ba:	81 36       	cpi	r24, 0x61	; 97
 1bc:	21 f4       	brne	.+8      	; 0x1c6 <TickCount+0x104>
			{
				Festive_State = SM_STAGE7;
 1be:	8a e0       	ldi	r24, 0x0A	; 10
 1c0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
 1c4:	0a c0       	rjmp	.+20     	; 0x1da <TickCount+0x118>
			} else if (setPinA == 0x01 && setPortC == 0x43)
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	81 30       	cpi	r24, 0x01	; 1
 1ca:	39 f4       	brne	.+14     	; 0x1da <TickCount+0x118>
 1cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1d0:	83 34       	cpi	r24, 0x43	; 67
 1d2:	19 f4       	brne	.+6      	; 0x1da <TickCount+0x118>
			{
				Festive_State = SM_INIT;
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
			}else
			{
				// remain in wait
			}
			break;
 1da:	11 c0       	rjmp	.+34     	; 0x1fe <TickCount+0x13c>
		case SM_RELEASE :
			if (setPinA == 0x01)
 1dc:	89 81       	ldd	r24, Y+1	; 0x01
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	21 f4       	brne	.+8      	; 0x1ea <TickCount+0x128>
			{
				Festive_State = SM_RELEASE;
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
 1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <TickCount+0x136>
			} 
			else if (setPinA == 0x00)
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	88 23       	and	r24, r24
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <TickCount+0x136>
			{
				Festive_State = SM_WAIT;
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
			}
			
			break;
 1f6:	03 c0       	rjmp	.+6      	; 0x1fe <TickCount+0x13c>
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <TickCount+0x13c>
		default:
			Festive_State = SM_START;
 1fa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Festive_State>
	}
	
	//set lighting for stages
	switch (Festive_State)
 1fe:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Festive_State>
 202:	88 2f       	mov	r24, r24
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	09 2e       	mov	r0, r25
 208:	00 0c       	add	r0, r0
 20a:	aa 0b       	sbc	r26, r26
 20c:	bb 0b       	sbc	r27, r27
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	29 e0       	ldi	r18, 0x09	; 9
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	84 1b       	sub	r24, r20
 218:	95 0b       	sbc	r25, r21
 21a:	28 17       	cp	r18, r24
 21c:	39 07       	cpc	r19, r25
 21e:	d8 f1       	brcs	.+118    	; 0x296 <TickCount+0x1d4>
 220:	8a 5b       	subi	r24, 0xBA	; 186
 222:	9f 4f       	sbci	r25, 0xFF	; 255
 224:	fc 01       	movw	r30, r24
 226:	5c c0       	rjmp	.+184    	; 0x2e0 <__tablejump2__>
	{
		case SM_INIT :
			setPortC = 0x00;
 228:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			Festive_State = SM_RELEASE ;
 22c:	83 e0       	ldi	r24, 0x03	; 3
 22e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
			break;
 232:	32 c0       	rjmp	.+100    	; 0x298 <TickCount+0x1d6>
		case SM_STAGE1 :
			setPortC = 0x07;
 234:	87 e0       	ldi	r24, 0x07	; 7
 236:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			Festive_State = SM_RELEASE;
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
			break;
 240:	2b c0       	rjmp	.+86     	; 0x298 <TickCount+0x1d6>
		case SM_STAGE2 :
			setPortC = 0x0E;
 242:	8e e0       	ldi	r24, 0x0E	; 14
 244:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			Festive_State = SM_RELEASE;
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
			break;
 24e:	24 c0       	rjmp	.+72     	; 0x298 <TickCount+0x1d6>
		case SM_STAGE3 :
			setPortC = 0x1C;
 250:	8c e1       	ldi	r24, 0x1C	; 28
 252:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			Festive_State = SM_RELEASE;
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
			break;
 25c:	1d c0       	rjmp	.+58     	; 0x298 <TickCount+0x1d6>
		case SM_STAGE4 :
			setPortC = 0x38;
 25e:	88 e3       	ldi	r24, 0x38	; 56
 260:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			Festive_State = SM_RELEASE;
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
			break;
 26a:	16 c0       	rjmp	.+44     	; 0x298 <TickCount+0x1d6>
		case SM_STAGE5 : 
			setPortC = 0x70;
 26c:	80 e7       	ldi	r24, 0x70	; 112
 26e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			Festive_State = SM_RELEASE;
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
			break;
 278:	0f c0       	rjmp	.+30     	; 0x298 <TickCount+0x1d6>
		case SM_STAGE6 :
			setPortC = 0x61;
 27a:	81 e6       	ldi	r24, 0x61	; 97
 27c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			Festive_State = SM_RELEASE;
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
			break;
 286:	08 c0       	rjmp	.+16     	; 0x298 <TickCount+0x1d6>
		case SM_STAGE7 : 
			setPortC = 0x43;
 288:	83 e4       	ldi	r24, 0x43	; 67
 28a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			Festive_State = SM_RELEASE;
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Festive_State>
			break;
 294:	01 c0       	rjmp	.+2      	; 0x298 <TickCount+0x1d6>
		default:
			break;
 296:	00 00       	nop
		
	}
	
	PORTC = setPortC;
 298:	88 e2       	ldi	r24, 0x28	; 40
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
	
}
 2a4:	0f 90       	pop	r0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <main>:



int main(void)
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;
 2b4:	81 e2       	ldi	r24, 0x21	; 33
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	fc 01       	movw	r30, r24
 2ba:	10 82       	st	Z, r1
 2bc:	82 e2       	ldi	r24, 0x22	; 34
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
	DDRC = 0xFF; PORTC = 0x00;
 2c6:	87 e2       	ldi	r24, 0x27	; 39
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	fc 01       	movw	r30, r24
 2ce:	20 83       	st	Z, r18
 2d0:	88 e2       	ldi	r24, 0x28	; 40
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	fc 01       	movw	r30, r24
 2d6:	10 82       	st	Z, r1
	
	Festive_State = SM_START; //set state
 2d8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Festive_State>
    while (1) 
    {
		TickCount();
 2dc:	f2 de       	rcall	.-540    	; 0xc2 <TickCount>
    }
 2de:	fe cf       	rjmp	.-4      	; 0x2dc <main+0x30>

000002e0 <__tablejump2__>:
 2e0:	ee 0f       	add	r30, r30
 2e2:	ff 1f       	adc	r31, r31
 2e4:	00 24       	eor	r0, r0
 2e6:	00 1c       	adc	r0, r0
 2e8:	0b be       	out	0x3b, r0	; 59
 2ea:	07 90       	elpm	r0, Z+
 2ec:	f6 91       	elpm	r31, Z
 2ee:	e0 2d       	mov	r30, r0
 2f0:	09 94       	ijmp

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
